### YamlMime:QSharpType
uid: microsoft.quantum.canon.ampampbyreflectionsphases
name: AmpAmpByReflectionsPhases
type: function
namespace: Microsoft.Quantum.Canon
summary: Amplitude amplification by partial reflections.
remarks: |-
  Amplitude amplification is a special case of oblivious amplitude amplification where there are no system qubits and the oblivious oracle is set to identity.
  In most cases, `startQubits` is initialized in the state $\ket{\text{start}}\_1$, which is the $-1$ eigenstate of `startStateReflection`.
syntax: 'function AmpAmpByReflectionsPhases (phases : Microsoft.Quantum.Canon.AmpAmpReflectionPhases, startStateReflection : Microsoft.Quantum.Canon.ReflectionOracle, targetStateReflection : Microsoft.Quantum.Canon.ReflectionOracle) : (Qubit[] => Unit : Adjoint, Controlled)'
input:
  content: '(phases : Microsoft.Quantum.Canon.AmpAmpReflectionPhases, startStateReflection : Microsoft.Quantum.Canon.ReflectionOracle, targetStateReflection : Microsoft.Quantum.Canon.ReflectionOracle)'
  types:
  - name: phases
    summary: Phases of partial reflections
    uid: microsoft.quantum.canon.ampampreflectionphases
  - name: startStateReflection
    summary: Reflection operator about start state
    uid: microsoft.quantum.canon.reflectionoracle
  - name: targetStateReflection
    summary: Reflection operator about target state
    uid: microsoft.quantum.canon.reflectionoracle
output:
  content: '(Qubit[] => Unit : Adjoint, Controlled)'
  types:
  - summary: An operation that implements amplitude amplification by partial reflections.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
...
