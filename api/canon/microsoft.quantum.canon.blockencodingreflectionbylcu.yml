### YamlMime:QSharpType
uid: microsoft.quantum.canon.blockencodingreflectionbylcu
name: BlockEncodingReflectionByLCU
type: function
namespace: Microsoft.Quantum.Canon
summary: |-
  Encodes an operator of interest into a `BlockEncodingReflection`.

  This constructs a `BlockEncodingReflection` unitary $U=P\cdot V\cdot P^\dag$ that encodes some
  operator $H=\sum_{j}|\alpha_j|U_j$ of interest that is a linear combination of
  unitaries. Typically, $P$ is a state preparation unitary such that
  $P\ket{0}_a\sum_j\sqrt{\alpha_j/\|\vec\alpha\|_2}\ket{j}_a$,
  and $V=\sum_{j}\ket{j}\bra{j}_a\otimes U_j$.
remarks: |-
  This `BlockEncoding` implementation gives it the properties of a
  `BlockEncodingReflection`.
syntax: 'function BlockEncodingReflectionByLCU (statePreparation : (Qubit[] => Unit : Adjoint, Controlled), selector : ((Qubit[], Qubit[]) => Unit : Adjoint, Controlled)) : Microsoft.Quantum.Canon.BlockEncodingReflection'
input:
  content: '(statePreparation : (Qubit[] => Unit : Adjoint, Controlled), selector : ((Qubit[], Qubit[]) => Unit : Adjoint, Controlled))'
  types:
  - name: statePreparation
    summary: A unitary $P$ that prepares some target state.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: selector
    summary: A unitary $V$ that encodes the component unitaries of $H$.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
output:
  content: Microsoft.Quantum.Canon.BlockEncodingReflection
  types:
  - summary: |-
      A unitary $U$ acting jointly on registers `a` and `s` that block-
      encodes $H$, and satisfies $U'^{-1} = U$.
    uid: microsoft.quantum.canon.blockencodingreflection
seeAlso:
- microsoft.quantum.canon.blockencoding
- microsoft.quantum.canon.blockencodingreflection
...
