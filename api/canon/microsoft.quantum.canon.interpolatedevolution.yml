### YamlMime:QSharpType
uid: microsoft.quantum.canon.interpolatedevolution
name: InterpolatedEvolution
type: function
namespace: Microsoft.Quantum.Canon
summary: |-
  Interpolates between two generators with a uniform schedule,
  returning an operation that applies simulated evolution under
  the resulting time-dependent generator to a qubit register.
remarks: |-
  If the interpolation time is chosen to meet the adiabatic conditions,
  then this function returns an operation which performs adiabatic
  state preparation for the final dynamical generator.
syntax: 'function InterpolatedEvolution (inerpolationTime : Double, evolutionGeneratorStart : Microsoft.Quantum.Canon.EvolutionGenerator, evolutionGeneratorEnd : Microsoft.Quantum.Canon.EvolutionGenerator, timeDependentSimulationAlgorithm : Microsoft.Quantum.Canon.TimeDependentSimulationAlgorithm) : (Qubit[] => Unit : Adjoint, Controlled)'
input:
  content: '(inerpolationTime : Double, evolutionGeneratorStart : Microsoft.Quantum.Canon.EvolutionGenerator, evolutionGeneratorEnd : Microsoft.Quantum.Canon.EvolutionGenerator, timeDependentSimulationAlgorithm : Microsoft.Quantum.Canon.TimeDependentSimulationAlgorithm)'
  types:
  - name: inerpolationTime
    isPrimitive: true
    uid: Double
  - name: evolutionGeneratorStart
    summary: Initial generator to simulate evolution under.
    uid: microsoft.quantum.canon.evolutiongenerator
  - name: evolutionGeneratorEnd
    summary: Final generator to simulate evolution under.
    uid: microsoft.quantum.canon.evolutiongenerator
  - name: timeDependentSimulationAlgorithm
    summary: |-
      A time-dependent simulation algorithm that will be used
      to simulate evolution during the uniform interpolation schedule.
    uid: microsoft.quantum.canon.timedependentsimulationalgorithm
output:
  content: '(Qubit[] => Unit : Adjoint, Controlled)'
  types:
  - isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
...
