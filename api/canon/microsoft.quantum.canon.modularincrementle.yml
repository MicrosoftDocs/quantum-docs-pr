### YamlMime:QSharpType
uid: microsoft.quantum.canon.modularincrementle
name: ModularIncrementLE
type: operation
namespace: Microsoft.Quantum.Canon
summary: |-
  Performs a modular increment of a qubit register by an integer constant.

  Let us denote `increment` by a, `modulus` by N and integer encoded in `target` by y
  Then the operation performs the following transformation:
  \begin{align}
  \ket{y} \mapsto \ket{y + 1 \operatorname{mod} N}
  \end{align}
  Integers are encoded in little-endian format.
remarks: |-
  Assumes that the value of target is less than N. Note that
  <xref:microsoft.quantum.canon.modularincrementphasele> implements
  the same operation, but in the `PhaseLittleEndian` basis.
syntax: 'operation ModularIncrementLE (increment : Int, modulus : Int, target : Microsoft.Quantum.Canon.LittleEndian) : Unit'
input:
  content: '(increment : Int, modulus : Int, target : Microsoft.Quantum.Canon.LittleEndian)'
  types:
  - name: increment
    summary: Integer increment a to be added to y.
    isPrimitive: true
    uid: Int
  - name: modulus
    summary: Integer N that mods y + a.
    isPrimitive: true
    uid: Int
  - name: target
    summary: Integer y in `LittleEndian` format that `increment` a is added to.
    uid: microsoft.quantum.canon.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.canon.modularincrementphasele
...
