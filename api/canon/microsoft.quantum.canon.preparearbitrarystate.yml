### YamlMime:QSharpType
uid: microsoft.quantum.canon.preparearbitrarystate
name: PrepareArbitraryState
type: operation
namespace: Microsoft.Quantum.Canon
summary: " Returns a unitary operation $U$ that prepares an arbitrary quantum \n state $\\ket{\\psi}$ with complex coefficients $r_j e^{i t_j}$ from \n the $n$-qubit computational basis state $\\ket{0...0}$.\n\n $U\\ket{0...0}=\\ket{\\psi}=\\frac{\\sum^{2^n-1}_{j=0}r_j e^{i t_j}\\ket{j}}{\\sqrt{\\sum^{2^n-1}_{j=0}|r_j|^2}}$.\n"
remarks: " Negative input coefficients $r_j < 0$ will be treated as though\n positive with value $|r_j|$. `coefficients` will be padded with \n elements $(r_j, t_j) = (0.0, 0.0)$ if fewer than $2^n$ are \n specified.\n"
syntax: 'operation PrepareArbitraryState (coefficients : ComplexPolar[], qubits : BigEndian) : ()'
references: >2-
   - Synthesis of Quantum Logic Circuits
     Vivek V. Shende, Stephen S. Bullock, Igor L. Markov
     https://arxiv.org/abs/quant-ph/0406176
input:
  content: '(coefficients : ComplexPolar[], qubits : BigEndian)'
  types:
  - name: coefficients
    summary: " Array of up to $2^n$ complex coefficients represented by their \n absolute value and phase $(r_j, t_j)$. The $j$th coefficient \n indexes the number state $\\ket{j}$ encoded in big-endian format. \n"
    uid: microsoft.quantum.canon.complexpolar
    isArray: true
  - name: qubits
    summary: " Qubit register encoding number states in big-endian format. This is\n expected to be initialized in the computational basis state \n $ket{0...0}$.\n"
    uid: microsoft.quantum.canon.bigendian
output:
  content: ()
  types:
  - uid: ()
    isPrimitive: true
functors:
- Adjoint
- Controlled
