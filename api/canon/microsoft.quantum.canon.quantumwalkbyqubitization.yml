### YamlMime:QSharpType
uid: microsoft.quantum.canon.quantumwalkbyqubitization
name: QuantumWalkByQubitization
type: function
namespace: Microsoft.Quantum.Canon
summary: |-
  Converts a `BlockEncodingReflection` into a quantum walk.

  That is, given a `BlockEncodingReflection` unitary $U$
  that encodes some operator $H$ of interest, converts it into a quantum walk
  $W$ containing the spectrum of $\pm e^{\pm i\sin^{-1}(H)}$.
syntax: 'function QuantumWalkByQubitization (blockEncoding : Microsoft.Quantum.Canon.BlockEncodingReflection) : ((Qubit[], Qubit[]) => Unit : Adjoint, Controlled)'
references: |-
  - Hamiltonian Simulation by Qubitization
    Guang Hao Low, Isaac L. Chuang
    https://arxiv.org/abs/1610.06546
input:
  content: '(blockEncoding : Microsoft.Quantum.Canon.BlockEncodingReflection)'
  types:
  - name: blockEncoding
    uid: microsoft.quantum.canon.blockencodingreflection
output:
  content: '((Qubit[], Qubit[]) => Unit : Adjoint, Controlled)'
  types:
  - summary: |-
      A quantum walk $W$ acting jointly on registers `a` and `s` that block-
      encodes $H$, and contains the spectrum of $\pm e^{\pm i\sin^{-1}(H)}$.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
seeAlso:
- microsoft.quantum.canon.blockencoding
- microsoft.quantum.canon.blockencodingreflection
...
