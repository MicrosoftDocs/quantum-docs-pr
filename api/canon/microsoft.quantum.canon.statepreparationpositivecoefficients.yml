### YamlMime:QSharpType
uid: microsoft.quantum.canon.statepreparationpositivecoefficients
name: StatePreparationPositiveCoefficients
type: function
namespace: Microsoft.Quantum.Canon
summary: " Returns a unitary operation $U$ that prepares an arbitrary quantum \n state $\\ket{\\psi}$ with positive coefficients $\\alpha_j\\ge 0$ from \n the $n$-qubit computational basis state $\\ket{0...0}$.\n\n The action of U on a newly-allocated register is given by\n \\begin{align}\n     U \\ket{0\\cdots 0} = \\ket{\\psi} = \\frac{\\sum^{2^n-1}_{j=0}\\alpha_j \\ket{j}}{\\sqrt{\\sum^{2^n-1}_{j=0}|\\alpha_j|^2}}$.\n \\end{align}\n"
remarks: " Negative input coefficients $\\alpha_j < 0$ will be treated as though\n positive with value $|\\alpha_j|$. `coefficients` will be padded with \n elements $\\alpha_j = 0.0$ if fewer than $2^n$ are specified.\n\n\n### Examples\n The following snippet prepares the quantum state $\\ket{\\psi}=\\sqrt{1/8}\\ket{0}+\\sqrt{7/8}\\ket{2}$\n in the qubit register `qubitsBE`.\n ```qsharp\n mutable amplitudes = [Sqrt(0.125); 0.0; Sqrt(0.875); 0.0];\n let op = StatePreparationPositiveCoefficients(amplitudes);\n using(qubits = Qubit[2]){\n     let qubitsBE = BigEndian(qubits);\n     op(qubitsBE);\n }\n ```"
syntax: 'function StatePreparationPositiveCoefficients (coefficients : Double[]) : (BigEndian => () : Adjoint, Controlled)'
input:
  content: '(coefficients : Double[])'
  types:
  - name: coefficients
    summary: " Array of up to $2^n$ coefficients $\\alpha_j$. The $j$th coefficient \n indexes the number state $\\ket{j}$ encoded in big-endian format. \n"
    uid: Double
    isPrimitive: true
    isArray: true
output:
  content: '(BigEndian => () : Adjoint, Controlled)'
  types:
  - summary: >2
       A state-preparation unitary operation $U$.
    isOperation: true
    input:
      types:
      - uid: microsoft.quantum.canon.bigendian
    output:
      types:
      - uid: ()
        isPrimitive: true
    functors:
    - Adjoint
    - Controlled
