### YamlMime:QSharpNamespace
name: microsoft.quantum.canon
functions:
  items:
  - uid: microsoft.quantum.canon.decomposeintotimestepsca
    summary: >2
       Returns an operation implementing the Trotter–Suzuki integrator for
       a given operation.
  - uid: microsoft.quantum.canon.isresultzero
    summary: ' The `IsResultZero` function tests if a given Result value is equal to `Zero`.     '
  - uid: microsoft.quantum.canon.isresultone
    summary: ' The `IsResultOne` function tests if a given Result value is equal to `One`.'
  - uid: microsoft.quantum.canon.filter
  - uid: microsoft.quantum.canon.forall
  - uid: microsoft.quantum.canon.forany
  - uid: microsoft.quantum.canon.map
    summary: >2
       The `Map` function takes an array and a function that is defined
       for the elements of the array, and returns a new array that consists
       of the images of the original array under the function.
  - uid: microsoft.quantum.canon.mapindex
    summary: >2
       The `MapIndex` function takes an array and a function that is defined
       for the indexed elements of the array, and returns a new array that consists
       of the images of the original array under the function.
  - uid: microsoft.quantum.canon.subarray
  - uid: microsoft.quantum.canon.curryopimpl
  - uid: microsoft.quantum.canon.curryop
    summary: >2
       Given an operation with two inputs, applies Curry's isomorphism
       $f(x, y) \equiv f(x)(y)$ to return an operation of one input which
       returns an operation of one input.
  - uid: microsoft.quantum.canon.uncurryop
    summary: >2
       Given a function which returns operations,
       returns a new operation which takes both inputs
       as a tuple.
  - uid: microsoft.quantum.canon.uncurryopc
  - uid: microsoft.quantum.canon.uncurryopa
  - uid: microsoft.quantum.canon.uncurryopca
  - uid: microsoft.quantum.canon.interpolatedevolution
    summary: >2
       This interpolates between two generators with a uniform schedule,
       returning an operation that applies simulated evolution under
       the resulting time-dependent generator to a qubit register.
  - uid: microsoft.quantum.canon.intabs
  - uid: microsoft.quantum.canon.intmax
  - uid: microsoft.quantum.canon.boolfromresult
  - uid: microsoft.quantum.canon.resultfrombool
  - uid: microsoft.quantum.canon.boolarrfromresultarr
  - uid: microsoft.quantum.canon.resultarrfromboolarr
  - uid: microsoft.quantum.canon.boolarrfrompositiveint
    summary: >2
       Produces binary representation of positive integer in little Endian format.
  - uid: microsoft.quantum.canon.positiveintfromboolarr
    summary: >2
       Produces a positive integer from a string of bits in in little Endian format.
  - uid: microsoft.quantum.canon.positiveintfromresultarr
    summary: >2
       Produces a positive integer from a string of Results in in little Endian format.
  - uid: microsoft.quantum.canon.asqubitarray
  - uid: microsoft.quantum.canon.assertalmostequaltol
    summary: >2
       Asserts that a classical floating point variable has the expected value up to a given
       absolute tolerance.
  - uid: microsoft.quantum.canon.assertalmostequal
    summary: >2
       Asserts that a classical floating point variable has the expected value up to a
       small tolerance of 1e-10.
  - uid: microsoft.quantum.canon.assertintequal
    summary: >2
       Asserts that a classical Int variable has the expected value.
  - uid: microsoft.quantum.canon.assertboolequal
    summary: >2
       Asserts that a classical Bool variable has the expected value.
  - uid: microsoft.quantum.canon.assertboolarrayequal
    summary: >2
       Asserts that two arrays of boolean values are equal.
  - uid: microsoft.quantum.canon.bind
    summary: >2
       Given an array of operations acting on a single input,
       produces a new operation that
       performs each given operation in sequence.
  - uid: microsoft.quantum.canon.binda
  - uid: microsoft.quantum.canon.bindc
  - uid: microsoft.quantum.canon.bindca
  - uid: microsoft.quantum.canon.controlledonbitstring
    summary: >2
       Returns a unitary operator that applies an oracle on the target register if the control register state corresponds to a specified bit mask.
  - uid: microsoft.quantum.canon.controlledonint
    summary: >2
       Returns a unitary operator that applies an oracle on the target register if the control register state corresponds to a specified positive integer.
  - uid: microsoft.quantum.canon.restricttosubregister
  - uid: microsoft.quantum.canon.restricttosubregistera
  - uid: microsoft.quantum.canon.restricttosubregisterc
  - uid: microsoft.quantum.canon.restricttosubregisterca
  - uid: microsoft.quantum.canon.ignore
    summary: >2
       Ignores the output of an operation or function.
  - uid: microsoft.quantum.canon.logof2
    summary: >2-
       Returns the constant $\ln(2)$, where $\ln$
       is the natural (base-$e$) logarithm.
  - uid: microsoft.quantum.canon.operationpow
    summary: >2
       Given an operation representing a gate $U$, returns a new operation
       $U^m$ for a power $m$.
  - uid: microsoft.quantum.canon.operationpowc
  - uid: microsoft.quantum.canon.operationpowa
  - uid: microsoft.quantum.canon.operationpowca
  - uid: microsoft.quantum.canon.paulifrombitstring
    summary: >2
       Given a bit string, returns a multi-qubit Pauli operator
       represented as an array of single-qubit Pauli operators.
  - uid: microsoft.quantum.canon.embedpauli
    summary: >2
       Given a single-qubit Pauli operator and the index of a qubit,
       returns a multi-qubit Pauli operator with the given single-qubit
       operator at that index and `PauliI` at every other index.
  - uid: microsoft.quantum.canon.weightonepaulis
    summary: >2
       Returns an array of all weight-1 Pauli operators
       on a given number of qubits.
operations:
  items:
  - uid: microsoft.quantum.canon.trotter1implca
    summary: >2
       Implementation of the first-order Trotter–Suzuki integrator.
  - uid: microsoft.quantum.canon.trotter2implca
    summary: >2
       Implementation of the second-order Trotter–Suzuki integrator.
  - uid: microsoft.quantum.canon.applytoeachindex
    summary: >2
       Applies a single-qubit operation to each indexed element in a register.
  - uid: microsoft.quantum.canon.applytoeachindexc
  - uid: microsoft.quantum.canon.applytoeachindexa
  - uid: microsoft.quantum.canon.applytoeachindexca
  - uid: microsoft.quantum.canon.measureallz
    summary: >2
       Measures $Z \otimes Z \otimes \cdots \otimes Z$ on
       a given register.
  - uid: microsoft.quantum.canon.measureidentity
    summary: >2
       Measures the identity operator $\boldone$ on a register
       of qubits.
  - uid: microsoft.quantum.canon.preparesinglequbitidentity
    summary: >2
       Given a qubit, prepares that qubit in the maximally mixed
       state $\boldone / 2$ by applying the depolarizing channel
       $$
       \begin{align}
           \Omega(\rho) \mathrel{:=} \frac{1}{4} \sum_{\mu \in \{0, 1, 2, 3\}} \sigma\_{\mu} \rho \sigma\_{\mu}^{\dagger},
       \end{align}
       $$
       where $\sigma\_i$ is the $i$th Pauli operator, and where
       $\rho$ is a density operator representing a mixed state.
  - uid: microsoft.quantum.canon.prepareidentity
    summary: >2
       Given a register, prepares that register in the maximally mixed
       state $\boldone / 2^N$ by applying the complete depolarizing
       channel to each qubit, where $N$ is the length of the register.
  - uid: microsoft.quantum.canon.estimatefrequency
    summary: >2
       Given a preparation and measurement, estimates the frequency
       with which that measurement suceeds (returns `Zero`) by
       performing a given number of trials.
  - uid: microsoft.quantum.canon.prepareentangledstate
    summary: >2-
       Given two registers, prepares the maximally entangled state
       $\bra{\beta_{00}}\ket{\beta_{00}}$ between each pair of qubits on the respective registers,
       assuming that each register starts in the $\ket{0\cdots 0}$ state.
  - uid: microsoft.quantum.canon.preparechoistate
    summary: >2
       Prepares the Choi–Jamiłkowski state for a given operation onto given reference
       and target registers.
  - uid: microsoft.quantum.canon.preparechoistatec
  - uid: microsoft.quantum.canon.preparechoistatea
  - uid: microsoft.quantum.canon.preparechoistateca
  - uid: microsoft.quantum.canon.uncurryopimpl
  - uid: microsoft.quantum.canon.uncurryopcimpl
  - uid: microsoft.quantum.canon.uncurryopaimpl
  - uid: microsoft.quantum.canon.uncurryopcaimpl
  - uid: microsoft.quantum.canon.applytofirstqubit
    summary: ' Applies operation op to the first qubit in the register'
  - uid: microsoft.quantum.canon.applytofirstqubita
  - uid: microsoft.quantum.canon.applytofirstqubitc
  - uid: microsoft.quantum.canon.applytofirstqubitca
  - uid: microsoft.quantum.canon.applytofirsttwoqubits
    summary: >2
       Applies operation `op` to the first two qubits in the register.
  - uid: microsoft.quantum.canon.applytofirsttwoqubitsa
  - uid: microsoft.quantum.canon.applytofirsttwoqubitsc
  - uid: microsoft.quantum.canon.applytofirsttwoqubitsca
  - uid: microsoft.quantum.canon.applytofirstthreequbits
    summary: ' Applies operation `op` to the first three qubits in the register.'
  - uid: microsoft.quantum.canon.applytofirstthreequbitsa
  - uid: microsoft.quantum.canon.applytofirstthreequbitsc
  - uid: microsoft.quantum.canon.applytofirstthreequbitsca
  - uid: microsoft.quantum.canon.applymulticontrolledc
    summary: >2
       Applies a multiply controlled version of singly controlled
       operation.
  - uid: microsoft.quantum.canon.applymulticontrolledca
  - uid: microsoft.quantum.canon.andladder
    summary: >2-
       Applies a unitary given by the following map on computational basis vectors:
       |x₁,…,xₙ⟩|y₁,…,yₙ₋₁⟩ ↦ |x₁,…,xₙ⟩|y₁⊕(x₁∧x₂),…,yₙ₋₁⊕(x₁∧x₂∧…∧xₙ)⟩
  - uid: microsoft.quantum.canon.applytopartition
    summary: " Applies an operation to a given partition of the register into two parts\n "
  - uid: microsoft.quantum.canon.applytopartitiona
  - uid: microsoft.quantum.canon.applytopartitionc
  - uid: microsoft.quantum.canon.applytopartitionca
  - uid: microsoft.quantum.canon.adiabaticstateenergyunitary
    summary: >2
       Performs state preparation, and adiabatic state preparation, and phase
       estimation.
  - uid: microsoft.quantum.canon.adiabaticstateenergyestimate
    summary: " Allocates qubits, performs state preparation, adiabatic state \n preparation, and phase estimation. \n"
  - uid: microsoft.quantum.canon.estimateenergy
    summary: " Allocates qubits, performs state preparation, and phase estimation. \n"
  - uid: microsoft.quantum.canon.randomwalkphaseestimation
    summary: >2
       Performs iterative phase estimation using a random walk to approximate
       Bayesian inference on the classical measurement results from a given
       oracle and eigenstate.
  - uid: microsoft.quantum.canon.randomintpow2
    summary: >2
       Generates a random number uniformly sampled in the interval
       $[0, 2^{\texttt{maxBits}} - 1]$.
  - uid: microsoft.quantum.canon.randomint
    summary: >2
       Generates a random number uniformly sampled in the interval
       $[0, \texttt{maxInt})$.
  - uid: microsoft.quantum.canon.randomreal
    summary: >2
       Returns a random real number in the interval $[0, 1]$.
  - uid: microsoft.quantum.canon.robustphaseestimation
    summary: >2
       Performs the robust non-terative quantum phase estimation algorithm for a given oracle $U$ and eigenstate,
       and provides a single real-valued estimate of the phase with variance scaling at the Heisenberg limit.
  - uid: microsoft.quantum.canon.robustphaseestimationtestop
  - uid: microsoft.quantum.canon.bindimpl
  - uid: microsoft.quantum.canon.bindaimpl
  - uid: microsoft.quantum.canon.bindcimpl
  - uid: microsoft.quantum.canon.bindcaimpl
  - uid: microsoft.quantum.canon.controlledonbitstringimpl
    summary: >2
       Applies a unitary operator on the target register if the control register state corresponds to a specified bit mask.
  - uid: microsoft.quantum.canon.controlledonintimpl
    summary: >2
       Applies a unitary operator on the target register if the control register state corresponds to a specified positive integer.
  - uid: microsoft.quantum.canon.applytosubregister
  - uid: microsoft.quantum.canon.applytosubregistera
  - uid: microsoft.quantum.canon.applytosubregisterc
  - uid: microsoft.quantum.canon.applytosubregisterca
  - uid: microsoft.quantum.canon.fliptobasis
    summary: " Applies unitaries that map $\\ket{0}\\otimes\\cdots\\ket{0}$\n to $\\ket{\\psi_0} \\otimes \\ket{\\psi_{n - 1}}$,\n where $\\ket{\\psi_k}$ depends on `basis[k]`.\n\n The correspondence between \n value of `basis[k]` and $\\ket{\\psi_k}$ is the following:\n\n | `basis[k]` | $\\ket{\\psi_k}$ |\n |===|===|\n | 0 | $\\ket{0}$ |\n | 1 | $\\ket{1}$ |\n | 2 | $\\ket{+}$ |\n | 3 | $\\ket{i}$ ( +1 eigenstate of Pauli Y ) |\n"
  - uid: microsoft.quantum.canon.assertequalonbasisvector
    summary: " Checks if the result of applying two operations givenU and expectedU to\n a basis state is the same. The basis state is described by `basis` parameter. \n See @\"Microsoft.Quantum.Canon.FlipToBasis\" function for more details on this\n description.\n"
  - uid: microsoft.quantum.canon.assertallzero
  - uid: microsoft.quantum.canon.assertoperationsequalinplace
    summary: >2
       Checks if the operation givenU is equal to the operation expectedU on
       the given input size.
  - uid: microsoft.quantum.canon.assertoperationsequalinplacecompbasis
    summary: >2
       Checks if the operation givenU is equal to the operation expectedU on
       the given input size  by checking the action of the operations only on
       the vectors from the computational basis.
       This is a necessary, but not sufficient, condition for the equality of
       two unitaries.
  - uid: microsoft.quantum.canon.applytoeachca
  - uid: microsoft.quantum.canon.applytoeacha
  - uid: microsoft.quantum.canon.applytoeachc
  - uid: microsoft.quantum.canon.applytoeach
    summary: >2
       Applies a single-qubit operation to each element in a register.
  - uid: microsoft.quantum.canon.assertqubit
    summary: >2
       Asserts that the qubit q is in the expected eigenstate of the Pauli Z operator.
  - uid: microsoft.quantum.canon.assertqubittol
    summary: >2
       Asserts that the qubit q is in the expected eigenstate of the Pauli Z operator up to
       a given tolerance.
  - uid: microsoft.quantum.canon.assertqubitstate
    summary: >2
       Asserts that the qubit given by register is in the state described by
       complex vector, $\ket{\psi} = \begin{bmatrix}a & b\end{\bmatrix}^{\mathrm{T}}$.
       The first element of the tuples representing each of $a$, $b$
       is the real part of the complex number, while the second one is the imaginary part.
       The last argument defines the tolerance with which assertion is made.
  - uid: microsoft.quantum.canon.assertoperationsequalreferenced
    summary: " Given two operations, asserts that they act identically for all input states.\n This assertion is implemented by using the Choi–Jamiłkowski isomorphism to reduce\n the assertion to one of a qubit state assertion on two entangled registers.\n Thus, this operation needs only a single call to each operation being tested,\n but requires twice as many qubits to be allocated.\n This assertion can be used to ensure, for instance, that an optimized version of an\n operation acts identically to its naïve implementation, or that an operation\n which acts on a range of non-quantum inputs agrees with known cases.\n "
  - uid: microsoft.quantum.canon.i
    summary: ' Performs the identity operation (no-op) on a single qubit.'
  - uid: microsoft.quantum.canon.noop
    summary: ' Performs the identity operation (no-op) on a register of qubits.'
  - uid: microsoft.quantum.canon.noop2
    summary: ' Performs the identity operation (no-op) on two registers of qubits.'
  - uid: microsoft.quantum.canon.iteratethroughcartesianproduct
    summary: >2-
       Iterates a variable, say `arr`, through a Cartesian product
       [ 0, bounds[0]-1 ] × [ 0, bounds[1]-1 ] × [ 0, bounds[Length(bounds)-1]-1 ]
       and calls op(arr) for every element of the Cartesian product
  - uid: microsoft.quantum.canon.iteratethroughcartesianpower
    summary: " Iterates a variable, say arr, through Cartesian product \n [ 0, bound - 1 ] × [ 0, bound - 1 ] × [ 0, bound - 1 ]\n and calls op(arr) for every element of the Cartesian product"
  - uid: microsoft.quantum.canon.operationpowimpl
  - uid: microsoft.quantum.canon.operationpowimplc
  - uid: microsoft.quantum.canon.operationpowimpla
  - uid: microsoft.quantum.canon.operationpowimplca
  - uid: microsoft.quantum.canon.measurewithscratch
    summary: >2
       Measures the given Pauli operator using an explicit scratch
       qubit to perform the measurement.
  - uid: microsoft.quantum.canon.randomsinglequbitpauli
    summary: >2-
       Returns one of the single-qubit Pauli operators uniformly
       at random.
  - uid: microsoft.quantum.canon.applypauli
    summary: >2
       Given a multi-qubit Pauli operator, applies the corresponding operation to
       a register.
  - uid: microsoft.quantum.canon.applypaulifrombitstring
    summary: >2
       Applies a Pauli operator on the $n^{\text{th}}$ qubit if the $n^{\text{th}}$
       bit of a Boolean array matches a given input.
  - uid: microsoft.quantum.canon.measurepaulis
    summary: >2
       Given an array of multi-qubit Pauli operators, measures each using a specified measurement
       gadget, then returns the array of results.
  - uid: microsoft.quantum.canon.basischangeztoy
  - uid: microsoft.quantum.canon.multim
  - uid: microsoft.quantum.canon.mresetz
    summary: >2
       Measures a single qubit in the $Z$ basis and ensures that it
       is in the $\ket{0}$ state following the measurement.
  - uid: microsoft.quantum.canon.mresetx
    summary: >2
       Measures a single qubit in the $X$ basis and ensures that it
       is in the $\ket{0}$ state following the measurement.
  - uid: microsoft.quantum.canon.mresety
    summary: >2
       Measures a single qubit in the $Y$ basis and ensures that it
       is in the $\ket{0}$ state following the measurement.
  - uid: microsoft.quantum.canon.reset
    summary: >2
       Given a single qubit, measures it and ensures it is in the $\ket{0}$ state
       such that it can be safely released.
  - uid: microsoft.quantum.canon.resetall
    summary: >2
       Given an array of qubits, measure them and ensure they are in the $\ket{0}$ state
       such that they can be safely released.
  - uid: microsoft.quantum.canon.hy
  - uid: microsoft.quantum.canon.quantumphaseestimation
    summary: >2
       Performs the quantum phase estimation algorithm for a given oracle U and eigenstate,
       reading the phase into a big-endian quantum register.
  - uid: microsoft.quantum.canon.with
    summary: >2
       Given operations implementing operators $U$ and $V$, performs the
       operation $UVU^{\dagger}$ on a target. That is, this operation
       conjugates $V$ with $U$.
  - uid: microsoft.quantum.canon.witha
  - uid: microsoft.quantum.canon.withc
  - uid: microsoft.quantum.canon.withca
  - uid: microsoft.quantum.canon._extractlogicalqubitfromsteanecode
    summary: >2
       Syndrome measurement and the inverse of embedding.
       $X$- and $Z$-stabilizers are not treated equally,
       which is due to the particular choice of the encoding circuit.
       This asymmetry leads to a different syndrome extraction routine.
       One could measure the syndrome by measuring multi-qubit Pauli operator
       directly on the code state, but for the distillation purpose
       the logical qubit is returned into a single qubit,
       in course of which the syndrome measurements can be done without further ancillas.
  - uid: microsoft.quantum.canon.injectpi4yrotation
    summary: >2
       Performs a $\pi / 4$ rotation about $Y$ by consuming a magic
       state; that is, a copy of the state
       $$
       \begin{align}
           \cos\frac{\pi}{8} \ket{0} + \sin \frac{\pi}{8} \ket{1}.
       \end{align}
       $$.
  - uid: microsoft.quantum.canon.knilldistill
    summary: >2
       Given 15 approximate copies of a magic state
       $$
       \begin{align}
           \cos\frac{\pi}{8} \ket{0} + \sin \frac{\pi}{8} \ket{1}.
       \end{align},
       $$ yields one higher-quality copy.
newtypes:
  items:
  - uid: microsoft.quantum.canon.ccnotop
    summary: ' The signature type of CCNOT gate.'
  - uid: microsoft.quantum.canon.simulationalgorithm
    summary: >2-
       A time-independent simulation technique converts an
       to unitary time evolution for some time-interval.
  - uid: microsoft.quantum.canon.timedependentsimulationalgorithm
    summary: >2-
       A time-dependent simulation technique converts an
       @"microsoft.quantum.canon.evolutionschedule"
       to unitary time-evolution for some time-interval.
  - uid: microsoft.quantum.canon.reflectionoracle
    summary: >2-
       Represents a reflection oracle.
       - The operation implementing the given reflection.
       - The phase ϕ by which to rotate the reflected subspace.
       - The qubit register on which to perform the given reflection〉.
  - uid: microsoft.quantum.canon.obliviousoracle
    summary: >2
       Represents an oracle for oblivious amplitude amplification.
  - uid: microsoft.quantum.canon.stateoracle
    summary: ' Represents an oracle for state preparation.'
  - uid: microsoft.quantum.canon.deterministicstateoracle
    summary: >2
       Represents an oracle for deterministic state preparation.
  - uid: microsoft.quantum.canon.ampampreflectionphases
    summary: >2
       Phases for a sequence of partial reflections in amplitude amplification.
  - uid: microsoft.quantum.canon.ampamprotationphases
    summary: >2
       Phases for a sequence of single-qubit rotations in amplitude amplification.
  - uid: microsoft.quantum.canon.complex
    summary: ' Represents a complex number by its real and imaginary components.'
  - uid: microsoft.quantum.canon.logicalregister
  - uid: microsoft.quantum.canon.syndrome
  - uid: microsoft.quantum.canon.recoveryfn
  - uid: microsoft.quantum.canon.encodeop
    summary: >2-
       Represents an operation which encodes a physical register into a
       logical register, using the provided scratch qubits.

       The first argument is taken to be the physical register that will
       be encoded, while the second argument is taken to be the scratch
       register that will be used.
  - uid: microsoft.quantum.canon.decodeop
    summary: >2-
       Represents an operation which decodes an encoded register into a
       physical register and the scratch qubits used to record a syndrome.

       The argument to a DecodeOp is the same as the return from an
       EncodeOp, and vice versa.
  - uid: microsoft.quantum.canon.syndromemeasop
    summary: >2
       Represents an operation that is used to measure the syndrome
       of an error-correcting code block.
  - uid: microsoft.quantum.canon.qecc
    summary: >2-
       Represents an error-correcting code as defined by its encoder,
       decoder, and syndrome measurement procedure.
  - uid: microsoft.quantum.canon.css
    summary: >2-
       Represents a Calderbank–Shor–Steane (CSS) code as defined by
       its encoder, decoder, and its syndrome measurement procedures
       for $X$ and $Z$ errors, respectively.
