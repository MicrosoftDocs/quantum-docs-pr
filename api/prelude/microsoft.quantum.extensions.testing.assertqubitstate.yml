### YamlMime:QSharpType
uid: microsoft.quantum.extensions.testing.assertqubitstate
name: AssertQubitState
type: operation
namespace: Microsoft.Quantum.Extensions.Testing
summary: >2
   Asserts that the qubit given by register is in the state described by
   complex vector, $\ket{\psi} = \begin{bmatrix}a & b\end{bmatrix}^{\mathrm{T}}$.
   The first element of the tuples representing each of $a$, $b$
   is the real part of the complex number, while the second one is the imaginary part.
   The last argument defines the tolerance with which assertion is made.
remarks: " The following Mathematica code can be used to verify expressions for mi, mx, my, mz:\n ```mathematica\n {Id, X, Y, Z} = Table[PauliMatrix[k], {k, 0, 3}];\n st = {{ reA + I imA }, { reB + I imB} };\n M = st . ConjugateTranspose[st];\n mx = Tr[M.X] // ComplexExpand; \n my = Tr[M.Y] // ComplexExpand;\n mz = Tr[M.Z] // ComplexExpand; \n mi = Tr[M.Id] // ComplexExpand;\n 2 m == Id mi + X mx + Z mz + Y my // ComplexExpand // Simplify\n ```\n\n The tolerance is\n the $L\\_{\\infty}$ distance between 3 dimensional real vector (x₂,x₃,x₄) defined by\n $\\langle\\psi|\\psi\\rangle = x\\_1 I + x\\_2 X + x\\_3 Y + x\\_4 Z$ and real vector (y₂,y₃,y₄) defined by\n ρ = y₁I + y₂X + y₃Y + y₄Z where ρ is the density matrix corresponding to the state of the register.\n This is only true under the assumption that Tr(ρ) and Tr(|ψ⟩⟨ψ|) are both 1 (e.g. x₁ = 1/2, y₁ = 1/2).\n If this is not the case, the function asserts that l∞ distance between\n (x₂-x₁,x₃-x₁,x₄-x₁,x₄+x₁) and (y₂-y₁,y₃-y₁,y₄-y₁,y₄+y₁) is less than the tolerance parameter.\n\n### Examples\n ```Q#\n using (qubits = Qubit[2]) {\n     // Both qubits are initialized as |0〉: a=(1 + 0*i), b=(0 + 0*i)\n     AssertQubitState((Complex(1., 0.), Complex(0., 0.)), qubits[0], 1e-5);\n     Y(qubits[1]);\n     // Y |0〉 = i |1〉: a=(0 + 0*i), b=(0 + 1*i)\n     AssertQubitState((Complex(0., 0.), Complex(0., 1.)), qubits[1], 1e-5);\n }\n ```\n"
syntax: 'operation AssertQubitState (expected : (Complex, Complex), register : Qubit, tolerance : Double) : ()'
input:
  content: '(expected : (Complex, Complex), register : Qubit, tolerance : Double)'
  types:
  - name: expected
    summary: ' Expected complex amplitudes for $\ket{0}$ and $\ket{1}$, respectively.'
    types:
    - uid: microsoft.quantum.canon.complex
    - uid: microsoft.quantum.canon.complex
  - name: register
    summary: >2
       Qubit whose state is to be asserted. Note that this qubit is assumed to be separable
       from other allocated qubits, and not entangled.
    uid: Qubit
    isPrimitive: true
  - name: tolerance
    summary: >2
       Additive tolerance by which actual amplitudes are allowed to deviate from expected.
       See remarks below for details.
    uid: Double
    isPrimitive: true
output:
  content: ()
  types:
  - uid: ()
    isPrimitive: true
