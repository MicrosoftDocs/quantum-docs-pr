### YamlMime:QSharpNamespace
uid: microsoft.quantum.arithmetic
name: Microsoft.Quantum.Arithmetic
summary: |2-
   # Summary
   This namespace contains functions and operations used for coherently
   computing arithmetic.
functions:
- uid: microsoft.quantum.arithmetic.bigendianaslittleendian
  summary: |-
    Converts a `BigEndian` qubit register to a `LittleEndian` qubit
    register by reversing the qubit ordering.
- uid: microsoft.quantum.arithmetic.identicalformatfactfxp
  summary: |-
    Assert that all fixed-point numbers in the provided array
    have identical point positions and qubit numbers.
- uid: microsoft.quantum.arithmetic.identicalpointposfactfxp
  summary: |-
    Assert that all fixed-point numbers in the provided array
    have identical point positions when counting from the least-
    significant bit. I.e., number of bits minus point position must
    be constant for all fixed-point numbers in the array.
- uid: microsoft.quantum.arithmetic.littleendianasbigendian
  summary: |-
    Converts a `LittleEndian` qubit register to a `BigEndian` qubit
    register by reversing the qubit ordering.
- uid: microsoft.quantum.arithmetic.reversedopbe
  summary: |-
    Given an operation that takes a big-endian input, returns a new
    operation that takes a little-endian input.
- uid: microsoft.quantum.arithmetic.reversedopbea
  summary: |-
    Given an operation that takes a big-endian input, returns a new
    operation that takes a little-endian input.
- uid: microsoft.quantum.arithmetic.reversedopbec
  summary: |-
    Given an operation that takes a big-endian input, returns a new
    operation that takes a little-endian input.
- uid: microsoft.quantum.arithmetic.reversedopbeca
  summary: |-
    Given an operation that takes a big-endian input, returns a new
    operation that takes a little-endian input.
- uid: microsoft.quantum.arithmetic.reversedople
  summary: |-
    Given an operation that takes a little-endian input, returns a new
    operation that takes a big-endian input.
- uid: microsoft.quantum.arithmetic.reversedoplea
  summary: |-
    Given an operation that takes a little-endian input, returns a new
    operation that takes a big-endian input.
- uid: microsoft.quantum.arithmetic.reversedoplec
  summary: |-
    Given an operation that takes a little-endian input, returns a new
    operation that takes a big-endian input.
- uid: microsoft.quantum.arithmetic.reversedopleca
  summary: |-
    Given an operation that takes a little-endian input, returns a new
    operation that takes a big-endian input.
operations:
- uid: microsoft.quantum.arithmetic.addconstantfxp
  summary: Adds a classical constant to a quantum fixed-point number.
- uid: microsoft.quantum.arithmetic.addfxp
  summary: Adds two fixed-point numbers stored in quantum registers.
- uid: microsoft.quantum.arithmetic.addi
  summary: |-
    Automatically chooses between addition with
    carry and without, depending on the register size of `ys`.
- uid: microsoft.quantum.arithmetic.applyleoperationonphasele
  summary: |-
    Applies an operation that takes a
    <xref:microsoft.quantum.arithmetic.phaselittleendian> register as input
    on a target register of type <xref:microsoft.quantum.arithmetic.littleendian>.
- uid: microsoft.quantum.arithmetic.applyleoperationonphaselea
  summary: |-
    Applies an operation that takes a
    <xref:microsoft.quantum.arithmetic.phaselittleendian> register as input
    on a target register of type <xref:microsoft.quantum.arithmetic.littleendian>.
- uid: microsoft.quantum.arithmetic.applyleoperationonphaselec
  summary: |-
    Applies an operation that takes a
    <xref:microsoft.quantum.arithmetic.phaselittleendian> register as input
    on a target register of type <xref:microsoft.quantum.arithmetic.littleendian>.
- uid: microsoft.quantum.arithmetic.applyleoperationonphaseleca
  summary: |-
    Applies an operation that takes a
    <xref:microsoft.quantum.arithmetic.phaselittleendian> register as input
    on a target register of type <xref:microsoft.quantum.arithmetic.littleendian>.
- uid: microsoft.quantum.arithmetic.applymajorityinplace
  summary: |-
    Applies the three-qubit majority operation in-place on a register of
    qubits.
- uid: microsoft.quantum.arithmetic.applyphaseleoperationonle
  summary: |-
    Applies an operation that takes a
    <xref:microsoft.quantum.arithmetic.littleendian> register as input
    on a target register of type <xref:microsoft.quantum.arithmetic.phaselittleendian>.
- uid: microsoft.quantum.arithmetic.applyphaseleoperationonlea
  summary: ''
- uid: microsoft.quantum.arithmetic.applyphaseleoperationonlec
  summary: ''
- uid: microsoft.quantum.arithmetic.applyphaseleoperationonleca
  summary: ''
- uid: microsoft.quantum.arithmetic.applyreversedopbe
  summary: |-
    Applies an operation that takes big-endian input to a register encoding
    an unsigned integer using little-endian format.
- uid: microsoft.quantum.arithmetic.applyreversedopbea
  summary: |-
    Applies an operation that takes big-endian input to a register encoding
    an unsigned integer using little-endian format.
- uid: microsoft.quantum.arithmetic.applyreversedopbec
  summary: |-
    Applies an operation that takes big-endian input to a register encoding
    an unsigned integer using little-endian format.
- uid: microsoft.quantum.arithmetic.applyreversedopbeca
  summary: |-
    Applies an operation that takes big-endian input to a register encoding
    an unsigned integer using little-endian format.
- uid: microsoft.quantum.arithmetic.applyreversedople
  summary: |-
    Applies an operation that takes little-endian input to a register encoding
    an unsigned integer using big-endian format.
- uid: microsoft.quantum.arithmetic.applyreversedoplea
  summary: |-
    Applies an operation that takes little-endian input to a register encoding
    an unsigned integer using big-endian format.
- uid: microsoft.quantum.arithmetic.applyreversedoplec
  summary: |-
    Applies an operation that takes little-endian input to a register encoding
    an unsigned integer using big-endian format.
- uid: microsoft.quantum.arithmetic.applyreversedopleca
  summary: |-
    Applies an operation that takes little-endian input to a register encoding
    an unsigned integer using big-endian format.
- uid: microsoft.quantum.arithmetic.applyxorinplace
  summary: |-
    Applies a bitwise-XOR operation between a classical integer and an
    integer represented by a register of qubits.
- uid: microsoft.quantum.arithmetic.assertallzerofxp
  summary: |-
    Helper function to assert that a quantum fixed-point number is
    initialized to zero, i.e., all qubits are in state $\ket{0}$.
- uid: microsoft.quantum.arithmetic.assertmostsignificantbit
  summary: |-
    Asserts that the most significant qubit of a qubit register
    representing an unsigned integer is in a particular state.
- uid: microsoft.quantum.arithmetic.assertphaselessthan
  summary: Asserts that the `number` encoded in PhaseLittleEndian is less than `value`.
- uid: microsoft.quantum.arithmetic.assertprobint
  summary: |-
    Asserts that the probability of a specific state of a quantum register has the
    expected value.
- uid: microsoft.quantum.arithmetic.carry
  summary: |-
    Implements a reversible carry gate. Given a carry-in bit encoded in
    qubit `carryIn` and two summand bits encoded in `summand1` and `summand2`,
    computes the bitwise xor of `carryIn`, `summand1` and `summand2` in the
    qubit `summand2` and the carry-out is xored to the qubit `carryOut`.
- uid: microsoft.quantum.arithmetic.cascadeccnot
  summary: |-
    Implements a cascade of CCNOT gates controlled on corresponding bits of two
    qubit registers, acting on the next qubit of one of the registers.
    Starting from the qubits at position 0 in both registers as controls, CCNOT is
    applied to the qubit at position 1 of the target register, then controlled by
    the qubits at position 1 acting on the qubit at position 2 in the target register,
    etc., ending with an action on the target qubit in position `Length(nQubits)-1`.
- uid: microsoft.quantum.arithmetic.comparegreaterthanfxp
  summary: |-
    Compares two fixed-point numbers stored in quantum registers, and
    controls a flip on the result.
- uid: microsoft.quantum.arithmetic.comparegti
  summary: 'Wrapper for integer comparison: `result = x > y`.'
- uid: microsoft.quantum.arithmetic.comparegtsi
  summary: 'Wrapper for signed integer comparison: `result = xs > ys`.'
- uid: microsoft.quantum.arithmetic.compareusingripplecarry
  summary: |-
    This operation tests if an integer represented by a register of qubits
    is greater than another integer, applying an XOR of the result onto an
    output qubit.
- uid: microsoft.quantum.arithmetic.computereciprocalfxp
  summary: Computes $1/x$ for a fixed-point number $x$.
- uid: microsoft.quantum.arithmetic.computereciprocali
  summary: |-
    Computes the reciprocal 1/x for an unsigned integer x
    using integer division. The result, interpreted as an integer,
    will be `floor(2^(2*n-1) / x)`.
- uid: microsoft.quantum.arithmetic.copymostsignificantbit
  summary: |-
    Copies the most significant bit of a qubit register
    `from` representing an unsigned integer into the qubit `target`.
- uid: microsoft.quantum.arithmetic.dividei
  summary: Divides two quantum integers.
- uid: microsoft.quantum.arithmetic.evaluateevenpolynomialfxp
  summary: Evaluates an even polynomial in a fixed-point representation.
- uid: microsoft.quantum.arithmetic.evaluateoddpolynomialfxp
  summary: Evaluates an odd polynomial in a fixed-point representation.
- uid: microsoft.quantum.arithmetic.evaluatepolynomialfxp
  summary: Evaluates a polynomial in a fixed-point representation.
- uid: microsoft.quantum.arithmetic.greaterthan
  summary: |-
    Applies a greater-than comparison between two integers encoded into
    qubit registers, flipping a target qubit based on the result of the
    comparison.
- uid: microsoft.quantum.arithmetic.incrementbyinteger
  summary: |-
    Increments an unsigned quantum register by a classical integer,
    using phase rotations.
- uid: microsoft.quantum.arithmetic.incrementbymodularinteger
  summary: Performs a modular increment of a qubit register by an integer constant.
- uid: microsoft.quantum.arithmetic.incrementphasebyinteger
  summary: |-
    Increments an unsigned quantum register by a classical integer,
    using phase rotations.
- uid: microsoft.quantum.arithmetic.incrementphasebymodularinteger
  summary: Performs a modular increment of a qubit register by an integer constant.
- uid: microsoft.quantum.arithmetic.invert2ssi
  summary: Inverts a given integer modulo 2's complement.
- uid: microsoft.quantum.arithmetic.maj
  summary: This applies the in-place majority operation to 3 qubits.
- uid: microsoft.quantum.arithmetic.measurefxp
  summary: |-
    Measure a fixed-point number, returns its value as Double, and resets
    all the register to zero.
- uid: microsoft.quantum.arithmetic.measureinteger
  summary: |-
    Measures the content of a quantum register and converts
    it to an integer. The measurement is performed with respect
    to the standard computational basis, i.e., the eigenbasis of `PauliZ`.
- uid: microsoft.quantum.arithmetic.multiplyandaddbymodularinteger
  summary: Performs a modular multiply-and-add by integer constants on a qubit register.
- uid: microsoft.quantum.arithmetic.multiplyandaddphasebymodularinteger
  summary: |-
    The same as MultiplyAndAddByModularInteger, but assumes that the summand encodes
    integers in QFT basis.
- uid: microsoft.quantum.arithmetic.multiplybymodularinteger
  summary: Performs modular multiplication by an integer constant on a qubit register.
- uid: microsoft.quantum.arithmetic.multiplyfxp
  summary: Multiplies two fixed-point numbers in quantum registers.
- uid: microsoft.quantum.arithmetic.multiplyi
  summary: |-
    Multiply integer `xs` by integer `ys` and store the result in `result`,
    which must be zero initially.
- uid: microsoft.quantum.arithmetic.multiplysi
  summary: |-
    Multiply signed integer `xs` by signed integer `ys` and store
    the result in `result`, which must be zero initially.
- uid: microsoft.quantum.arithmetic.preparefxp
  summary: Initialize a quantum fixed-point number to a classical constant.
- uid: microsoft.quantum.arithmetic.reflectaboutinteger
  summary: Reflects a quantum register about a given classical integer.
- uid: microsoft.quantum.arithmetic.ripplecarryaddercdkm
  summary: Reversible, in-place ripple-carry addition of two integers.
- uid: microsoft.quantum.arithmetic.ripplecarryadderd
  summary: |-
    Reversible, in-place ripple-carry addition of two integers.
    Given two $n$-bit integers encoded in LittleEndian registers `xs` and `ys`,
    and a qubit carry, the operation computes the sum of the two integers
    where the $n$ least significant bits of the result are held in `ys` and
    the carry out bit is xored to the qubit `carry`.
- uid: microsoft.quantum.arithmetic.ripplecarryaddernocarryttk
  summary: Reversible, in-place ripple-carry addition of two integers without carry out.
- uid: microsoft.quantum.arithmetic.ripplecarryadderttk
  summary: |-
    Reversible, in-place ripple-carry addition of two integers.
    Given two $n$-bit integers encoded in LittleEndian registers `xs` and `ys`,
    and a qubit carry, the operation computes the sum of the two integers
    where the $n$ least significant bits of the result are held in `ys` and
    the carry out bit is xored to the qubit `carry`.
- uid: microsoft.quantum.arithmetic.squarefxp
  summary: Squares a fixed-point number.
- uid: microsoft.quantum.arithmetic.squarei
  summary: |-
    Computes the square of the integer `xs` into `result`,
    which must be zero initially.
- uid: microsoft.quantum.arithmetic.squaresi
  summary: |-
    Square signed integer `xs` and store
    the result in `result`, which must be zero initially.
- uid: microsoft.quantum.arithmetic.sum
  summary: |-
    Implements a reversible sum gate. Given a carry-in bit encoded in
    qubit `carryIn` and two summand bits encoded in `summand1` and `summand2`,
    computes the bitwise xor of `carryIn`, `summand1` and `summand2` in the qubit
    `summand2`.
newtypes:
- uid: microsoft.quantum.arithmetic.bigendian
  summary: |-
    Register that encodes an unsigned integer in big-endian order. The
    qubit with index `0` encodes the highest bit of an unsigned integer.
- uid: microsoft.quantum.arithmetic.fixedpoint
  summary: |-
    Represents a register of qubits encoding a fixed-point number. Consists of an integer that is equal to the number of
    qubits to the left of the binary point, i.e., qubits of weight greater
    than or equal to 1, and a quantum register.
- uid: microsoft.quantum.arithmetic.littleendian
  summary: |-
    Register that encodes an unsigned integer in little-endian order. The
    qubit with index `0` encodes the lowest bit of an unsigned integer.
- uid: microsoft.quantum.arithmetic.phaselittleendian
  summary: |-
    Little-endian unsigned integers in QFT basis.

    For example, if $\ket{x}$ is the little-endian encoding of the integer
    $x$ in the computational basis,
    then $\operatorname{QFTLE} \ket{x}$ is the encoding of $x$ in the QFT
    basis.
- uid: microsoft.quantum.arithmetic.signedlittleendian
  summary: Type of a signed integer stored in little endian (see LittleEndian).
...
