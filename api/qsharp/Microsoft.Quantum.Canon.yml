### YamlMime:QSharpNamespace
uid: microsoft.quantum.canon
name: Microsoft.Quantum.Canon
functions:
- uid: microsoft.quantum.canon.asqubitarray
  summary: |-
    > [!WARNING]
    > Deprecated
    This function has been removed.
- uid: microsoft.quantum.canon.assertalmostequal
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Diagnostics.NearEqualityFact" instead.
- uid: microsoft.quantum.canon.assertalmostequaltol
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Diagnostics.EqualityWithinToleranceFact" instead.
- uid: microsoft.quantum.canon.assertboolarrayequal
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Diagnostics.AllEqualityFactB" instead.
- uid: microsoft.quantum.canon.assertboolequal
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Diagnostics.EqualityFactB" instead.
- uid: microsoft.quantum.canon.assertintequal
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Diagnostics.EqualityFactI" instead.
- uid: microsoft.quantum.canon.assertresultequal
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Diagnostics.EqualityFactR" instead.
- uid: microsoft.quantum.canon.bigendiantolittleendian
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian".
- uid: microsoft.quantum.canon.bind
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.canon.bound".
- uid: microsoft.quantum.canon.binda
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.canon.bounda".
- uid: microsoft.quantum.canon.bindc
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.canon.boundc".
- uid: microsoft.quantum.canon.bindca
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.canon.boundca".
- uid: microsoft.quantum.canon.bitsize
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.math.bitsizei".
- uid: microsoft.quantum.canon.boolarrfrompositiveint
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.convert.intasboolarray".
- uid: microsoft.quantum.canon.boolarrfromresultarr
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.convert.resultarrayasboolarray".
- uid: microsoft.quantum.canon.boolfromresult
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.convert.resultasbool".
- uid: microsoft.quantum.canon.bound
  summary: |-
    Given an array of operations acting on a single input,
    produces a new operation that
    performs each given operation in sequence.
- uid: microsoft.quantum.canon.bounda
  summary: |-
    Given an array of operations acting on a single input,
    produces a new operation that
    performs each given operation in sequence.
    The modifier `A` indicates that all operations in the array are adjointable.
- uid: microsoft.quantum.canon.boundc
  summary: |-
    Given an array of operations acting on a single input,
    produces a new operation that
    performs each given operation in sequence.
    The modifier `C` indicates that all operations in the array are controllable.
- uid: microsoft.quantum.canon.boundca
  summary: |-
    Given an array of operations acting on a single input,
    produces a new operation that
    performs each given operation in sequence.
    The modifier `CA` indicates that all operations in the array are adjointable
    and controllable.
- uid: microsoft.quantum.canon.ccontrolled
  summary: |-
    Given an operation op, returns a new operation which
    applies the op if a classical control bit is true. If false, nothing happens.
- uid: microsoft.quantum.canon.ccontrolleda
  summary: |-
    Given an operation op, returns a new operation which
    applies the op if a classical control bit is true. If false, nothing happens.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.ccontrolledc
  summary: |-
    Given an operation op, returns a new operation which
    applies the op if a classical control bit is true. If false, nothing happens.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.ccontrolledca
  summary: |-
    Given an operation op, returns a new operation which
    applies the op if a classical control bit is true. If false, nothing happens.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.compose
  summary: |-
    Generates the composition of two functions.

    That is, given two functions $f$ and $g$, returns a new function representing
    $f \circ g$.
- uid: microsoft.quantum.canon.conjugatedby
  summary: |-
    Given outer and inner operations, returns a new operation that
    conjugates the inner operation by the outer operation.
- uid: microsoft.quantum.canon.conjugatedbya
  summary: |-
    Given outer and inner operations, returns a new operation that
    conjugates the inner operation by the outer operation.
- uid: microsoft.quantum.canon.conjugatedbyc
  summary: |-
    Given outer and inner operations, returns a new operation that
    conjugates the inner operation by the outer operation.
- uid: microsoft.quantum.canon.conjugatedbyca
  summary: |-
    Given outer and inner operations, returns a new operation that
    conjugates the inner operation by the outer operation.
- uid: microsoft.quantum.canon.continuedfractionconvergent
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.math.continuedfractionconvergenti".
- uid: microsoft.quantum.canon.controlledonbitstring
  summary: Returns a unitary operator that applies an oracle on the target register if the control register state corresponds to a specified bit mask.
- uid: microsoft.quantum.canon.controlledonint
  summary: Returns a unitary operator that applies an oracle on the target register if the control register state corresponds to a specified positive integer.
- uid: microsoft.quantum.canon.curriedop
  summary: |-
    Returns a curried version of an operation on two inputs.

    That is, given an operation with two inputs, this function applies Curry's isomorphism
    $f(x, y) \equiv f(x)(y)$ to return an operation of one input which
    returns an operation of one input.
- uid: microsoft.quantum.canon.curryop
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.canon.curriedop".
- uid: microsoft.quantum.canon.decomposeintotimestepsca
  summary: |-
    Returns an operation implementing the Trotterâ€“Suzuki integrator for
    a given operation.
- uid: microsoft.quantum.canon.embedpauli
  summary: |-
    Given a single-qubit Pauli operator and the index of a qubit,
    returns a multi-qubit Pauli operator with the given single-qubit
    operator at that index and `PauliI` at every other index.
- uid: microsoft.quantum.canon.expmod
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.math.expmodi".
- uid: microsoft.quantum.canon.extendedgcd
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.math.extendedgreatestcommondivisori".
- uid: microsoft.quantum.canon.filter
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arrays.Filtered" instead.
- uid: microsoft.quantum.canon.forall
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arrays.All" instead.
- uid: microsoft.quantum.canon.forany
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arrays.Any" instead.
- uid: microsoft.quantum.canon.fst
  summary: Given a pair, returns its first element.
- uid: microsoft.quantum.canon.gcd
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.math.greatestcommondivisori".
- uid: microsoft.quantum.canon.ignore
  summary: Ignores the output of an operation or function.
- uid: microsoft.quantum.canon.intabs
  summary: |-
    > [!WARNING]
    > Deprecated
    This function has been removed.
- uid: microsoft.quantum.canon.intarrayfromrange
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.convert.rangeasintarray".
- uid: microsoft.quantum.canon.intmax
  summary: |-
    > [!WARNING]
    > Deprecated
    This function has been removed.
- uid: microsoft.quantum.canon.inversemod
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.math.inversemodi".
- uid: microsoft.quantum.canon.iscoprime
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.math.greatestcommondivisori".
- uid: microsoft.quantum.canon.isresultone
  summary: Tests if a given Result value is equal to `One`.
- uid: microsoft.quantum.canon.isresultzero
  summary: Tests if a given Result value is equal to `Zero`.
- uid: microsoft.quantum.canon.littleendiantobigendian
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian".
- uid: microsoft.quantum.canon.map
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arrays.Mapped" instead.
- uid: microsoft.quantum.canon.mapindex
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arrays.MappedByIndex" instead.
- uid: microsoft.quantum.canon.modulus
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.math.modulusi".
- uid: microsoft.quantum.canon.multiplexerbruteforcefromgenerator
  summary: |-
    Returns a multiply-controlled unitary operation $U$ that applies a
    unitary $V_j$ when controlled by n-qubit number state $\ket{j}$.

    $U = \sum^{2^n-1}_{j=0}\ket{j}\bra{j}\otimes V_j$.
- uid: microsoft.quantum.canon.multiplexerfromgenerator
  summary: |-
    Returns a multiply-controlled unitary operation $U$ that applies a
    unitary $V_j$ when controlled by n-qubit number state $\ket{j}$.

    $U = \sum^{2^n-1}_{j=0}\ket{j}\bra{j}\otimes V_j$.
- uid: microsoft.quantum.canon.operationpow
  summary: |-
    Raises an operation to a power.

    That is, given an operation representing a gate $U$, returns a new operation
    $U^m$ for a power $m$.
- uid: microsoft.quantum.canon.operationpowa
  summary: |-
    Raises an operation to a power.
    The modifier `A` indicates that the operation is adjointable.

    That is, given an operation representing a gate $U$, returns a new operation
    $U^m$ for a power $m$.
- uid: microsoft.quantum.canon.operationpowc
  summary: |-
    Raises an operation to a power.
    The modifier `C` indicates that the operation is controllable.

    That is, given an operation representing a gate $U$, returns a new operation
    $U^m$ for a power $m$.
- uid: microsoft.quantum.canon.operationpowca
  summary: |-
    Raises an operation to a power.
    The modifier `A` indicates that the operation is controllable and adjointable.

    That is, given an operation representing a gate $U$, returns a new operation
    $U^m$ for a power $m$.
- uid: microsoft.quantum.canon.pad
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arrays.Padded" instead.
- uid: microsoft.quantum.canon.paulifrombitstring
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.convert.boolarrayaspauli".
- uid: microsoft.quantum.canon.pnormalize
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.math.pnormalized".
- uid: microsoft.quantum.canon.positiveintfromboolarr
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.convert.boolarrayasint".
- uid: microsoft.quantum.canon.positiveintfromresultarr
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.canon.resultarrayasint".
- uid: microsoft.quantum.canon.restrictedtosubregister
  summary: Restricts an operation to an array of indices of a register, i.e., a subregister.
- uid: microsoft.quantum.canon.restrictedtosubregistera
  summary: |-
    Restricts an operation to an array of indices of a register, i.e., a subregister.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.restrictedtosubregisterc
  summary: |-
    Restricts an operation to an array of indices of a register, i.e., a subregister.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.restrictedtosubregisterca
  summary: |-
    Restricts an operation to an array of indices of a register, i.e., a subregister.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.restricttosubregister
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.canon.restrictedtosubregister".
- uid: microsoft.quantum.canon.restricttosubregistera
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.canon.restrictedtosubregistera".
- uid: microsoft.quantum.canon.restricttosubregisterc
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.canon.restrictedtosubregisterc".
- uid: microsoft.quantum.canon.restricttosubregisterca
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.canon.restrictedtosubregisterca".
- uid: microsoft.quantum.canon.resultarrfromboolarr
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.convert.resultarrayasboolarray".
- uid: microsoft.quantum.canon.resultasint
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.convert.resultarrayasint".
- uid: microsoft.quantum.canon.resultfrombool
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.convert.boolasresult".
- uid: microsoft.quantum.canon.reverse
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arrays.Reversed" instead.
- uid: microsoft.quantum.canon.snd
  summary: Given a pair, returns its second element.
- uid: microsoft.quantum.canon.splitarray
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arrays.Partitioned" instead.
- uid: microsoft.quantum.canon.stackcapacity
  summary: Retrieves the capacity of a <xref:microsoft.quantum.canon.resultstack>.
- uid: microsoft.quantum.canon.stacklength
  summary: |-
    Retrieves the number of elements stored in a
    <xref:microsoft.quantum.canon.resultstack>.
- uid: microsoft.quantum.canon.stacknew
  summary: Creates a new empty <xref:microsoft.quantum.canon.resultstack> with given capacity.
- uid: microsoft.quantum.canon.stackpeek
  summary: Retrieves the topmost element of a <xref:microsoft.quantum.canon.resultstack>.
- uid: microsoft.quantum.canon.stackpop
  summary: Removes the topmost element from a <xref:microsoft.quantum.canon.resultstack>.
- uid: microsoft.quantum.canon.stackpush
  summary: Pushes a new element onto a <xref:microsoft.quantum.canon.resultstack>.
- uid: microsoft.quantum.canon.tooperation
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.convert.functionasoperation".
- uid: microsoft.quantum.canon.transformedoperation
  summary: |-
    Given a function and an operation, returns a new operation whose
    input is transformed by the given function.
- uid: microsoft.quantum.canon.transformedoperationa
  summary: |-
    Given a function and an operation, returns a new operation whose
    input is transformed by the given function.
- uid: microsoft.quantum.canon.transformedoperationc
  summary: |-
    Given a function and an operation, returns a new operation whose
    input is transformed by the given function.
- uid: microsoft.quantum.canon.transformedoperationca
  summary: |-
    Given a function and an operation, returns a new operation whose
    input is transformed by the given function.
- uid: microsoft.quantum.canon.uncurriedop
  summary: |-
    Given a function which returns operations,
    returns a new operation which takes both inputs
    as a tuple.
- uid: microsoft.quantum.canon.uncurriedopa
  summary: |-
    Given a function which returns operations,
    returns a new operation which takes both inputs
    as a tuple.
    The modifier `A` indicates that the operations are adjointable.
- uid: microsoft.quantum.canon.uncurriedopc
  summary: |-
    Given a function which returns operations,
    returns a new operation which takes both inputs
    as a tuple.
    The modifier `C` indicates that the operations are controllable.
- uid: microsoft.quantum.canon.uncurriedopca
  summary: |-
    Given a function which returns operations,
    returns a new operation which takes both inputs
    as a tuple.
    The modifier `CA` indicates that the operations are controllable and adjointable.
- uid: microsoft.quantum.canon.uncurryop
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.canon.uncurriedop".
- uid: microsoft.quantum.canon.uncurryopa
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.canon.uncurriedopa".
- uid: microsoft.quantum.canon.uncurryopc
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.canon.uncurriedopc".
- uid: microsoft.quantum.canon.uncurryopca
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.canon.uncurriedopca".
- uid: microsoft.quantum.canon.weightonepaulis
  summary: |-
    Returns an array of all weight-1 Pauli operators
    on a given number of qubits.
- uid: microsoft.quantum.canon.xor
  summary: This computes the exclusive-OR of two bits.
operations:
- uid: microsoft.quantum.canon.adiabaticstateenergyunitary
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"microsoft.quantum.simuilation.pnormalized".
- uid: microsoft.quantum.canon.andladder
  summary: |-
    Performs a controlled 'AND ladder' on the target qubits.

    This applies a unitary given by the following map on computational basis vectors:
    $$
    \begin{align}
    \ket{x\_1, \dots, x\_n} \ket{y\_1, \dots, y\_{n - 1}} \mapsto
    \ket{x\_1, \dots, x\_n} \ket{
    y\_1 \oplus (x\_1 \land x\_2), \dots, y\_{n - 1} \oplus (x\_1 \land x\_2 \land \cdots \land x\_{n - 1}
    },
    \end{align}
    $$
    where $\ket{x\_1, \dots, x\_n}$ refers to the computational basis
    states of `controls`, and where $\ket{y\_1, \dots, y\_{n - 1}}$
    refers to the computational basis states of `targets`.
- uid: microsoft.quantum.canon.applydiagonalunitary
  summary: |-
    Applies an array of complex phases to numeric basis states of a register of qubits.

    That is, this implements the diagonal unitary operation $U$ that applies a complex phase
    $e^{i \theta_j}$ on the $n$-qubit number state $\ket{j}$.

    $U = \sum^{2^n-1}_{j=0}e^{i\theta_j}\ket{j}\bra{j}$.
- uid: microsoft.quantum.canon.applyif
  summary: |-
    Given an operation `op` and a bit value `bit`, applies `op` to the `target`
    if `bit` is true. If false, nothing happens to the `target`.
- uid: microsoft.quantum.canon.applyifa
  summary: |-
    Given an operation `op` and a bit value `bit`, applies `op` to the `target`
    if `bit` is true. If false, nothing happens to the `target`.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.applyifc
  summary: |-
    Given an operation `op` and a bit value `bit`, applies `op` to the `target`
    if `bit` is true. If false, nothing happens to the `target`.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.applyifca
  summary: |-
    Given an operation `op` and a bit value `bit`, applies `op` to the `target`
    if `bit` is true. If false, nothing happens to the `target`.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.applymulticontrolledc
  summary: |-
    Applies a multiply controlled version of a singly controlled
    operation.
    The modifier `C` indicates that the single-qubit operation is controllable.
- uid: microsoft.quantum.canon.applymulticontrolledca
  summary: |-
    Applies a multiply controlled version of a singly controlled
    operation.
    The modifier `CA` indicates that the single-qubit operation is controllable
    and adjointable.
- uid: microsoft.quantum.canon.applypauli
  summary: |-
    Given a multi-qubit Pauli operator, applies the corresponding operation to
    a register.
- uid: microsoft.quantum.canon.applypaulifrombitstring
  summary: |-
    Applies a Pauli operator on each qubit in an array if the corresponding
    bit of a Boolean array matches a given input.
- uid: microsoft.quantum.canon.applyquantumfouriertransform
  summary: |-
    Performs the Quantum Fourier Transform on a quantum register containing an
    integer in the little-endian representation.
- uid: microsoft.quantum.canon.applyquantumfouriertransformbe
  summary: |-
    > [!WARNING]
    > Deprecated
    This operation has been removed.
- uid: microsoft.quantum.canon.applyquantumfouriertransformle
  summary: ''
- uid: microsoft.quantum.canon.applyreversedopbigendian
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBE".
- uid: microsoft.quantum.canon.applyreversedopbigendiana
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEA".
- uid: microsoft.quantum.canon.applyreversedopbigendianc
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC".
- uid: microsoft.quantum.canon.applyreversedopbigendianca
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC".
- uid: microsoft.quantum.canon.applyreversedoplittleendian
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLE".
- uid: microsoft.quantum.canon.applyreversedoplittleendiana
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEA".
- uid: microsoft.quantum.canon.applyreversedoplittleendianc
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC".
- uid: microsoft.quantum.canon.applyreversedoplittleendianca
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC".
- uid: microsoft.quantum.canon.applyripplecarrycomparatorbe
  summary: |-
    > [!WARNING]
    > Deprecated
    This operation has been removed.
- uid: microsoft.quantum.canon.applyripplecarrycomparatorle
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.CompareUsingRippleCarry".
- uid: microsoft.quantum.canon.applytoeach
  summary: Applies a single-qubit operation to each element in a register.
- uid: microsoft.quantum.canon.applytoeacha
  summary: |-
    Applies a single-qubit operation to each element in a register.
    The modifier `A` indicates that the single-qubit operation is adjointable.
- uid: microsoft.quantum.canon.applytoeachc
  summary: |-
    Applies a single-qubit operation to each element in a register.
    The modifier `C` indicates that the single-qubit operation is controllable.
- uid: microsoft.quantum.canon.applytoeachca
  summary: |-
    Applies a single-qubit operation to each element in a register.
    The modifier `CA` indicates that the single-qubit operation is controllable
    and adjointable.
- uid: microsoft.quantum.canon.applytoeachindex
  summary: Applies a single-qubit operation to each indexed element in a register.
- uid: microsoft.quantum.canon.applytoeachindexa
  summary: |-
    Applies a single-qubit operation to each indexed element in a register.
    The modifier `A` indicates that the single-qubit operation is adjointable.
- uid: microsoft.quantum.canon.applytoeachindexc
  summary: |-
    Applies a single-qubit operation to each indexed element in a register.
    The modifier `C` indicates that the single-qubit operation is controllable.
- uid: microsoft.quantum.canon.applytoeachindexca
  summary: |-
    Applies a single-qubit operation to each indexed element in a register.
    The modifier `CA` indicates that the single-qubit operation is adjointable
    and controllable.
- uid: microsoft.quantum.canon.applytofirstqubit
  summary: Applies an operation to the first qubit in the register.
- uid: microsoft.quantum.canon.applytofirstqubita
  summary: |-
    Applies an operation to the first qubit in the register.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.applytofirstqubitc
  summary: |-
    Applies operation op to the first qubit in the register.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.applytofirstqubitca
  summary: |-
    Applies operation op to the first qubit in the register.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.applytofirstthreequbits
  summary: Applies an operation to the first three qubits in the register.
- uid: microsoft.quantum.canon.applytofirstthreequbitsa
  summary: |-
    Applies an operation to the first three qubits in the register.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.applytofirstthreequbitsc
  summary: |-
    Applies an operation to the first three qubits in the register.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.applytofirstthreequbitsca
  summary: |-
    Applies an operation to the first three qubits in the register.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.applytofirsttwoqubits
  summary: Applies an operation to the first two qubits in the register.
- uid: microsoft.quantum.canon.applytofirsttwoqubitsa
  summary: |-
    Applies an operation to the first two qubits in the register.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.applytofirsttwoqubitsc
  summary: |-
    Applies an operation to the first two qubits in the register.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.applytofirsttwoqubitsca
  summary: |-
    Applies an operation to the first two qubits in the register.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.applytopartition
  summary: Applies a pair of operations to a given partition of a register into two parts.
- uid: microsoft.quantum.canon.applytopartitiona
  summary: |-
    Applies a pair of operations to a given partition of a register into two parts.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.applytopartitionc
  summary: |-
    Applies a pair of operations to a given partition of a register into two parts.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.applytopartitionca
  summary: |-
    Applies a pair of operations to a given partition of a register into two parts.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.applytosubregister
  summary: |-
    Applies an operation to a subregister of a register, with qubits
    specified by an array of their indices.
- uid: microsoft.quantum.canon.applytosubregistera
  summary: |-
    Applies an operation to a subregister of a register, with qubits
    specified by an array of their indices.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.applytosubregisterc
  summary: |-
    Applies an operation to a subregister of a register, with qubits
    specified by an array of their indices.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.applytosubregisterca
  summary: |-
    Applies an operation to a subregister of a register, with qubits
    specified by an array of their indices.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.applywith
  summary: Given two operations, applies one as conjugated with the other.
- uid: microsoft.quantum.canon.applywitha
  summary: Given two operations, applies one as conjugated with the other.
- uid: microsoft.quantum.canon.applywithc
  summary: ''
- uid: microsoft.quantum.canon.applywithca
  summary: Given two operations, applies one as conjugated with the other.
- uid: microsoft.quantum.canon.applywithinputtransformation
  summary: |-
    Given an operation that accepts some input, a function that
    returns an output compatible with that operation, and an input to that
    function, applies the operation using the function to transform the
    input to a form expected by the operation.
- uid: microsoft.quantum.canon.applywithinputtransformationa
  summary: |-
    Given an operation that accepts some input, a function that
    returns an output compatible with that operation, and an input to that
    function, applies the operation using the function to transform the
    input to a form expected by the operation.
- uid: microsoft.quantum.canon.applywithinputtransformationc
  summary: |-
    Given an operation that accepts some input, a function that
    returns an output compatible with that operation, and an input to that
    function, applies the operation using the function to transform the
    input to a form expected by the operation.
- uid: microsoft.quantum.canon.applywithinputtransformationca
  summary: |-
    Given an operation that accepts some input, a function that
    returns an output compatible with that operation, and an input to that
    function, applies the operation using the function to transform the
    input to a form expected by the operation.
- uid: microsoft.quantum.canon.approximateqft
  summary: Apply the Approximate Quantum Fourier Transform (AQFT) to a quantum register.
- uid: microsoft.quantum.canon.asserthighestbit
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.AssertMostSignificantBit".
- uid: microsoft.quantum.canon.assertlessthanphasele
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.AssertPhaseLessThan".
- uid: microsoft.quantum.canon.assertphase
  summary: |-
    Asserts that the phase of an equal superposition state has the expected value.

    Specifically, asserts that the phase $\phi$ of a quantum state
    that may be expressed as
    $\frac{e^{i t}}{\sqrt{2}}(e^{i\phi}\ket{0} + e^{-i\phi}\ket{1})$
    for some arbitrary real t has the expected value.
- uid: microsoft.quantum.canon.assertprobintbe
  summary: |-
    > [!WARNING]
    > Deprecated
    This operation has been removed.
- uid: microsoft.quantum.canon.cnotchain
  summary: |-
    Computes the parity of an array of qubits in-place.

    It follows the pattern
    $\ket{q_0} \ket{q_0 \oplus q_1} \ket{q_0 \oplus q_1 \oplus q_2} \cdots$.
- uid: microsoft.quantum.canon.cnotchaintarget
  summary: |-
    Computes the parity of an array of qubits into a target qubit.

    If the array is initially in the state
    $\ket{q_0} \ket{q_1} \cdots \ket{q_{\text{target}}}$,
    the final state is given by
    $\ket{q_0} \ket{q_1 \oplus q_0} \cdots \ket{q_{n - 1} \oplus \cdots \oplus q_0 \oplus q_{\text{target}}}$.
- uid: microsoft.quantum.canon.copymostsignificantbitle
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.CopyMostSignificantBit".
- uid: microsoft.quantum.canon.cx
  summary: |-
    Applies the controlled-X (CX) gate to a pair of qubits.

    $$
    \begin{align}
    1 & 0 & 0 & 0 \\\\
    0 & 1 & 0 & 0 \\\\
    0 & 0 & 0 & 1 \\\\
    0 & 0 & 1 & 0
    \end{align},
    $$
    where rows and columns are organized as in the quantum concepts guide.
- uid: microsoft.quantum.canon.cy
  summary: |-
    Applies the controlled-Y (CY) gate to a pair of qubits.

    $$
    \begin{align}
    1 & 0 & 0 & 0 \\\\
    0 & 1 & 0 & 0 \\\\
    0 & 0 & 0 & -i \\\\
    0 & 0 & i & 0
    \end{align},
    $$
    where rows and columns are organized as in the quantum concepts guide.
- uid: microsoft.quantum.canon.cz
  summary: |-
    Applies the controlled-Z (CZ) gate to a pair of qubits.

    $$
    \begin{align}
    1 & 0 & 0 & 0 \\\\
    0 & 1 & 0 & 0 \\\\
    0 & 0 & 1 & 0 \\\\
    0 & 0 & 0 & -1
    \end{align},
    $$
    where rows and columns are organized as in the quantum concepts guide.
- uid: microsoft.quantum.canon.hy
  summary: |-
    Applies the Y-basis analog to the Hadamard transformation
    that interchanges the Z and Y axes.

    The Y Hadamard transformation $H_Y = S H$ on a single qubit is:

    \begin{align}
    H_Y \mathrel{:=}
    \frac{1}{\sqrt{2}}
    \begin{bmatrix}
    1 & 1 \\\\
    i & -i
    \end{bmatrix}.
    \end{align}
- uid: microsoft.quantum.canon.inplacexorbe
  summary: |-
    > [!WARNING]
    > Deprecated
    This operation has been removed.
- uid: microsoft.quantum.canon.inplacexorle
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Measurement.ApplyXorInPlace".
- uid: microsoft.quantum.canon.integerincrementle
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.IncrementByInteger".
- uid: microsoft.quantum.canon.integerincrementphasele
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.IncrementPhaseByInteger".
- uid: microsoft.quantum.canon.iteratethroughcartesianpower
  summary: |-
    Iterates a variable, say arr, through Cartesian product
    [ 0, bound - 1 ] Ã— [ 0, bound - 1 ] Ã— [ 0, bound - 1 ]
    and calls op(arr) for every element of the Cartesian product
- uid: microsoft.quantum.canon.iteratethroughcartesianproduct
  summary: |-
    Iterates a variable, say `arr`, through a Cartesian product
    [ 0, bounds[0]-1 ] Ã— [ 0, bounds[1]-1 ] Ã— [ 0, bounds[Length(bounds)-1]-1 ]
    and calls op(arr) for every element of the Cartesian product
- uid: microsoft.quantum.canon.measureintegerbe
  summary: |-
    > [!WARNING]
    > Deprecated
    This operation has been removed.
- uid: microsoft.quantum.canon.modularaddproductle
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.MultiplyAndAddByModularInteger".
- uid: microsoft.quantum.canon.modularaddproductphasele
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.MultiplyAndAddPhaseByModularInteger".
- uid: microsoft.quantum.canon.modularincrementle
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.ModularIncrementByInteger".
- uid: microsoft.quantum.canon.modularincrementphasele
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.IncrementPhaseByModularInteger".
- uid: microsoft.quantum.canon.modularmultiplybyconstantle
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Arithmetic.MultiplyByModularInteger".
- uid: microsoft.quantum.canon.multiplexoperations
  summary: |-
    Applies an array of operations controlled by an array of number states.

    That is, applies Multiply-controlled unitary operation $U$ that applies a
    unitary $V_j$ when controlled by $n$-qubit number state $\ket{j}$.

    $U = \sum^{2^n-1}_{j=0}\ket{j}\bra{j}\otimes V_j$.
- uid: microsoft.quantum.canon.multiplexoperationsbruteforcefromgenerator
  summary: |-
    Applies multiply-controlled unitary operation $U$ that applies a
    unitary $V_j$ when controlled by n-qubit number state $\ket{j}$.

    $U = \sum^{N-1}_{j=0}\ket{j}\bra{j}\otimes V_j$.
- uid: microsoft.quantum.canon.multiplexoperationsfromgenerator
  summary: |-
    Applies a multiply-controlled unitary operation $U$ that applies a
    unitary $V_j$ when controlled by n-qubit number state $\ket{j}$.

    $U = \sum^{N-1}_{j=0}\ket{j}\bra{j}\otimes V_j$.
- uid: microsoft.quantum.canon.multiplexpauli
  summary: |-
    Applies a Pauli rotation conditioned on an array of qubits.

    This applies the multiply-controlled unitary operation $U$ that performs
    rotations by angle $\theta_j$ about single-qubit Pauli operator $P$
    when controlled by the $n$-qubit number state $\ket{j}$.

    $U = \sum^{2^n-1}_{j=0}\ket{j}\bra{j}\otimes e^{i P \theta_j}$.
- uid: microsoft.quantum.canon.multiplexz
  summary: |-
    Applies a Pauli Z rotation conditioned on an array of qubits.

    This applies the multiply-controlled unitary operation $U$ that performs
    rotations by angle $\theta_j$ about single-qubit Pauli operator $Z$
    when controlled by the $n$-qubit number state $\ket{j}$.

    $U = \sum^{2^n-1}_{j=0}\ket{j}\bra{j}\otimes e^{i Z \theta_j}$.
- uid: microsoft.quantum.canon.noop
  summary: Performs the identity operation (no-op) on an argument.
- uid: microsoft.quantum.canon.qft
  summary: |-
    Performs the Quantum Fourier Transform on a quantum register containing an
    integer in the big-endian representation.
- uid: microsoft.quantum.canon.qftle
  summary: |-
    Performs the Quantum Fourier Transform on a quantum register containing an
    integer in the little-endian representation.
- uid: microsoft.quantum.canon.rall0
  summary: |-
    Performs a phase shift operation.

    $R=\boldone-(1-e^{i \phi})\ket{0\cdots 0}\bra{0\cdots 0}$.
- uid: microsoft.quantum.canon.rall1
  summary: |-
    Performs a phase shift operation.

    $R=\boldone-(1-e^{i \phi})\ket{1\cdots 1}\bra{1\cdots 1}$.
- uid: microsoft.quantum.canon.swapreverseregister
  summary: |-
    Uses SWAP gates to Reversed the order of the qubits in
    a register.
- uid: microsoft.quantum.canon.with
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Canon.ApplyWith".
- uid: microsoft.quantum.canon.witha
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Canon.ApplyWithA".
- uid: microsoft.quantum.canon.withc
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Canon.ApplyWithC".
- uid: microsoft.quantum.canon.withca
  summary: |-
    > [!WARNING]
    > Deprecated
    Please use @"Microsoft.Quantum.Canon.ApplyWithCA".
newtypes:
- uid: microsoft.quantum.canon.ccnotop
  summary: The signature type of CCNOT gate.
- uid: microsoft.quantum.canon.resultstack
  summary: |-
    A last-in-first-out stack of `Result` variables.
    The stack consists of an integer capacity, a stack pointer and a `Result` array.
...
