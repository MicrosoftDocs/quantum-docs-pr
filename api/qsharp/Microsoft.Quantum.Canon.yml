### YamlMime:QSharpNamespace
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.

uid: microsoft.quantum.canon
name: Microsoft.Quantum.Canon
functions:
- uid: microsoft.quantum.canon.bigendiantolittleendian
  summary: |2-

    > [!WARNING]
    > Deprecated

    BigEndianToLittleEndian has been deprecated. Please use @"microsoft.quantum.arithmetic.bigendianaslittleendian" instead.
    Please use @"Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian".
- uid: microsoft.quantum.canon.bound
  summary: |-
    Given an array of operations acting on a single input,
    produces a new operation that
    performs each given operation in sequence.
- uid: microsoft.quantum.canon.bounda
  summary: |-
    Given an array of operations acting on a single input,
    produces a new operation that
    performs each given operation in sequence.
    The modifier `A` indicates that all operations in the array are adjointable.
- uid: microsoft.quantum.canon.boundc
  summary: |-
    Given an array of operations acting on a single input,
    produces a new operation that
    performs each given operation in sequence.
    The modifier `C` indicates that all operations in the array are controllable.
- uid: microsoft.quantum.canon.boundca
  summary: |-
    Given an array of operations acting on a single input,
    produces a new operation that
    performs each given operation in sequence.
    The modifier `CA` indicates that all operations in the array are adjointable
    and controllable.
- uid: microsoft.quantum.canon.ccontrolled
  summary: |-
    Given an operation op, returns a new operation which
    applies the op if a classical control bit is true. If `false`, nothing happens.
- uid: microsoft.quantum.canon.ccontrolleda
  summary: |-
    Given an operation op, returns a new operation which
    applies the op if a classical control bit is true. If `false`, nothing happens.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.ccontrolledc
  summary: |-
    Given an operation op, returns a new operation which
    applies the op if a classical control bit is true. If `false`, nothing happens.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.ccontrolledca
  summary: |-
    Given an operation op, returns a new operation which
    applies the op if a classical control bit is true. If `false`, nothing happens.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.compose
  summary: Returns the composition of two functions.
- uid: microsoft.quantum.canon.conjugatedby
  summary: |-
    Given outer and inner operations, returns a new operation that
    conjugates the inner operation by the outer operation.
- uid: microsoft.quantum.canon.conjugatedbya
  summary: |-
    Given outer and inner operations, returns a new operation that
    conjugates the inner operation by the outer operation.
- uid: microsoft.quantum.canon.conjugatedbyc
  summary: |-
    Given outer and inner operations, returns a new operation that
    conjugates the inner operation by the outer operation.
- uid: microsoft.quantum.canon.conjugatedbyca
  summary: |-
    Given outer and inner operations, returns a new operation that
    conjugates the inner operation by the outer operation.
- uid: microsoft.quantum.canon.controlledonbitstring
  summary: Returns a unitary operation that applies an oracle on the target register if the control register state corresponds to a specified bit mask.
- uid: microsoft.quantum.canon.controlledonint
  summary: |-
    Returns a unitary operator that applies an oracle on the target register
    if the control register state corresponds to a specified positive integer.
- uid: microsoft.quantum.canon.curriedop
  summary: |-
    Returns a curried version of an operation on two inputs.

    That is, given an operation with two inputs, this function applies Curry's isomorphism
    $f(x, y) \equiv f(x)(y)$ to return an operation of one input which
    returns an operation of one input.
- uid: microsoft.quantum.canon.decomposedintotimestepsca
  summary: |-
    Returns an operation implementing the Trotterâ€“Suzuki integrator for
    a given operation.
- uid: microsoft.quantum.canon.decomposeintotimestepsca
  summary: |2-

    > [!WARNING]
    > Deprecated

    DecomposeIntoTimeStepsCA has been deprecated. Please use @"microsoft.quantum.canon.decomposedintotimestepsca" instead.
- uid: microsoft.quantum.canon.delayed
  summary: |-
    Returns an operation that applies
    given operation with given argument.
- uid: microsoft.quantum.canon.delayeda
  summary: |-
    Returns an operation that applies
    given operation with given argument.
- uid: microsoft.quantum.canon.delayedc
  summary: |-
    Returns an operation that applies
    given operation with given argument.
- uid: microsoft.quantum.canon.delayedca
  summary: |-
    Returns an operation that applies
    given operation with given argument.
- uid: microsoft.quantum.canon.embedpauli
  summary: |-
    Given a single-qubit Pauli operator and the index of a qubit,
    returns a multi-qubit Pauli operator with the given single-qubit
    operator at that index and `PauliI` at every other index.
- uid: microsoft.quantum.canon.fst
  summary: Given a pair, returns its first element.
- uid: microsoft.quantum.canon.ignore
  summary: Ignores the output of an operation or function.
- uid: microsoft.quantum.canon.isresultone
  summary: Tests if a given Result value is equal to `One`.
- uid: microsoft.quantum.canon.isresultzero
  summary: Tests if a given Result value is equal to `Zero`.
- uid: microsoft.quantum.canon.littleendiantobigendian
  summary: |2-

    > [!WARNING]
    > Deprecated

    LittleEndianToBigEndian has been deprecated. Please use @"microsoft.quantum.arithmetic.littleendianasbigendian" instead.
    Please use @"Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian".
- uid: microsoft.quantum.canon.multiplexerbruteforcefromgenerator
  summary: |-
    Returns a multiply-controlled unitary operation $U$ that applies a
    unitary $V_j$ when controlled by n-qubit number state $\ket{j}$.

    $U = \sum^{2^n-1}_{j=0}\ket{j}\bra{j}\otimes V_j$.
- uid: microsoft.quantum.canon.multiplexerfromgenerator
  summary: |-
    Returns a multiply-controlled unitary operation $U$ that applies a
    unitary $V_j$ when controlled by n-qubit number state $\ket{j}$.

    $U = \sum^{2^n-1}_{j=0}\ket{j}\bra{j}\otimes V_j$.
- uid: microsoft.quantum.canon.operationpow
  summary: |-
    Raises an operation to a power.

    That is, given an operation representing a gate $U$, returns a new operation
    $U^m$ for a power $m$.
- uid: microsoft.quantum.canon.operationpowa
  summary: |-
    Raises an operation to a power.
    The modifier `A` indicates that the operation is adjointable.

    That is, given an operation representing a gate $U$, returns a new operation
    $U^m$ for a power $m$.
- uid: microsoft.quantum.canon.operationpowc
  summary: |-
    Raises an operation to a power.
    The modifier `C` indicates that the operation is controllable.

    That is, given an operation representing a gate $U$, returns a new operation
    $U^m$ for a power $m$.
- uid: microsoft.quantum.canon.operationpowca
  summary: |-
    Raises an operation to a power.
    The modifier `A` indicates that the operation is controllable and adjointable.

    That is, given an operation representing a gate $U$, returns a new operation
    $U^m$ for a power $m$.
- uid: microsoft.quantum.canon.restrictedtosubregister
  summary: Restricts an operation to an array of indices of a register, i.e., a subregister.
- uid: microsoft.quantum.canon.restrictedtosubregistera
  summary: |-
    Restricts an operation to an array of indices of a register, i.e., a subregister.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.restrictedtosubregisterc
  summary: |-
    Restricts an operation to an array of indices of a register, i.e., a subregister.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.restrictedtosubregisterca
  summary: |-
    Restricts an operation to an array of indices of a register, i.e., a subregister.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.snd
  summary: Given a pair, returns its second element.
- uid: microsoft.quantum.canon.stackcapacity
  summary: |2-

    > [!WARNING]
    > Deprecated

    StackCapacity has been deprecated.
- uid: microsoft.quantum.canon.stacklength
  summary: |2-

    > [!WARNING]
    > Deprecated

    StackLength has been deprecated.
- uid: microsoft.quantum.canon.stacknew
  summary: |2-

    > [!WARNING]
    > Deprecated

    StackNew has been deprecated.
- uid: microsoft.quantum.canon.stackpeek
  summary: |2-

    > [!WARNING]
    > Deprecated

    StackPeek has been deprecated.
- uid: microsoft.quantum.canon.stackpop
  summary: |2-

    > [!WARNING]
    > Deprecated

    StackPop has been deprecated.
- uid: microsoft.quantum.canon.stackpush
  summary: |2-

    > [!WARNING]
    > Deprecated

    StackPush has been deprecated.
- uid: microsoft.quantum.canon.transformedoperation
  summary: |-
    Given a function and an operation, returns a new operation whose
    input is transformed by the given function.
- uid: microsoft.quantum.canon.transformedoperationa
  summary: |-
    Given a function and an operation, returns a new operation whose
    input is transformed by the given function.
- uid: microsoft.quantum.canon.transformedoperationc
  summary: |-
    Given a function and an operation, returns a new operation whose
    input is transformed by the given function.
- uid: microsoft.quantum.canon.transformedoperationca
  summary: |-
    Given a function and an operation, returns a new operation whose
    input is transformed by the given function.
- uid: microsoft.quantum.canon.uncurriedop
  summary: |-
    Given a function which returns operations,
    returns a new operation which takes both inputs
    as a tuple.
- uid: microsoft.quantum.canon.uncurriedopa
  summary: |-
    Given a function which returns operations,
    returns a new operation which takes both inputs
    as a tuple.
    The modifier `A` indicates that the operations are adjointable.
- uid: microsoft.quantum.canon.uncurriedopc
  summary: |-
    Given a function which returns operations,
    returns a new operation which takes both inputs
    as a tuple.
    The modifier `C` indicates that the operations are controllable.
- uid: microsoft.quantum.canon.uncurriedopca
  summary: |-
    Given a function which returns operations,
    returns a new operation which takes both inputs
    as a tuple.
    The modifier `CA` indicates that the operations are controllable and adjointable.
- uid: microsoft.quantum.canon.weightonepaulis
  summary: |-
    Returns an array of all weight-1 Pauli operators
    on a given number of qubits.
- uid: microsoft.quantum.canon.xor
  summary: |2-

    > [!WARNING]
    > Deprecated

    XOR has been deprecated. Please use @"microsoft.quantum.logical.xor" instead.
    Please use @"microsoft.quantum.logical.xor".
operations:
- uid: microsoft.quantum.canon.andladder
  summary: Performs a controlled "AND ladder" on a register of target qubits.
- uid: microsoft.quantum.canon.applyand
  summary: |-
    Inverts a given target qubit if and only if both control qubits are in the 1 state,
    using measurement to perform the adjoint operation.
- uid: microsoft.quantum.canon.applyccnotchain
  summary: |-
    Implements a cascade of CCNOT gates controlled on corresponding bits of two
    qubit registers, acting on the next qubit of one of the registers.
    Starting from the qubits at position 0 in both registers as controls, CCNOT is
    applied to the qubit at position 1 of the target register, then controlled by
    the qubits at position 1 acting on the qubit at position 2 in the target register,
    etc., ending with an action on the target qubit in position `Length(nQubits)-1`.
- uid: microsoft.quantum.canon.applycnotchain
  summary: Computes the parity of a register of qubits in-place.
- uid: microsoft.quantum.canon.applycnotchainwithtarget
  summary: Computes the parity of an array of qubits into a target qubit.
- uid: microsoft.quantum.canon.applycontrolledonbitstring
  summary: |-
    Applies a unitary operation on the target register, controlled on a a state specified by a given
    bit mask.
- uid: microsoft.quantum.canon.applycontrolledonint
  summary: |-
    Applies a unitary operation on the target register if the control
    register state corresponds to a specified positive integer.
- uid: microsoft.quantum.canon.applydiagonalunitary
  summary: |-
    Applies an array of complex phases to numeric basis states of a register
    of qubits.
- uid: microsoft.quantum.canon.applyfermionicswap
  summary: Applies the Fermionic SWAP.
- uid: microsoft.quantum.canon.applyif
  summary: Applies an operation conditioned on a classical bit.
- uid: microsoft.quantum.canon.applyifa
  summary: Applies a adjointable operation conditioned on a classical bit.
- uid: microsoft.quantum.canon.applyifc
  summary: Applies a controllable operation conditioned on a classical bit.
- uid: microsoft.quantum.canon.applyifca
  summary: Applies a unitary operation conditioned on a classical bit.
- uid: microsoft.quantum.canon.applyifelseb
  summary: |-
    Applies one of two operations, depending on the value of a classical
    bit.
- uid: microsoft.quantum.canon.applyifelseba
  summary: |-
    Applies one of two adjointable operations, depending on the value of a
    classical bit.
- uid: microsoft.quantum.canon.applyifelsebc
  summary: |-
    Applies one of two controllable operations, depending on the value of a
    classical bit.
- uid: microsoft.quantum.canon.applyifelsebca
  summary: |-
    Applies one of two unitary operations, depending on the value of a
    classical bit.
- uid: microsoft.quantum.canon.applyifelser
  summary: |-
    Applies one of two operations, depending on the value of a classical
    result.
- uid: microsoft.quantum.canon.applyifelsera
  summary: |-
    Applies one of two adjointable operations, depending on the value of a
    classical result.
- uid: microsoft.quantum.canon.applyifelserc
  summary: |-
    Applies one of two controllable operations, depending on the value of a
    classical result.
- uid: microsoft.quantum.canon.applyifelserca
  summary: |-
    Applies one of two unitary operations, depending on the value of a
    classical result.
- uid: microsoft.quantum.canon.applyifone
  summary: Applies an operation conditioned on a classical result value being one.
- uid: microsoft.quantum.canon.applyifonea
  summary: Applies an adjointable operation conditioned on a classical result value being one.
- uid: microsoft.quantum.canon.applyifonec
  summary: Applies a controllable operation conditioned on a classical result value being one.
- uid: microsoft.quantum.canon.applyifoneca
  summary: Applies a unitary operation conditioned on a classical result value being one.
- uid: microsoft.quantum.canon.applyifzero
  summary: Applies an operation conditioned on a classical result value being zero.
- uid: microsoft.quantum.canon.applyifzeroa
  summary: Applies an adjointable operation conditioned on a classical result value being zero.
- uid: microsoft.quantum.canon.applyifzeroc
  summary: Applies a controllable operation conditioned on a classical result value being zero.
- uid: microsoft.quantum.canon.applyifzeroca
  summary: Applies a unitary operation conditioned on a classical result value being zero.
- uid: microsoft.quantum.canon.applylowdepthand
  summary: |-
    Inverts a given target qubit if and only if both control qubits are in
    the 1 state, with T-depth 1, using measurement to perform the adjoint
    operation.
- uid: microsoft.quantum.canon.applymulticontrolledc
  summary: |-
    Applies a multiply controlled version of a singly controlled
    operation.
    The modifier `C` indicates that the single-qubit operation is controllable.
- uid: microsoft.quantum.canon.applymulticontrolledca
  summary: |-
    Applies a multiply controlled version of a singly controlled
    operation.
    The modifier `CA` indicates that the single-qubit operation is controllable
    and adjointable.
- uid: microsoft.quantum.canon.applyoprepeatedlyover
  summary: Applies the same op over a qubit register multiple times.
- uid: microsoft.quantum.canon.applyoprepeatedlyovera
  summary: Applies the same op over a qubit register multiple times.
- uid: microsoft.quantum.canon.applyoprepeatedlyoverc
  summary: Applies the same op over a qubit register multiple times.
- uid: microsoft.quantum.canon.applyoprepeatedlyoverca
  summary: Applies the same op over a qubit register multiple times.
- uid: microsoft.quantum.canon.applypauli
  summary: |-
    Given a multi-qubit Pauli operator, applies the corresponding operation to
    a register.
- uid: microsoft.quantum.canon.applypaulifrombitstring
  summary: |-
    Applies a Pauli operator on each qubit in an array if the corresponding
    bit of a Boolean array matches a given input.
- uid: microsoft.quantum.canon.applyquantumfouriertransform
  summary: |-
    Performs the Quantum Fourier Transform on a quantum register containing an
    integer in the little-endian representation.
- uid: microsoft.quantum.canon.applyreversedopbigendiana
  summary: |2-

    > [!WARNING]
    > Deprecated

    ApplyReversedOpBigEndianA has been deprecated. Please use @"microsoft.quantum.arithmetic.applyreversedopbea" instead.
    Please use @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEA".
- uid: microsoft.quantum.canon.applyreversedopbigendianc
  summary: |2-

    > [!WARNING]
    > Deprecated

    ApplyReversedOpBigEndianC has been deprecated. Please use @"microsoft.quantum.arithmetic.applyreversedopbec" instead.
    Please use @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC".
- uid: microsoft.quantum.canon.applyreversedopbigendianca
  summary: |2-

    > [!WARNING]
    > Deprecated

    ApplyReversedOpBigEndianCA has been deprecated. Please use @"microsoft.quantum.arithmetic.applyreversedopbeca" instead.
    Please use @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC".
- uid: microsoft.quantum.canon.applyreversedoplittleendiana
  summary: |2-

    > [!WARNING]
    > Deprecated

    ApplyReversedOpLittleEndianA has been deprecated. Please use @"microsoft.quantum.arithmetic.applyreversedoplea" instead.
    Please use @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEA".
- uid: microsoft.quantum.canon.applyreversedoplittleendianc
  summary: |2-

    > [!WARNING]
    > Deprecated

    ApplyReversedOpLittleEndianC has been deprecated. Please use @"microsoft.quantum.arithmetic.applyreversedoplec" instead.
    Please use @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC".
- uid: microsoft.quantum.canon.applyreversedoplittleendianca
  summary: |2-

    > [!WARNING]
    > Deprecated

    ApplyReversedOpLittleEndianCA has been deprecated. Please use @"microsoft.quantum.arithmetic.applyreversedopleca" instead.
    Please use @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC".
- uid: microsoft.quantum.canon.applyripplecarrycomparatorle
  summary: |2-

    > [!WARNING]
    > Deprecated

    ApplyRippleCarryComparatorLE has been deprecated. Please use @"microsoft.quantum.arithmetic.compareusingripplecarry" instead.
    Please use @"Microsoft.Quantum.Arithmetic.CompareUsingRippleCarry".
- uid: microsoft.quantum.canon.applyseriesofops
  summary: Applies a list of ops and their targets sequentially on an array.
- uid: microsoft.quantum.canon.applyseriesofopsa
  summary: Applies a list of ops and their targets sequentially on an array. (Adjoint)
- uid: microsoft.quantum.canon.applyseriesofopsc
  summary: Applies a list of ops and their targets sequentially on an array. (Controlled)
- uid: microsoft.quantum.canon.applyseriesofopsca
  summary: Applies a list of ops and their targets sequentially on an array. (Adjoint + Controlled)
- uid: microsoft.quantum.canon.applytoeach
  summary: Applies a single-qubit operation to each element in a register.
- uid: microsoft.quantum.canon.applytoeacha
  summary: |-
    Applies a single-qubit operation to each element in a register.
    The modifier `A` indicates that the single-qubit operation is adjointable.
- uid: microsoft.quantum.canon.applytoeachc
  summary: |-
    Applies a single-qubit operation to each element in a register.
    The modifier `C` indicates that the single-qubit operation is controllable.
- uid: microsoft.quantum.canon.applytoeachca
  summary: |-
    Applies a single-qubit operation to each element in a register.
    The modifier `CA` indicates that the single-qubit operation is controllable
    and adjointable.
- uid: microsoft.quantum.canon.applytoeachindex
  summary: Applies a single-qubit operation to each indexed element in a register.
- uid: microsoft.quantum.canon.applytoeachindexa
  summary: |-
    Applies a single-qubit operation to each indexed element in a register.
    The modifier `A` indicates that the single-qubit operation is adjointable.
- uid: microsoft.quantum.canon.applytoeachindexc
  summary: |-
    Applies a single-qubit operation to each indexed element in a register.
    The modifier `C` indicates that the single-qubit operation is controllable.
- uid: microsoft.quantum.canon.applytoeachindexca
  summary: |-
    Applies a single-qubit operation to each indexed element in a register.
    The modifier `CA` indicates that the single-qubit operation is adjointable
    and controllable.
- uid: microsoft.quantum.canon.applytoelement
  summary: Applies an operation to a given element of an array.
- uid: microsoft.quantum.canon.applytoelementa
  summary: Applies an operation to a given element of an array.
- uid: microsoft.quantum.canon.applytoelementc
  summary: Applies an operation to a given element of an array.
- uid: microsoft.quantum.canon.applytoelementca
  summary: Applies an operation to a given element of an array.
- uid: microsoft.quantum.canon.applytofirstqubit
  summary: Applies an operation to the first qubit in the register.
- uid: microsoft.quantum.canon.applytofirstqubita
  summary: |-
    Applies an operation to the first qubit in the register.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.applytofirstqubitc
  summary: |-
    Applies operation op to the first qubit in the register.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.applytofirstqubitca
  summary: |-
    Applies operation op to the first qubit in the register.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.applytofirstthreequbits
  summary: Applies an operation to the first three qubits in the register.
- uid: microsoft.quantum.canon.applytofirstthreequbitsa
  summary: |-
    Applies an operation to the first three qubits in the register.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.applytofirstthreequbitsc
  summary: |-
    Applies an operation to the first three qubits in the register.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.applytofirstthreequbitsca
  summary: |-
    Applies an operation to the first three qubits in the register.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.applytofirsttwoqubits
  summary: Applies an operation to the first two qubits in the register.
- uid: microsoft.quantum.canon.applytofirsttwoqubitsa
  summary: |-
    Applies an operation to the first two qubits in the register.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.applytofirsttwoqubitsc
  summary: |-
    Applies an operation to the first two qubits in the register.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.applytofirsttwoqubitsca
  summary: |-
    Applies an operation to the first two qubits in the register.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.applytohead
  summary: Applies an operation to the first element of an array.
- uid: microsoft.quantum.canon.applytoheada
  summary: Applies an operation to the first element of an array.
- uid: microsoft.quantum.canon.applytoheadc
  summary: Applies an operation to the first element of an array.
- uid: microsoft.quantum.canon.applytoheadca
  summary: Applies an operation to the first element of an array.
- uid: microsoft.quantum.canon.applytomost
  summary: Applies an operation to all but the last element of an array.
- uid: microsoft.quantum.canon.applytomosta
  summary: Applies an operation to all but the last element of an array.
- uid: microsoft.quantum.canon.applytomostc
  summary: Applies an operation to all but the last element of an array.
- uid: microsoft.quantum.canon.applytomostca
  summary: Applies an operation to all but the last element of an array.
- uid: microsoft.quantum.canon.applytopartition
  summary: Applies a pair of operations to a given partition of a register into two parts.
- uid: microsoft.quantum.canon.applytopartitiona
  summary: |-
    Applies a pair of operations to a given partition of a register into two parts.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.applytopartitionc
  summary: |-
    Applies a pair of operations to a given partition of a register into two parts.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.applytopartitionca
  summary: |-
    Applies a pair of operations to a given partition of a register into two parts.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.applytorest
  summary: Applies an operation to all but the first element of an array.
- uid: microsoft.quantum.canon.applytoresta
  summary: Applies an operation to all but the first element of an array.
- uid: microsoft.quantum.canon.applytorestc
  summary: Applies an operation to all but the first element of an array.
- uid: microsoft.quantum.canon.applytorestca
  summary: Applies an operation to all but the first element of an array.
- uid: microsoft.quantum.canon.applytosubregister
  summary: |-
    Applies an operation to a subregister of a register, with qubits
    specified by an array of their indices.
- uid: microsoft.quantum.canon.applytosubregistera
  summary: |-
    Applies an operation to a subregister of a register, with qubits
    specified by an array of their indices.
    The modifier `A` indicates that the operation is adjointable.
- uid: microsoft.quantum.canon.applytosubregisterc
  summary: |-
    Applies an operation to a subregister of a register, with qubits
    specified by an array of their indices.
    The modifier `C` indicates that the operation is controllable.
- uid: microsoft.quantum.canon.applytosubregisterca
  summary: |-
    Applies an operation to a subregister of a register, with qubits
    specified by an array of their indices.
    The modifier `CA` indicates that the operation is controllable and adjointable.
- uid: microsoft.quantum.canon.applytotail
  summary: Applies an operation to the last element of an array.
- uid: microsoft.quantum.canon.applytotaila
  summary: Applies an operation to the last element of an array.
- uid: microsoft.quantum.canon.applytotailc
  summary: Applies an operation to the last element of an array.
- uid: microsoft.quantum.canon.applytotailca
  summary: Applies an operation to the last element of an array.
- uid: microsoft.quantum.canon.applywith
  summary: Given two operations, applies one as conjugated with the other.
- uid: microsoft.quantum.canon.applywitha
  summary: Given two operations, applies one as conjugated with the other.
- uid: microsoft.quantum.canon.applywithc
  summary: Given two operations, applies one as conjugated with the other.
- uid: microsoft.quantum.canon.applywithca
  summary: Given two operations, applies one as conjugated with the other.
- uid: microsoft.quantum.canon.applywithinputtransformation
  summary: |-
    Given an operation that accepts some input, a function that
    returns an output compatible with that operation, and an input to that
    function, applies the operation using the function to transform the
    input to a form expected by the operation.
- uid: microsoft.quantum.canon.applywithinputtransformationa
  summary: |-
    Given an operation that accepts some input, a function that
    returns an output compatible with that operation, and an input to that
    function, applies the operation using the function to transform the
    input to a form expected by the operation.
- uid: microsoft.quantum.canon.applywithinputtransformationc
  summary: |-
    Given an operation that accepts some input, a function that
    returns an output compatible with that operation, and an input to that
    function, applies the operation using the function to transform the
    input to a form expected by the operation.
- uid: microsoft.quantum.canon.applywithinputtransformationca
  summary: |-
    Given an operation that accepts some input, a function that
    returns an output compatible with that operation, and an input to that
    function, applies the operation using the function to transform the
    input to a form expected by the operation.
- uid: microsoft.quantum.canon.approximatelyapplydiagonalunitary
  summary: |-
    Applies an array of complex phases to numeric basis states of a register
    of qubits, truncating small rotation angles according to a given
    tolerance.
- uid: microsoft.quantum.canon.approximatelymultiplexpauli
  summary: |-
    Applies a Pauli rotation conditioned on an array of qubits, truncating
    small rotation angles according to a given tolerance.
- uid: microsoft.quantum.canon.approximatelymultiplexz
  summary: |-
    Applies a Pauli Z rotation conditioned on an array of qubits, truncating
    small rotation angles according to a given tolerance.
- uid: microsoft.quantum.canon.approximateqft
  summary: Apply the Approximate Quantum Fourier Transform (AQFT) to a quantum register.
- uid: microsoft.quantum.canon.asserthighestbit
  summary: |2-

    > [!WARNING]
    > Deprecated

    AssertHighestBit has been deprecated. Please use @"microsoft.quantum.arithmetic.assertmostsignificantbit" instead.
    Please use @"Microsoft.Quantum.Arithmetic.AssertMostSignificantBit".
- uid: microsoft.quantum.canon.assertlessthanphasele
  summary: |2-

    > [!WARNING]
    > Deprecated

    AssertLessThanPhaseLE has been deprecated. Please use @"microsoft.quantum.arithmetic.assertphaselessthan" instead.
    Please use @"Microsoft.Quantum.Arithmetic.AssertPhaseLessThan".
- uid: microsoft.quantum.canon.assertphase
  summary: |2-

    > [!WARNING]
    > Deprecated

    AssertPhase has been deprecated. Please use @"microsoft.quantum.diagnostics.assertphase" instead.
- uid: microsoft.quantum.canon.cascadeccnot
  summary: |2-

    > [!WARNING]
    > Deprecated

    CascadeCCNOT has been deprecated. Please use @"microsoft.quantum.canon.applyccnotchain" instead.
- uid: microsoft.quantum.canon.cascadecnot
  summary: |2-

    > [!WARNING]
    > Deprecated

    CascadeCNOT has been deprecated. Please use @"microsoft.quantum.canon.applycnotchain" instead.
    Please use @"microsoft.quantum.canon.applycnotchain".
- uid: microsoft.quantum.canon.cnotchain
  summary: |2-

    > [!WARNING]
    > Deprecated

    CNOTChain has been deprecated. Please use @"microsoft.quantum.canon.applycnotchain" instead.
- uid: microsoft.quantum.canon.cnotchaintarget
  summary: |2-

    > [!WARNING]
    > Deprecated

    CNOTChainTarget has been deprecated. Please use @"microsoft.quantum.canon.applycnotchainwithtarget" instead.
- uid: microsoft.quantum.canon.cx
  summary: |-
    Applies the controlled-X (CX) gate to a pair of qubits.

    $$
    \begin{align}
    1 & 0 & 0 & 0 \\\\
    0 & 1 & 0 & 0 \\\\
    0 & 0 & 0 & 1 \\\\
    0 & 0 & 1 & 0
    \end{align},
    $$
    where rows and columns are organized as in the quantum concepts guide.
- uid: microsoft.quantum.canon.cy
  summary: |-
    Applies the controlled-Y (CY) gate to a pair of qubits.

    $$
    \begin{align}
    1 & 0 & 0 & 0 \\\\
    0 & 1 & 0 & 0 \\\\
    0 & 0 & 0 & -i \\\\
    0 & 0 & i & 0
    \end{align},
    $$
    where rows and columns are organized as in the quantum concepts guide.
- uid: microsoft.quantum.canon.cz
  summary: |-
    Applies the controlled-Z (CZ) gate to a pair of qubits.

    $$
    \begin{align}
    1 & 0 & 0 & 0 \\\\
    0 & 1 & 0 & 0 \\\\
    0 & 0 & 1 & 0 \\\\
    0 & 0 & 0 & -1
    \end{align},
    $$
    where rows and columns are organized as in the quantum concepts guide.
- uid: microsoft.quantum.canon.delay
  summary: Applies a given operation with a delay.
- uid: microsoft.quantum.canon.delaya
  summary: Applies a given operation with a delay.
- uid: microsoft.quantum.canon.delayc
  summary: Applies a given operation with a delay.
- uid: microsoft.quantum.canon.delayca
  summary: Applies a given operation with a delay.
- uid: microsoft.quantum.canon.hy
  summary: |-
    Applies the Y-basis analog to the Hadamard transformation
    that interchanges the Z and Y axes.

    The Y Hadamard transformation $H_Y = S H$ on a single qubit is:

    \begin{align}
    H_Y \mathrel{:=}
    \frac{1}{\sqrt{2}}
    \begin{bmatrix}
    1 & 1 \\\\
    i & -i
    \end{bmatrix}.
    \end{align}
- uid: microsoft.quantum.canon.inplacemajority
  summary: |2-

    > [!WARNING]
    > Deprecated

    InPlaceMajority has been deprecated. Please use @"microsoft.quantum.arithmetic.applymajorityinplace" instead.
    Please use @"microsoft.quantum.arithmetic.applymajorityinplace".
- uid: microsoft.quantum.canon.inplacexorbe
  summary: |2-

    > [!WARNING]
    > Deprecated

    InPlaceXorBE has been deprecated. Please use @"applyreversedopleca(applyxorinplace(value, _), target)" instead.
    This operation has been removed.
- uid: microsoft.quantum.canon.inplacexorle
  summary: |2-

    > [!WARNING]
    > Deprecated

    InPlaceXorLE has been deprecated. Please use @"microsoft.quantum.measurement.applyxorinplace" instead.
    Please use @"Microsoft.Quantum.Measurement.ApplyXorInPlace".
- uid: microsoft.quantum.canon.integerincrementle
  summary: |2-

    > [!WARNING]
    > Deprecated

    IntegerIncrementLE has been deprecated. Please use @"microsoft.quantum.arithmetic.incrementbyinteger" instead.
    Please use @"Microsoft.Quantum.Arithmetic.IncrementByInteger".
- uid: microsoft.quantum.canon.integerincrementphasele
  summary: |2-

    > [!WARNING]
    > Deprecated

    IntegerIncrementPhaseLE has been deprecated. Please use @"microsoft.quantum.arithmetic.incrementphasebyinteger" instead.
    Please use @"Microsoft.Quantum.Arithmetic.IncrementPhaseByInteger".
- uid: microsoft.quantum.canon.iteratethroughcartesianpower
  summary: |-
    Applies an operation for each index in the Cartesian power of an
    integer range.
- uid: microsoft.quantum.canon.iteratethroughcartesianproduct
  summary: |-
    Applies an operation for each index in the Cartesian product of several
    ranges.
- uid: microsoft.quantum.canon.modularaddproductle
  summary: |2-

    > [!WARNING]
    > Deprecated

    ModularAddProductLE has been deprecated. Please use @"microsoft.quantum.arithmetic.multiplyandaddbymodularinteger" instead.
    Please use @"Microsoft.Quantum.Arithmetic.MultiplyAndAddByModularInteger".
- uid: microsoft.quantum.canon.modularaddproductphasele
  summary: |2-

    > [!WARNING]
    > Deprecated

    ModularAddProductPhaseLE has been deprecated. Please use @"microsoft.quantum.arithmetic.multiplyandaddphasebymodularinteger" instead.
    Please use @"Microsoft.Quantum.Arithmetic.MultiplyAndAddPhaseByModularInteger".
- uid: microsoft.quantum.canon.modularincrementle
  summary: |2-

    > [!WARNING]
    > Deprecated

    ModularIncrementLE has been deprecated. Please use @"microsoft.quantum.arithmetic.modularincrementbyinteger" instead.
    Please use @"Microsoft.Quantum.Arithmetic.ModularIncrementByInteger".
- uid: microsoft.quantum.canon.modularincrementphasele
  summary: |2-

    > [!WARNING]
    > Deprecated

    ModularIncrementPhaseLE has been deprecated. Please use @"microsoft.quantum.arithmetic.incrementphasebymodularinteger" instead.
    Please use @"Microsoft.Quantum.Arithmetic.IncrementPhaseByModularInteger".
- uid: microsoft.quantum.canon.modularmultiplybyconstantle
  summary: |2-

    > [!WARNING]
    > Deprecated

    ModularMultiplyByConstantLE has been deprecated. Please use @"microsoft.quantum.arithmetic.multiplybymodularinteger" instead.
    Please use @"Microsoft.Quantum.Arithmetic.MultiplyByModularInteger".
- uid: microsoft.quantum.canon.multiplexoperations
  summary: |-
    Applies an array of operations controlled by an array of number states.

    That is, applies Multiply-controlled unitary operation $U$ that applies a
    unitary $V_j$ when controlled by $n$-qubit number state $\ket{j}$.

    $U = \sum^{2^n-1}_{j=0}\ket{j}\bra{j}\otimes V_j$.
- uid: microsoft.quantum.canon.multiplexoperationsbruteforcefromgenerator
  summary: |-
    Applies multiply-controlled unitary operation $U$ that applies a
    unitary $V_j$ when controlled by n-qubit number state $\ket{j}$.

    $U = \sum^{N-1}_{j=0}\ket{j}\bra{j}\otimes V_j$.
- uid: microsoft.quantum.canon.multiplexoperationsfromgenerator
  summary: |-
    Applies a multiply-controlled unitary operation $U$ that applies a
    unitary $V_j$ when controlled by n-qubit number state $\ket{j}$.

    $U = \sum^{N-1}_{j=0}\ket{j}\bra{j}\otimes V_j$.
- uid: microsoft.quantum.canon.multiplexpauli
  summary: Applies a Pauli rotation conditioned on an array of qubits.
- uid: microsoft.quantum.canon.multiplexz
  summary: Applies a Pauli Z rotation conditioned on an array of qubits.
- uid: microsoft.quantum.canon.noop
  summary: Performs the identity operation (no-op) on an argument.
- uid: microsoft.quantum.canon.permutequbits
  summary: Permutes qubits by using the SWAP operation.
- uid: microsoft.quantum.canon.qft
  summary: |-
    Performs the Quantum Fourier Transform on a quantum register containing an
    integer in the big-endian representation.
- uid: microsoft.quantum.canon.qftle
  summary: |-
    Performs the Quantum Fourier Transform on a quantum register containing an
    integer in the little-endian representation.
- uid: microsoft.quantum.canon.rall0
  summary: |-
    Performs a phase shift operation.

    $R=\boldone-(1-e^{i \phi})\ket{0\cdots 0}\bra{0\cdots 0}$.
- uid: microsoft.quantum.canon.rall1
  summary: |-
    Performs a phase shift operation.

    $R=\boldone-(1-e^{i \phi})\ket{1\cdots 1}\bra{1\cdots 1}$.
- uid: microsoft.quantum.canon.repeat
  summary: Repeats an operation a given number of times.
- uid: microsoft.quantum.canon.repeata
  summary: Repeats an operation a given number of times.
- uid: microsoft.quantum.canon.repeatc
  summary: Repeats an operation a given number of times.
- uid: microsoft.quantum.canon.repeatca
  summary: Repeats an operation a given number of times.
- uid: microsoft.quantum.canon.swapreverseregister
  summary: |-
    Uses SWAP gates to Reversed the order of the qubits in
    a register.
newtypes:
- uid: microsoft.quantum.canon.ccnotop
  summary: The signature type of CCNOT gate.
- uid: microsoft.quantum.canon.resultstack
  summary: |2-

    > [!WARNING]
    > Deprecated

    ResultStack has been deprecated.
...
