### YamlMime:QSharpNamespace
uid: microsoft.quantum.simulation
name: Microsoft.Quantum.Simulation
summary: |2-
   # Summary
   This namespace contains functions and operations for coherently simulating
   the dynamics of quantum systems.
functions:
- uid: microsoft.quantum.simulation.addgeneratorsystems
  summary: Adds two `GeneratorSystem`s to create a new `GeneratorSystem`.
- uid: microsoft.quantum.simulation.blockencodingbylcu
  summary: |-
    Encodes an operator of interest into a `BlockEncoding`.

    This constructs a `BlockEncoding` unitary $U=P\cdot V\cdot P^\dagger$ that encodes some
    operator $H=\sum_{j}|\alpha_j|U_j$ of interest that is a linear combination of
    unitaries. Typically, $P$ is a state preparation unitary such that
    $P\ket{0}\_a=\sum_j\sqrt{\alpha_j/\|\vec\alpha\|\_2}\ket{j}\_a$,
    and $V=\sum_{j}\ket{j}\bra{j}\_a\otimes U_j$.
- uid: microsoft.quantum.simulation.blockencodingreflectionbylcu
  summary: |-
    Encodes an operator of interest into a `BlockEncodingReflection`.

    This constructs a `BlockEncodingReflection` unitary $U=P\cdot V\cdot P^\dagger$ that encodes some
    operator $H=\sum_{j}|\alpha_j|U_j$ of interest that is a linear combination of
    unitaries. Typically, $P$ is a state preparation unitary such that
    $P\ket{0}\_a\sum_j\sqrt{\alpha_j/\|\vec\alpha\|\_2}\ket{j}\_a$,
    and $V=\sum_{j}\ket{j}\bra{j}\_a\otimes U_j$.
- uid: microsoft.quantum.simulation.blockencodingtoreflection
  summary: |-
    Converts a `BlockEncoding` into an equivalent `BLockEncodingReflection`.

    That is, given a `BlockEncoding` unitary $U$ that encodes some
    operator $H$ of interest, converts it into a `BlockEncodingReflection` $U'$ that
    encodes the same operator, but also satisfies $U'^\dagger = U'$.
    This increases the size of the auxiliary register of $U$ by one qubit.
- uid: microsoft.quantum.simulation.getgeneratorsystemfunction
  summary: Retrieves the `GeneratorIndex` function in a `GeneratorSystem`.
- uid: microsoft.quantum.simulation.getgeneratorsystemnterms
  summary: Retrieves the number of terms in a `GeneratorSystem`.
- uid: microsoft.quantum.simulation.identitygeneratorindex
  summary: |-
    Returns a generator index consistent with the zero
    Hamiltonian, `H = 0`, which corresponds to the identity evolution operation.
- uid: microsoft.quantum.simulation.identitygeneratorsystem
  summary: |-
    Returns a generator system consistent with the zero
    Hamiltonian `H = 0`, which corresponds to the identity evolution operation.
- uid: microsoft.quantum.simulation.identitytimedependentgeneratorsystem
  summary: |-
    Returns a time-dependent generator system consistent with the
    Hamiltonian `H(s) = 0`.
- uid: microsoft.quantum.simulation.interpolatedevolution
  summary: |-
    Interpolates between two generators with a uniform schedule,
    returning an operation that applies simulated evolution under
    the resulting time-dependent generator to a qubit register.
- uid: microsoft.quantum.simulation.interpolategeneratorsystems
  summary: |-
    Returns a `TimeDependentGeneratorSystem` representing the linear
    interpolation between two `GeneratorSystem`s.
- uid: microsoft.quantum.simulation.intstopaulis
  summary: |-
    Converts an array of integers to an array of single-qubit Pauli
    operators.
- uid: microsoft.quantum.simulation.inttopauli
  summary: Converts a integer to a single-qubit Pauli operator.
- uid: microsoft.quantum.simulation.multiplygeneratorindex
  summary: Multiplies the coefficient in a `GeneratorIndex`.
- uid: microsoft.quantum.simulation.multiplygeneratorsystem
  summary: Multiplies the coefficient of all terms in a `GeneratorSystem`.
- uid: microsoft.quantum.simulation.pauliblockencoding
  summary: |-
    Creates a block-encoding unitary for a Hamiltonian.

    The Hamiltonian $H=\sum_{j}\alpha_j P_j$ is described by a
    sum of Pauli terms $P_j$, each with real coefficient $\alpha_j$.
- uid: microsoft.quantum.simulation.paulicoefficientfromgenidx
  summary: Extracts the coefficient of a Pauli term described by a `GeneratorIndex`.
- uid: microsoft.quantum.simulation.paulievolutionfunction
  summary: |-
    Represents a dynamical generator as a set of simulatable gates and an
    expansion in the Pauli basis.
- uid: microsoft.quantum.simulation.paulievolutionset
  summary: |-
    Represents a dynamical generator as a set of simulatable gates and an
    expansion in the Pauli basis.
- uid: microsoft.quantum.simulation.paulistringfromgenidx
  summary: |-
    Extracts the Pauli string and its qubit indices of a Pauli term described
    by a `GeneratorIndex`.
- uid: microsoft.quantum.simulation.quantumwalkbyqubitization
  summary: Converts a block-encoding reflection into a quantum walk.
- uid: microsoft.quantum.simulation.sumgeneratorsystems
  summary: Adds multiple `GeneratorSystem`s to create a new GeneratorSystem.
- uid: microsoft.quantum.simulation.timedependenttrottersimulationalgorithm
  summary: |-
    `TimeDependentSimulationAlgorithm` function that uses a Trotter–Suzuki
    decomposition to approximate a unitary operator that solves the
    time-dependent Schrodinger equation.
- uid: microsoft.quantum.simulation.trottersimulationalgorithm
  summary: |-
    `SimulationAlgorithm` function that uses a Trotter–Suzuki
    decomposition to approximate the time-evolution operator _exp(-iHt)_.
- uid: microsoft.quantum.simulation.trotterstep
  summary: |-
    Implements a single time-step of time-evolution by the system
    described in an `EvolutionGenerator` using a Trotter–Suzuki
    decomposition.
operations:
- uid: microsoft.quantum.simulation.adiabaticstateenergyunitary
  summary: |-
    Performs state preparation by applying a
    `statePrepUnitary` on the input state, followed by adiabatic state
    preparation using a `adiabaticUnitary`, and finally phase estimation
    with respect to `qpeUnitary`on the resulting state using a
    `phaseEstAlgorithm`.
- uid: microsoft.quantum.simulation.estimateenergy
  summary: |-
    Performs state preparation by applying a
    `statePrepUnitary` on an automatically allocated input state
    phase estimation with respect to `qpeUnitary`on the resulting state
    using a `phaseEstAlgorithm`.
- uid: microsoft.quantum.simulation.estimateenergywithadiabaticevolution
  summary: |-
    Performs state preparation by applying a
    `statePrepUnitary` on an automatically allocated input state,
    followed by adiabatic state preparation using a
    `adiabaticUnitary`, and finally phase estimation with respect to
    `qpeUnitary`on the resulting state using a `phaseEstAlgorithm`.
newtypes:
- uid: microsoft.quantum.simulation.blockencoding
  summary: |-
    Represents a unitary where an arbitrary operator of
    interest is encoded in the top-left block.

    That is, a `BlockEncoding` is a unitary $U$ where an arbitrary operator $H$ of
    interest that acts on the system register `s` is encoded in the top-
    left block corresponding to auxiliary state $\ket{0}_a$. That is,

    $$
    \begin{align}
    (\bra{0}_a\otimes I_s)U(\ket{0}_a\otimes I_s) = H
    \end{align}
    $$.
- uid: microsoft.quantum.simulation.blockencodingreflection
  summary: Represents a `BlockEncoding` that is also a reflection.
- uid: microsoft.quantum.simulation.evolutiongenerator
  summary: |-
    Represents a dynamical generator as a set of simulatable gates and
    an expansion in terms of that basis.

    Last parameter for number of terms.
- uid: microsoft.quantum.simulation.evolutionschedule
  summary: |-
    Represents a time-dependent dynamical generator.

    The `Double`
    parameter is a schedule in $[0, 1]$.
- uid: microsoft.quantum.simulation.evolutionset
  summary: |-
    Represents a set of gates that can be readily implemented and used
    to implement simulation algorithms.

    Elements in the set are indexed
    by a  <xref:microsoft.quantum.simulation.generatorindex>,
    and each set is described by a function
    from `GeneratorIndex` to  <xref:microsoft.quantum.simulation.evolutionunitary>,
    which are operations
    parameterized by a real number representing time
- uid: microsoft.quantum.simulation.evolutionunitary
  summary: |-
    Represents a unitary time-evolution operator.

    The first parameter is
    is duration of time-evolution, and the second parameter is the qubit
    register acted upon by the unitary.
- uid: microsoft.quantum.simulation.generatorindex
  summary: |-
    Represents a single primitive term in the set of all dynamical generators, e.g.
    Hermitian operators, for which there exists a map from that generator
    to time-evolution by that generator, through `EvolutionSet`.

    The first element
    (Int[], Double[]) is indexes that single term -- For instance, the Pauli string
    XXY with coefficient 0.5 would be indexed by ([1,1,2], [0.5]). Alternatively,
    Hamiltonians parameterized by a continuous variable, such as X cos φ + Y sin φ,
    might for instance be represented by ([], [φ]). The second
    element indexes the subsystem on which the generator acts on.
- uid: microsoft.quantum.simulation.generatorsystem
  summary: |-
    Represents a collection of `GeneratorIndex`es.

    We iterate over this
    collection using a single-index integer, and the size of the
    collection is assumed to be known.
- uid: microsoft.quantum.simulation.simulationalgorithm
  summary: |-
    Represents a time-independent simulation algorithm.

    A time-independent simulation technique converts an
    <xref:microsoft.quantum.simulation.evolutiongenerator>
    to unitary time evolution for some time-interval.
- uid: microsoft.quantum.simulation.timedependentblockencoding
  summary: |-
    Represents a `BlockEncoding` that is controlled by a clock register.

    That is, a `TimeDependentBlockEncoding` is a unitary $U$ controlled by a state
    $\ket{k}_d$ in clock register `d` such that an arbitrary operator $H_k$ of
    interest that acts on the system register `s` is encoded in the top-
    left block corresponding to auxiliary state $\ket{0}_a$. That is,

    $$
    \begin{align}
    (\bra{0}\_a\otimes I_{ds})U(\ket{0}\_a\otimes I_{ds}) = \sum_{k}\ket{k}\bra{k}\_d\otimes H_k.
    \end{align}
    $$.
- uid: microsoft.quantum.simulation.timedependentgeneratorsystem
  summary: |-
    Represents a time-dependent dynamical generator as a function
    from time to the value of the dynamical generator at that time.
- uid: microsoft.quantum.simulation.timedependentsimulationalgorithm
  summary: |-
    Represents a time-dependent simulation algorithm.

    A time-dependent simulation technique converts an
    <xref:microsoft.quantum.simulation.evolutionschedule>
    to unitary time-evolution for some time-interval.
- uid: microsoft.quantum.simulation.unitary
  summary: Represents evolution under a unitary operator.
...
