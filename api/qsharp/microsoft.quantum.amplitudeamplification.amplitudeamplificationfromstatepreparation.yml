### YamlMime:QSharpType
uid: microsoft.quantum.amplitudeamplification.amplitudeamplificationfromstatepreparation
name: AmplitudeAmplificationFromStatePreparation
type: function
namespace: Microsoft.Quantum.AmplitudeAmplification
summary: Amplitude amplification by oracles for partial reflections.
remarks: |-
  This imposes stricter conditions on form of the start and target states than in `AmpAmpByReflectionPhases`.
  It is assumed that the target state is marked by $\ket{1}\_f$.
  It is assumed that
  \begin{align}
  A\ket{0}\_{f}\ket{0}\_s= \lambda\ket{1}\_f\ket{\text{target}}\_s + \sqrt{1-|\lambda|^2}\ket{0}\_f\cdots,
  \end{align}
  In most cases, `flagQubit` and `auxiliaryRegister` are initialized in the state $\ket{0}\_{f}\ket{0}\_s$.
syntax: 'function AmplitudeAmplificationFromStatePreparation (phases : Microsoft.Quantum.AmplitudeAmplification.ReflectionPhases, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int) : (Qubit[] => Unit is Adj + Ctl)'
input:
  content: '(phases : Microsoft.Quantum.AmplitudeAmplification.ReflectionPhases, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int)'
  types:
  - name: phases
    summary: Phases of partial reflections
    uid: microsoft.quantum.amplitudeamplification.reflectionphases
  - name: stateOracle
    summary: Unitary oracle $A$ that prepares start state
    uid: microsoft.quantum.oracles.stateoracle
  - name: idxFlagQubit
    summary: Index to flag qubit
    isPrimitive: true
    uid: Int
output:
  content: (Qubit[] => Unit is Adj + Ctl)
  types:
  - summary: |-
      An operation that implements amplitude amplification by oracles that are
      implemented by partial reflections.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
...
