### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.incrementphasebyinteger
name: IncrementPhaseByInteger
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: |-
  Increments an unsigned quantum register by a classical integer,
  using phase rotations.

  Suppose that `target` encodes an unsigned integer $x$ in a little-endian
  encoding and that `increment` is equal to $a$.
  Then, this operation implements the unitary $\ket{x} \mapsto \ket{x + a}$,
  where the addition is performed
  modulo $2^n$, where $n = \texttt{Length(target!)}$.
remarks: |-
  Note that we have simplified the circuit because the increment is a
  classical constant, not a quantum register.

  See the figure on
  [ Page 6 of arXiv:quant-ph/0008033v1 ](https://arxiv.org/pdf/quant-ph/0008033.pdf#page=6)
  for the circuit diagram and explanation.
syntax: 'operation IncrementPhaseByInteger (increment : Int, target : Microsoft.Quantum.Arithmetic.PhaseLittleEndian) : Unit'
references: |-
  - [ *Thomas G. Draper*,
    arXiv:quant-ph/0008033](https://arxiv.org/pdf/quant-ph/0008033v1.pdf)
input:
  content: '(increment : Int, target : Microsoft.Quantum.Arithmetic.PhaseLittleEndian)'
  types:
  - name: increment
    summary: The integer by which the `target` is incremented by.
    isPrimitive: true
    uid: Int
  - name: target
    summary: |-
      A quantum register encoding an unsigned integer using little-endian
      encoding in the dual (QFT) basis.
    uid: microsoft.quantum.arithmetic.phaselittleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- incrementbyintegerbe
- incrementbyintegerle
...
