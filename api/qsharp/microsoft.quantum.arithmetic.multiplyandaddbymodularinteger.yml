### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplyandaddbymodularinteger
name: MultiplyAndAddByModularInteger
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: |-
  Performs a modular multiply-and-add by integer constants on a qubit register.

  Implements the map
  $$
  \begin{align}
  \ket{x} \ket{b} \mapsto \ket{x} \ket{(b + a \cdot x) \operatorname{mod} N}
  \end{align}
  $$
  for a given modulus $N$, constant multiplier $a$, and summand $y$.
remarks: |-
  - For the circuit diagram and explanation see Figure 6 on [Page 7
    of arXiv:quant-ph/0205095v3](https://arxiv.org/pdf/quant-ph/0205095v3.pdf#page=7)
  - This operation corresponds to CMULT(a)MOD(N) in
    [arXiv:quant-ph/0205095v3](https://arxiv.org/pdf/quant-ph/0205095v3.pdf)
syntax: 'operation MultiplyAndAddByModularInteger (constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian, summand : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian, summand : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: constMultiplier
    isPrimitive: true
    uid: Int
  - name: modulus
    summary: The modulus $N$ which addition and multiplication is taken with respect to.
    isPrimitive: true
    uid: Int
  - name: multiplier
    summary: |-
      A quantum register representing an unsigned integer whose value is to
      be added to each basis state label of `summand`.
    uid: microsoft.quantum.arithmetic.littleendian
  - name: summand
    summary: |-
      A quantum register representing an unsigned integer to use as the target
      for this operation.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.arithmetic.multiplyandaddphasebymodularinteger
...
