### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplyandaddphasebymodularinteger
name: MultiplyAndAddPhaseByModularInteger
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: |-
  The same as MultiplyAndAddByModularInteger, but assumes that the summand encodes
  integers in QFT basis.
remarks: |-
  Assumes that `phaseSummand` has the highest bit set to 0.
  Also assumes that the value of `phaseSummand` is less than $N$.
syntax: 'operation MultiplyAndAddPhaseByModularInteger (constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian, phaseSummand : Microsoft.Quantum.Arithmetic.PhaseLittleEndian) : Unit'
input:
  content: '(constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian, phaseSummand : Microsoft.Quantum.Arithmetic.PhaseLittleEndian)'
  types:
  - name: constMultiplier
    isPrimitive: true
    uid: Int
  - name: modulus
    summary: The modulus $N$ which addition and multiplication is taken with respect to.
    isPrimitive: true
    uid: Int
  - name: multiplier
    summary: |-
      A quantum register representing an unsigned integer whose value is to
      be added to each basis state label of `summand`.
    uid: microsoft.quantum.arithmetic.littleendian
  - name: phaseSummand
    summary: |-
      A quantum register representing an unsigned integer to use as the target
      for this operation.
    uid: microsoft.quantum.arithmetic.phaselittleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.arithmetic.multiplyandaddbymodularinteger
...
