### YamlMime:QSharpType
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.

uid: microsoft.quantum.arithmetic.multiplyi
name: MultiplyI
type: operation
namespace: microsoft.quantum.arithmetic
summary: |-
  Multiply integer `xs` by integer `ys` and store the result in `result`,
  which must be zero initially.
remarks: |-
  Uses a standard shift-and-add approach to implement the multiplication.
  The controlled version was improved by copying out $x_i$ to an ancilla
  qubit conditioned on the control qubits, and then controlling the
  addition on the ancilla qubit.
syntax: 'operation MultiplyI (xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, result : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, result : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: xs
    summary: $n$-bit multiplicand (LittleEndian)
    uid: microsoft.quantum.arithmetic.littleendian
  - name: ys
    summary: $n$-bit multiplier (LittleEndian)
    uid: microsoft.quantum.arithmetic.littleendian
  - name: result
    summary: $2n$-bit result (LittleEndian), must be in state $\ket{0}$ initially.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
...
