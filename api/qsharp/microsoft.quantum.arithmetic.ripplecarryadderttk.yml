### YamlMime:QSharpType
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.

uid: microsoft.quantum.arithmetic.ripplecarryadderttk
name: RippleCarryAdderTTK
type: operation
namespace: microsoft.quantum.arithmetic
summary: |-
  Reversible, in-place ripple-carry addition of two integers.
  Given two $n$-bit integers encoded in LittleEndian registers `xs` and `ys`,
  and a qubit carry, the operation computes the sum of the two integers
  where the $n$ least significant bits of the result are held in `ys` and
  the carry out bit is xored to the qubit `carry`.
remarks: |-
  This operation has the same functionality as RippleCarryAdderD and,
  RippleCarryAdderCDKM but does not use any ancilla qubits.
syntax: 'operation RippleCarryAdderTTK (xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, carry : Qubit) : Unit'
references: |-
  - Yasuhiro Takahashi, Seiichiro Tani, Noboru Kunihiro: "Quantum
    Addition Circuits and Unbounded Fan-Out", Quantum Information and
    Computation, Vol. 10, 2010.
    https://arxiv.org/abs/0910.2530
input:
  content: '(xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, carry : Qubit)'
  types:
  - name: xs
    summary: LittleEndian qubit register encoding the first integer summand.
    uid: microsoft.quantum.arithmetic.littleendian
  - name: ys
    summary: |-
      LittleEndian qubit register encoding the second integer summand, is
      modified to hold the $n$ least significant bits of the sum.
    uid: microsoft.quantum.arithmetic.littleendian
  - name: carry
    summary: Carry qubit, is xored with the most significant bit of the sum.
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
...
