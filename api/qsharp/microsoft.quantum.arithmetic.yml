### YamlMime:QSharpNamespace
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.
functions:
- {summary: Converts a `BigEndian` qubit register to a `LittleEndian` qubit register
    by reversing the qubit ordering., uid: Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian}
- {summary: 'If true, enables extra asserts that are expensive, but useful to debug
    the use of the arithmetic functions.', uid: Microsoft.Quantum.Arithmetic.ExtraArithmeticAssertionsEnabled}
- {summary: Assert that all fixed-point numbers in the provided array have identical
    point positions and qubit numbers., uid: Microsoft.Quantum.Arithmetic.IdenticalFormatFactFxP}
- {summary: 'Assert that all fixed-point numbers in the provided array have identical
    point positions when counting from the least- significant bit. I.e., number of
    bits minus point position must be constant for all fixed-point numbers in the
    array.', uid: Microsoft.Quantum.Arithmetic.IdenticalPointPosFactFxP}
- {summary: Converts a `LittleEndian` qubit register to a `BigEndian` qubit register
    by reversing the qubit ordering., uid: Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian}
- {summary: 'Given an operation that takes a big-endian input, returns a new operation
    that takes a little-endian input.', uid: Microsoft.Quantum.Arithmetic.ReversedOpBE}
- {summary: 'Given an operation that takes a big-endian input, returns a new operation
    that takes a little-endian input.', uid: Microsoft.Quantum.Arithmetic.ReversedOpBEA}
- {summary: 'Given an operation that takes a big-endian input, returns a new operation
    that takes a little-endian input.', uid: Microsoft.Quantum.Arithmetic.ReversedOpBEC}
- {summary: 'Given an operation that takes a big-endian input, returns a new operation
    that takes a little-endian input.', uid: Microsoft.Quantum.Arithmetic.ReversedOpBECA}
- {summary: 'Given an operation that takes a little-endian input, returns a new operation
    that takes a big-endian input.', uid: Microsoft.Quantum.Arithmetic.ReversedOpLE}
- {summary: 'Given an operation that takes a little-endian input, returns a new operation
    that takes a big-endian input.', uid: Microsoft.Quantum.Arithmetic.ReversedOpLEA}
- {summary: 'Given an operation that takes a little-endian input, returns a new operation
    that takes a big-endian input.', uid: Microsoft.Quantum.Arithmetic.ReversedOpLEC}
- {summary: 'Given an operation that takes a little-endian input, returns a new operation
    that takes a big-endian input.', uid: Microsoft.Quantum.Arithmetic.ReversedOpLECA}
name: Microsoft.Quantum.Arithmetic
newtypes:
- {summary: Register that encodes an unsigned integer in big-endian order. The qubit
    with index `0` encodes the highest bit of an unsigned integer., uid: Microsoft.Quantum.Arithmetic.BigEndian}
- {summary: 'Represents a register of qubits encoding a fixed-point number. Consists
    of an integer that is equal to the number of qubits to the left of the binary
    point, i.e., qubits of weight greater than or equal to 1, and a quantum register.',
  uid: Microsoft.Quantum.Arithmetic.FixedPoint}
- {summary: Register that encodes an unsigned integer in little-endian order. The
    qubit with index `0` encodes the lowest bit of an unsigned integer., uid: Microsoft.Quantum.Arithmetic.LittleEndian}
- {summary: "Little-endian unsigned integers in QFT basis.\nFor example, if $\\ket{x}$\
    \ is the little-endian encoding of the integer $x$ in the computational basis,\
    \ then $\\operatorname{QFTLE} \\ket{x}$ is the encoding of $x$ in the QFT basis.",
  uid: Microsoft.Quantum.Arithmetic.PhaseLittleEndian}
- {summary: Type of a signed integer stored in little endian (see LittleEndian).,
  uid: Microsoft.Quantum.Arithmetic.SignedLittleEndian}
operations:
- {summary: Adds a classical constant to a quantum fixed-point number., uid: Microsoft.Quantum.Arithmetic.AddConstantFxP}
- {summary: Adds two fixed-point numbers stored in quantum registers., uid: Microsoft.Quantum.Arithmetic.AddFxP}
- {summary: 'Automatically chooses between addition with carry and without, depending
    on the register size of `ys`.', uid: Microsoft.Quantum.Arithmetic.AddI}
- {summary: Implements the inner addition function for the operation RippleCarryAdderTTK.
    This is the inner operation that is conjugated with the outer operation to construct
    the full adder., uid: Microsoft.Quantum.Arithmetic.ApplyInnerTTKAdder}
- {summary: Implements the inner addition function for the operation RippleCarryAdderNoCarryTTK.
    This is the inner operation that is conjugated with the outer operation to construct
    the full adder., uid: Microsoft.Quantum.Arithmetic.ApplyInnerTTKAdderWithoutCarry}
- {summary: Applies an operation that takes a <xref:microsoft.quantum.arithmetic.phaselittleendian>
    register as input on a target register of type <xref:microsoft.quantum.arithmetic.littleendian>.,
  uid: Microsoft.Quantum.Arithmetic.ApplyLEOperationOnPhaseLE}
- {summary: Applies an operation that takes a <xref:microsoft.quantum.arithmetic.phaselittleendian>
    register as input on a target register of type <xref:microsoft.quantum.arithmetic.littleendian>.,
  uid: Microsoft.Quantum.Arithmetic.ApplyLEOperationOnPhaseLEA}
- {summary: Applies an operation that takes a <xref:microsoft.quantum.arithmetic.phaselittleendian>
    register as input on a target register of type <xref:microsoft.quantum.arithmetic.littleendian>.,
  uid: Microsoft.Quantum.Arithmetic.ApplyLEOperationOnPhaseLEC}
- {summary: Applies an operation that takes a <xref:microsoft.quantum.arithmetic.phaselittleendian>
    register as input on a target register of type <xref:microsoft.quantum.arithmetic.littleendian>.,
  uid: Microsoft.Quantum.Arithmetic.ApplyLEOperationOnPhaseLECA}
- {summary: Applies the three-qubit majority operation in-place on a register of qubits.,
  uid: Microsoft.Quantum.Arithmetic.ApplyMajorityInPlace}
- {summary: 'Reversible, in-place ripple-carry operation that is used in the integer
    addition operation RippleCarryAdderCDKM below. Given two qubit registers `xs`
    and `ys` of the same length, the operation applies a ripple carry sequence of
    CNOT and CCNOT gates with qubits in `xs` and `ys` as the controls and qubits in
    `xs` as the targets.', uid: Microsoft.Quantum.Arithmetic.ApplyOuterCDKMAdder}
- {summary: Implements the outer operation for RippleCarryAdderTTK to conjugate the
    inner operation to construct the full adder., uid: Microsoft.Quantum.Arithmetic.ApplyOuterTTKAdder}
- {summary: Applies an operation that takes a <xref:microsoft.quantum.arithmetic.littleendian>
    register as input on a target register of type <xref:microsoft.quantum.arithmetic.phaselittleendian>.,
  uid: Microsoft.Quantum.Arithmetic.ApplyPhaseLEOperationOnLE}
- {summary: '', uid: Microsoft.Quantum.Arithmetic.ApplyPhaseLEOperationOnLEA}
- {summary: '', uid: Microsoft.Quantum.Arithmetic.ApplyPhaseLEOperationOnLEC}
- {summary: '', uid: Microsoft.Quantum.Arithmetic.ApplyPhaseLEOperationOnLECA}
- {summary: Applies an operation that takes big-endian input to a register encoding
    an unsigned integer using little-endian format., uid: Microsoft.Quantum.Arithmetic.ApplyReversedOpBE}
- {summary: Applies an operation that takes big-endian input to a register encoding
    an unsigned integer using little-endian format., uid: Microsoft.Quantum.Arithmetic.ApplyReversedOpBEA}
- {summary: Applies an operation that takes big-endian input to a register encoding
    an unsigned integer using little-endian format., uid: Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC}
- {summary: Applies an operation that takes big-endian input to a register encoding
    an unsigned integer using little-endian format., uid: Microsoft.Quantum.Arithmetic.ApplyReversedOpBECA}
- {summary: Applies an operation that takes little-endian input to a register encoding
    an unsigned integer using big-endian format., uid: Microsoft.Quantum.Arithmetic.ApplyReversedOpLE}
- {summary: Applies an operation that takes little-endian input to a register encoding
    an unsigned integer using big-endian format., uid: Microsoft.Quantum.Arithmetic.ApplyReversedOpLEA}
- {summary: Applies an operation that takes little-endian input to a register encoding
    an unsigned integer using big-endian format., uid: Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC}
- {summary: Applies an operation that takes little-endian input to a register encoding
    an unsigned integer using big-endian format., uid: Microsoft.Quantum.Arithmetic.ApplyReversedOpLECA}
- {summary: Applies a bitwise-XOR operation between a classical integer and an integer
    represented by a register of qubits., uid: Microsoft.Quantum.Arithmetic.ApplyXorInPlace}
- {summary: 'Helper function to assert that a quantum fixed-point number is initialized
    to zero, i.e., all qubits are in state $\ket{0}$.', uid: Microsoft.Quantum.Arithmetic.AssertAllZeroFxP}
- {summary: Asserts that the most significant qubit of a qubit register representing
    an unsigned integer is in a particular state., uid: Microsoft.Quantum.Arithmetic.AssertMostSignificantBit}
- {summary: Asserts that the `number` encoded in PhaseLittleEndian is less than `value`.,
  uid: Microsoft.Quantum.Arithmetic.AssertPhaseLessThan}
- {summary: Asserts that the probability of a specific state of a quantum register
    has the expected value., uid: Microsoft.Quantum.Arithmetic.AssertProbInt}
- {summary: 'Implements a reversible carry gate. Given a carry-in bit encoded in qubit
    `carryIn` and two summand bits encoded in `summand1` and `summand2`, computes
    the bitwise xor of `carryIn`, `summand1` and `summand2` in the qubit `summand2`
    and the carry-out is xored to the qubit `carryOut`.', uid: Microsoft.Quantum.Arithmetic.Carry}
- {summary: 'The core operation in the RippleCarryAdderCDKM, used with the above ApplyOuterCDKMAdder
    operation, i.e. conjugated with this operation to obtain the inner operation of
    the RippleCarryAdderCDKM. This operation computes the carry out qubit and applies
    a sequence of NOT gates on part of the input `ys`.', uid: Microsoft.Quantum.Arithmetic.CarryOutCoreCDKM}
- {summary: 'Wrapper for integer comparison: `result = x > y`.', uid: Microsoft.Quantum.Arithmetic.CompareGTI}
- {summary: 'Wrapper for signed integer comparison: `result = xs > ys`.', uid: Microsoft.Quantum.Arithmetic.CompareGTSI}
- {summary: 'Compares two fixed-point numbers stored in quantum registers, and controls
    a flip on the result.', uid: Microsoft.Quantum.Arithmetic.CompareGreaterThanFxP}
- {summary: 'This operation tests if an integer represented by a register of qubits
    is greater than another integer, applying an XOR of the result onto an output
    qubit.', uid: Microsoft.Quantum.Arithmetic.CompareUsingRippleCarry}
- {summary: Computes $1/x$ for a fixed-point number $x$., uid: Microsoft.Quantum.Arithmetic.ComputeReciprocalFxP}
- {summary: 'Computes the reciprocal 1/x for an unsigned integer x using integer division.
    The result, interpreted as an integer, will be `floor(2^(2*n-1) / x)`.', uid: Microsoft.Quantum.Arithmetic.ComputeReciprocalI}
- {summary: Copies the most significant bit of a qubit register `from` representing
    an unsigned integer into the qubit `target`., uid: Microsoft.Quantum.Arithmetic.CopyMostSignificantBit}
- {summary: Divides two quantum integers., uid: Microsoft.Quantum.Arithmetic.DivideI}
- {summary: Evaluates an even polynomial in a fixed-point representation., uid: Microsoft.Quantum.Arithmetic.EvaluateEvenPolynomialFxP}
- {summary: Evaluates an odd polynomial in a fixed-point representation., uid: Microsoft.Quantum.Arithmetic.EvaluateOddPolynomialFxP}
- {summary: Evaluates a polynomial in a fixed-point representation., uid: Microsoft.Quantum.Arithmetic.EvaluatePolynomialFxP}
- {summary: 'Applies a greater-than comparison between two integers encoded into qubit
    registers, flipping a target qubit based on the result of the comparison.', uid: Microsoft.Quantum.Arithmetic.GreaterThan}
- {summary: 'Increments an unsigned quantum register by a classical integer, using
    phase rotations.', uid: Microsoft.Quantum.Arithmetic.IncrementByInteger}
- {summary: Performs a modular increment of a qubit register by an integer constant.,
  uid: Microsoft.Quantum.Arithmetic.IncrementByModularInteger}
- {summary: 'Increments an unsigned quantum register by a classical integer, using
    phase rotations.', uid: Microsoft.Quantum.Arithmetic.IncrementPhaseByInteger}
- {summary: Performs a modular increment of a qubit register by an integer constant.,
  uid: Microsoft.Quantum.Arithmetic.IncrementPhaseByModularInteger}
- {summary: Inverts a given integer modulo 2's complement., uid: Microsoft.Quantum.Arithmetic.Invert2sSI}
- {summary: This applies the in-place majority operation to 3 qubits., uid: Microsoft.Quantum.Arithmetic.MAJ}
- {summary: 'Measure a fixed-point number, returns its value as Double, and resets
    all the register to zero.', uid: Microsoft.Quantum.Arithmetic.MeasureFxP}
- {summary: 'Measures the content of a quantum register and converts it to an integer.
    The measurement is performed with respect to the standard computational basis,
    i.e., the eigenbasis of `PauliZ`.', uid: Microsoft.Quantum.Arithmetic.MeasureInteger}
- {summary: Performs a modular multiply-and-add by integer constants on a qubit register.,
  uid: Microsoft.Quantum.Arithmetic.MultiplyAndAddByModularInteger}
- {summary: 'The same as MultiplyAndAddByModularInteger, but assumes that the summand
    encodes integers in QFT basis.', uid: Microsoft.Quantum.Arithmetic.MultiplyAndAddPhaseByModularInteger}
- {summary: Performs modular multiplication by an integer constant on a qubit register.,
  uid: Microsoft.Quantum.Arithmetic.MultiplyByModularInteger}
- {summary: Multiplies two fixed-point numbers in quantum registers., uid: Microsoft.Quantum.Arithmetic.MultiplyFxP}
- {summary: 'Multiply integer `xs` by integer `ys` and store the result in `result`,
    which must be zero initially.', uid: Microsoft.Quantum.Arithmetic.MultiplyI}
- {summary: 'Multiply signed integer `xs` by signed integer `ys` and store the result
    in `result`, which must be zero initially.', uid: Microsoft.Quantum.Arithmetic.MultiplySI}
- {summary: Initialize a quantum fixed-point number to a classical constant., uid: Microsoft.Quantum.Arithmetic.PrepareFxP}
- {summary: Reflects a quantum register about a given classical integer., uid: Microsoft.Quantum.Arithmetic.ReflectAboutInteger}
- {summary: 'Reversible, in-place ripple-carry addition of two integers.', uid: Microsoft.Quantum.Arithmetic.RippleCarryAdderCDKM}
- {summary: 'Reversible, in-place ripple-carry addition of two integers. Given two
    $n$-bit integers encoded in LittleEndian registers `xs` and `ys`, and a qubit
    carry, the operation computes the sum of the two integers where the $n$ least
    significant bits of the result are held in `ys` and the carry out bit is xored
    to the qubit `carry`.', uid: Microsoft.Quantum.Arithmetic.RippleCarryAdderD}
- {summary: 'Reversible, in-place ripple-carry addition of two integers without carry
    out.', uid: Microsoft.Quantum.Arithmetic.RippleCarryAdderNoCarryTTK}
- {summary: 'Reversible, in-place ripple-carry addition of two integers. Given two
    $n$-bit integers encoded in LittleEndian registers `xs` and `ys`, and a qubit
    carry, the operation computes the sum of the two integers where the $n$ least
    significant bits of the result are held in `ys` and the carry out bit is xored
    to the qubit `carry`.', uid: Microsoft.Quantum.Arithmetic.RippleCarryAdderTTK}
- {summary: Squares a fixed-point number., uid: Microsoft.Quantum.Arithmetic.SquareFxP}
- {summary: 'Computes the square of the integer `xs` into `result`, which must be
    zero initially.', uid: Microsoft.Quantum.Arithmetic.SquareI}
- {summary: 'Square signed integer `xs` and store the result in `result`, which must
    be zero initially.', uid: Microsoft.Quantum.Arithmetic.SquareSI}
- {summary: 'Implements a reversible sum gate. Given a carry-in bit encoded in qubit
    `carryIn` and two summand bits encoded in `summand1` and `summand2`, computes
    the bitwise xor of `carryIn`, `summand1` and `summand2` in the qubit `summand2`.',
  uid: Microsoft.Quantum.Arithmetic.Sum}
summary: ''
uid: Microsoft.Quantum.Arithmetic
