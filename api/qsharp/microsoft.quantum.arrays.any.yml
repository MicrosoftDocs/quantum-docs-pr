### YamlMime:QSharpType
uid: microsoft.quantum.arrays.any
name: Any
type: function
namespace: Microsoft.Quantum.Arrays
summary: |-
  Given an array and a predicate that is defined
  for the elements of the array, checks if at least one element of
  the array satisfies the predicate.
remarks: |-
  The function is defined for generic types, i.e., whenever we have
  an array `'T[]` and a function `predicate: 'T -> Bool` we can produce
  a `Bool` value that indicates if some element satisfies `predicate`.
examples: |-
  ```qsharp
  open Microsoft.Quantum.Arrays;
  open Microsoft.Quantum.Logical;

  function IsThreePresent() : Bool {
      let arrayOfInts = [1, 2, 3, 4, 5];
      let is3Present = IsNumberPresentInArray(3, arrayOfInts);
      return is3Present;
  }

  function IsNumberPresentInArray(n : Int, array : Int[]) : Bool {
      return Any(EqualI(_, n), array);
  }
  ```
syntax: "function Any (predicate : ('T -> Bool), array : 'T[]) : Bool"
input:
  content: "(predicate : ('T -> Bool), array : 'T[])"
  types:
  - name: predicate
    summary: A function from `'T` to `Bool` that is used to check elements.
    isFunction: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Bool
  - name: array
    summary: An array of elements over `'T`.
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: Bool
  types:
  - summary: A `Bool` value of the OR function of the predicate applied to all elements.
    isPrimitive: true
    uid: Bool
typeParameters:
- uid: "'T"
  summary: The type of `array` elements.
...
