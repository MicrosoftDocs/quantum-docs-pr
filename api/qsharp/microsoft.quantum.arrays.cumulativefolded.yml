### YamlMime:QSharpType
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.

uid: microsoft.quantum.arrays.cumulativefolded
name: CumulativeFolded
type: function
namespace: microsoft.quantum.arrays
summary: |-
  Combines Mapped and Fold into a single function

  This function iterates the `fn` function through the array, starting from
  an initial state `state` and returns all intermediate values, not including
  the inital state.
examples: |-
  ```Q#
  // same as sums = [1, 3, 6, 10, 15]
  let sums = CumulativeFolded(PlusI, 0, SequenceI(1, 5));
  ```
syntax: "function CumulativeFolded (fn : (('State, 'T) -> 'State), state : 'State, array : 'T[]) : 'State[]"
input:
  content: "(fn : (('State, 'T) -> 'State), state : 'State, array : 'T[])"
  types:
  - name: fn
    summary: A function to be folded over the array
    isFunction: true
    input:
      types:
      - uid: "'State"
        isLocal: true
      - uid: "'T"
        isLocal: true
    output:
      types:
      - uid: "'State"
        isLocal: true
  - name: state
    summary: The initial state to be folded
    uid: "'State"
    isLocal: true
  - name: array
    summary: An array of values to be folded over
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: "'State[]"
  types:
  - summary: |-
      All intermediate states, including the final state, but not the initial state.
      The length of the output array is of the same length as `array`.
    isArray: true
    uid: "'State"
    isLocal: true
typeParameters:
- uid: "'State"
  summary: |-
    The type of states that the `fn` function operates on, i.e., accepts as its first
    input and returns.
- uid: "'T"
  summary: The type of `array` elements.
...
