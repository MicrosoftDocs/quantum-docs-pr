### YamlMime:QSharpType
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.

uid: microsoft.quantum.arrays.filtered
name: Filtered
type: function
namespace: microsoft.quantum.arrays
summary: |-
  Given an array and a predicate that is defined
  for the elements of the array, returns an array that consists of
  those elements that satisfy the predicate.
remarks: |-
  The function is defined for generic types, i.e., whenever we have
  an array `'T[]` and a predicate `'T -> Bool` we can filter elements.
examples: |-
  The following code demonstrates the "Filtered" function.
  A predicate is defined using the @"microsoft.quantum.logical.greaterthani" function:

  ```qsharp
  open Microsoft.Quantum.Arrays;
  open Microsoft.Quantum.Logical;

  function FilteredDemo() : Unit {
     let predicate = GreaterThanI(_, 5);
     let filteredArray = Filtered(predicate, [2, 5, 9, 1, 8]);
     Message($"{filteredArray}");
  }
  ```

  The outcome one should expect from this example will be an array of numbers greater than 5.
syntax: "function Filtered (predicate : ('T -> Bool), array : 'T[]) : 'T[]"
input:
  content: "(predicate : ('T -> Bool), array : 'T[])"
  types:
  - name: predicate
    summary: A function from `'T` to Boolean that is used to filter elements.
    isFunction: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Bool
  - name: array
    summary: An array of elements over `'T`.
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: "'T[]"
  types:
  - summary: An array `'T[]` of elements that satisfy the predicate.
    isArray: true
    uid: "'T"
    isLocal: true
typeParameters:
- uid: "'T"
  summary: The type of `array` elements.
...
