### YamlMime:QSharpType
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.

uid: microsoft.quantum.arrays.sorted
name: Sorted
type: function
namespace: microsoft.quantum.arrays
summary: |-
  Given an array, returns the elements of that array sorted by a given
  comparison function.
remarks: |-
  The function `comparison` is assumed to be transitive, such that
  if `comparison(a, b)` and `comparison(b, c)`, then `comparison(a, c)`
  is assumed. If this property does not hold, then the output of this
  function may be incorrect.

  As this is a function, the results are completely determinstic, even
  when two elements are considered equal under `comparison`;
  that is, when `comparison(a, b)` and `comparison(b, a)` are both `true`.
  In particular, the sort performed by this function is guaranteed to be
  stable, so that if two elements `a` and `b` occur in that order within
  `array` and are considered equal under `comparison`, then `a` will also
  appear before `b` in the output.

  For example:

  ```Q#
  function LastDigitLessThanOrEqual(left : Int, right : Int) : Bool {
      return LessThanOrEqualI(
          left % 10, right % 10
      );
  }

  function SortedByLastDigit() : Int[] {
      return Sorted(LastDigitLessThanOrEqual, [3, 37, 11, 17]);
  }
  // returns [11, 3, 37, 17].
  ```
examples: |-
  The following snippet sorts an array of integers to occur in ascending
  order:

  ```Q#
  let sortedArray = Sorted(LessThanOrEqualI, [3, 17, 11, -201, -11]);
  ```
syntax: "function Sorted (comparison : (('T, 'T) -> Bool), array : 'T[]) : 'T[]"
input:
  content: "(comparison : (('T, 'T) -> Bool), array : 'T[])"
  types:
  - name: comparison
    summary: |-
      A function that compares two elements such that `a` is considered to
      be less than or equal to `b` if `comparison(a, b)` is `true`.
    isFunction: true
    input:
      types:
      - uid: "'T"
        isLocal: true
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Bool
  - name: array
    summary: The array to be sorted.
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: "'T[]"
  types:
  - isArray: true
    uid: "'T"
    isLocal: true
typeParameters:
- uid: "'T"
  summary: The type of each element of `array`.
...
