### YamlMime:QSharpType
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.

uid: microsoft.quantum.arrays.unique
name: Unique
type: function
namespace: microsoft.quantum.arrays
summary: |-
  Returns a new array that has no equal adjacent elements.

  Given some array of elements and a function to test equality, this
  function returns a new array in which the relative order of elements
  is kept, but all adjacent elements which are equal are filtered to
  just a single element.
remarks: |-
  If there are multiple elements that are equal but not next to each other,
  there will be multiple occurrences in the output array.  Use this function
  together with `Sorted` to get an array with overall unique elements.
examples: |-
  ```Q#
  let unique1 = Unique(EqualI, [1, 1, 3, 3, 2, 5, 5, 5, 7]);
  // same as [1, 3, 2, 5, 7]
  let unique2 = Unique(EqualI, [2, 2, 1, 1, 2, 2, 1, 1]);
  // same as [2, 1, 2, 1];
  let unique3 = Unique(EqualI, Sorted(LessThanOrEqualI, [2, 2, 1, 1, 2, 2, 1, 1]));
  // same as [1, 2];
  ```
syntax: "function Unique (equal : (('T, 'T) -> Bool), array : 'T[]) : 'T[]"
input:
  content: "(equal : (('T, 'T) -> Bool), array : 'T[])"
  types:
  - name: equal
    summary: |-
      A function that compares two elements such that `a` is considered to
      be equal to `b` if `equal(a, b)` is `true`.
    isFunction: true
    input:
      types:
      - uid: "'T"
        isLocal: true
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Bool
  - name: array
    summary: The array to be filtered for unique elements.
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: "'T[]"
  types:
  - summary: Array with no equal adjacent elements.
    isArray: true
    uid: "'T"
    isLocal: true
typeParameters:
- uid: "'T"
  summary: The type of each element of `array`.
...
