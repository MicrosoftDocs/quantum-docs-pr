### YamlMime:QSharpNamespace
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.
functions:
- {summary: 'Given an array and a predicate that is defined for the elements of the
    array, and checks if all elements of the array satisfy the predicate.', uid: Microsoft.Quantum.Arrays.All}
- {summary: 'Given an array and a predicate that is defined for the elements of the
    array, checks if at least one element of the array satisfies the predicate.',
  uid: Microsoft.Quantum.Arrays.Any}
- {summary: Splits an array into multiple parts of equal length., uid: Microsoft.Quantum.Arrays.Chunks}
- {summary: Extracts a column from a matrix., uid: Microsoft.Quantum.Arrays.ColumnAt}
- {summary: This function does not check for matrix shape, uid: Microsoft.Quantum.Arrays.ColumnAtUnchecked}
- {summary: Creates an array of given length with all elements equal to given value.,
  uid: Microsoft.Quantum.Arrays.ConstantArray}
- {summary: 'Given an array and a predicate that is defined for the elements of the
    array, returns the number of elements an array that consists of those elements
    that satisfy the predicate.', uid: Microsoft.Quantum.Arrays.Count}
- {summary: Combines Mapped and Fold into a single function, uid: Microsoft.Quantum.Arrays.CumulativeFolded}
- {summary: Returns an array of diagonal elements of a 2-dimensional array, uid: Microsoft.Quantum.Arrays.Diagonal}
- {summary: Returns the at the given index of an array., uid: Microsoft.Quantum.Arrays.ElementAt}
- {summary: '', uid: Microsoft.Quantum.Arrays.ElementAtDiagonal}
- {summary: Returns the array's elements at a given range of indices., uid: Microsoft.Quantum.Arrays.ElementsAt}
- {summary: Returns the empty array of a given type., uid: Microsoft.Quantum.Arrays.EmptyArray}
- {summary: 'Given an array, returns a new array containing elements of the original
    array along with the indices of each element.', uid: Microsoft.Quantum.Arrays.Enumerated}
- {summary: 'Given two arrays of the same type and a predicate that is defined for
    pairs of elements of the arrays, checks whether the arrays are equal.', uid: Microsoft.Quantum.Arrays.EqualA}
- {summary: 'Returns an array containing the elements of another array, excluding
    elements at a given list of indices.', uid: Microsoft.Quantum.Arrays.Exclude}
- {summary: 'Returns an array containing the elements of another array, excluding
    elements at a given list of indices.', uid: Microsoft.Quantum.Arrays.Excluding}
- {summary: 'Given an array and a predicate that is defined for the elements of the
    array, returns an array that consists of those elements that satisfy the predicate.',
  uid: Microsoft.Quantum.Arrays.Filtered}
- {summary: 'Given an array and a function that maps an array element to some output
    array, returns the concatenated output arrays for each array element.', uid: Microsoft.Quantum.Arrays.FlatMapped}
- {summary: 'Given an array of arrays, returns the concatenation of all arrays.',
  uid: Microsoft.Quantum.Arrays.Flattened}
- {summary: 'Iterates a function `f` through an array `array`, returning `f(f(f(initialState,
    array[0]), array[1]), ...)`.', uid: Microsoft.Quantum.Arrays.Fold}
- {summary: Returns the first element of the array., uid: Microsoft.Quantum.Arrays.Head}
- {summary: Returns a tuple of first and all remaining elements of the array., uid: Microsoft.Quantum.Arrays.HeadAndRest}
- {summary: '', uid: Microsoft.Quantum.Arrays.Identity}
- {summary: 'Returns the first index of the first element in an array that satisfies
    a given predicate. If no such element exists, returns -1.', uid: Microsoft.Quantum.Arrays.IndexOf}
- {summary: 'Given an array, returns a range over the indices of that array, suitable
    for use in a for loop.', uid: Microsoft.Quantum.Arrays.IndexRange}
- {summary: Interleaves two arrays of (almost) same size., uid: Microsoft.Quantum.Arrays.Interleaved}
- {summary: Returns true if and only if an array is empty., uid: Microsoft.Quantum.Arrays.IsEmpty}
- {summary: Outputs true if and only if a given array represents a permutation., uid: Microsoft.Quantum.Arrays.IsPermutation}
- {summary: 'Given an array, returns whether that array is sorted as defined by a
    given comparison function.', uid: Microsoft.Quantum.Arrays.IsSorted}
- {summary: '', uid: Microsoft.Quantum.Arrays.IsValuePresent}
- {summary: 'Given an array, returns a function which returns elements of that array.',
  uid: Microsoft.Quantum.Arrays.LookupFunction}
- {summary: 'Given an array and a function that is defined for the elements of the
    array, returns a new array that consists of the images of the original array under
    the function.', uid: Microsoft.Quantum.Arrays.Mapped}
- {summary: 'Given an array and a function that is defined for the indexed elements
    of the array, returns a new array that consists of the images of the original
    array under the function.', uid: Microsoft.Quantum.Arrays.MappedByIndex}
- {summary: 'Given a range and a function that takes an integer as input, returns
    a new array that consists of the images of the range values under the function.',
  uid: Microsoft.Quantum.Arrays.MappedOverRange}
- {summary: 'Given two sorted arrays, returns a single array containing the elements
    of both in sorted order. Used internally by merge sort.', uid: Microsoft.Quantum.Arrays.Merged}
- {summary: Creates an array that is equal to an input array except that the last
    array element is dropped., uid: Microsoft.Quantum.Arrays.Most}
- {summary: Returns a tuple of all but one and the last element of the array., uid: Microsoft.Quantum.Arrays.MostAndTail}
- {summary: Returns an array padded at with specified values up to a specified length.,
  uid: Microsoft.Quantum.Arrays.Padded}
- {summary: Splits an array into multiple parts., uid: Microsoft.Quantum.Arrays.Partitioned}
- {summary: '', uid: Microsoft.Quantum.Arrays.Prefix}
- {summary: 'Given an array, returns all its prefixes.', uid: Microsoft.Quantum.Arrays.Prefixes}
- {summary: Represents a condition that a 2-dimensional array has a rectangular shape,
  uid: Microsoft.Quantum.Arrays.RectangularArrayFact}
- {summary: Creates an array that is equal to an input array except that the first
    array element is dropped., uid: Microsoft.Quantum.Arrays.Rest}
- {summary: Create an array that contains the same elements as an input array but
    in Reversed order., uid: Microsoft.Quantum.Arrays.Reversed}
- {summary: Get an array of integers in a given interval., uid: Microsoft.Quantum.Arrays.SequenceI}
- {summary: Get an array of integers in a given interval., uid: Microsoft.Quantum.Arrays.SequenceL}
- {summary: 'Given an array, returns the elements of that array sorted by a given
    comparison function.', uid: Microsoft.Quantum.Arrays.Sorted}
- {summary: Represents a condition that a 2-dimensional array has a square shape,
  uid: Microsoft.Quantum.Arrays.SquareArrayFact}
- {summary: Takes an array and a list of locations and produces a new array formed
    from the elements of the original array that match the given locations., uid: Microsoft.Quantum.Arrays.Subarray}
- {summary: Applies a swap of two elements in an array., uid: Microsoft.Quantum.Arrays.Swapped}
- {summary: Returns the last element of the array., uid: Microsoft.Quantum.Arrays.Tail}
- {summary: Returns the transpose of a matrix represented as an array of arrays.,
  uid: Microsoft.Quantum.Arrays.Transposed}
- {summary: Turns a list of 2-tuples into a nested array., uid: Microsoft.Quantum.Arrays.TupleArrayAsNestedArray}
- {summary: Returns a new array that has no equal adjacent elements., uid: Microsoft.Quantum.Arrays.Unique}
- {summary: 'Given an array of 2-tuples, returns a tuple of two arrays, each containing
    the elements of the tuples of the input array.', uid: Microsoft.Quantum.Arrays.Unzipped}
- {summary: 'Given a predicate and an array, returns the indices of that array where
    the predicate is true.', uid: Microsoft.Quantum.Arrays.Where}
- {summary: Returns all consecutive subarrays of length `size`., uid: Microsoft.Quantum.Arrays.Windows}
- {summary: "> [!WARNING]\n> Zip has been deprecated. Please use <xref:Microsoft.Quantum.Arrays.Zipped>\
    \ instead.\n\nGiven two arrays, returns a new array of pairs such that each pair\
    \ contains an element from each original array.", uid: Microsoft.Quantum.Arrays.Zip}
- {summary: "> [!WARNING]\n> Zip3 has been deprecated. Please use <xref:Microsoft.Quantum.Arrays.Zipped3>\
    \ instead.\n\nGiven three arrays, returns a new array of 3-tuples such that each\
    \ 3-tuple contains an element from each original array.", uid: Microsoft.Quantum.Arrays.Zip3}
- {summary: "> [!WARNING]\n> Zip4 has been deprecated. Please use <xref:Microsoft.Quantum.Arrays.Zipped4>\
    \ instead.\n\nGiven four arrays, returns a new array of 4-tuples such that each\
    \ 4-tuple contains an element from each original array.", uid: Microsoft.Quantum.Arrays.Zip4}
- {summary: 'Given two arrays, returns a new array of pairs such that each pair contains
    an element from each original array.', uid: Microsoft.Quantum.Arrays.Zipped}
- {summary: 'Given three arrays, returns a new array of 3-tuples such that each 3-tuple
    contains an element from each original array.', uid: Microsoft.Quantum.Arrays.Zipped3}
- {summary: 'Given four arrays, returns a new array of 4-tuples such that each 4-tuple
    contains an element from each original array.', uid: Microsoft.Quantum.Arrays.Zipped4}
- {summary: Returns the order elements in an array need to be swapped to produce an
    ordered array. Assumes swaps occur in place., uid: Microsoft.Quantum.Arrays._SwapOrderToPermuteArray}
name: Microsoft.Quantum.Arrays
newtypes: []
operations:
- {summary: 'Repeats an operation for a given number of samples, collecting its outputs
    in an array.', uid: Microsoft.Quantum.Arrays.DrawMany}
- {summary: 'Given an array and an operation that is defined for the elements of the
    array, returns a new array that consists of the images of the original array under
    the operation.', uid: Microsoft.Quantum.Arrays.ForEach}
summary: ''
uid: Microsoft.Quantum.Arrays
