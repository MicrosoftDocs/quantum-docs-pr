### YamlMime:QSharpType
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.

uid: microsoft.quantum.canon.applyifca
name: ApplyIfCA
type: operation
namespace: microsoft.quantum.canon
summary: |-
  Applies a unitary operation conditioned on a classical bit.

  Given an operation `op` and a bit value `bit`, applies `op` to the `target`
  if `bit` is `true`. If `false`, nothing happens to the `target`.
  The suffix `CA` indicates that the operation to be applied is unitary
  (controllable and adjointable).
examples: |-
  The following prepares a register of qubits into a computational basis
  state represented by a classical bit string given as an array of `Bool`
  values:

  ```Q#
  let bitstring = [true, false, true];
  using (register = Qubit(3)) {
      ApplyToEach(ApplyIf(X, _, _), Zipped(bitstring, register));
      // register should now be in the state |101âŸ©.
      ...
  }
  ```
syntax: "operation ApplyIfCA (op : ('T => Unit is Ctl + Adj), bit : Bool, target : 'T) : Unit"
input:
  content: "(op : ('T => Unit is Ctl + Adj), bit : Bool, target : 'T)"
  types:
  - name: op
    summary: An operation to be conditionally applied.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: bit
    summary: a boolean that controls whether op is applied or not.
    isPrimitive: true
    uid: Bool
  - name: target
    summary: The input to which the operation is applied.
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: The input type of the operation to be conditionally applied.
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.canon.applyifc
- microsoft.quantum.canon.applyifa
- microsoft.quantum.canon.applyifca
...
