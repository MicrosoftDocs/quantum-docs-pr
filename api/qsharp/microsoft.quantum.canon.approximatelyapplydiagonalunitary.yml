### YamlMime:QSharpType
uid: microsoft.quantum.canon.approximatelyapplydiagonalunitary
name: ApproximatelyApplyDiagonalUnitary
type: operation
namespace: Microsoft.Quantum.Canon
summary: |-
  Applies an array of complex phases to numeric basis states of a register
  of qubits, truncating small rotation angles according to a given
  tolerance.

  This operation implements a diagonal unitary that applies a complex phase
  $e^{i \theta_j}$ on the $n$-qubit number state $\ket{j}$.
  In particular, this operation can be represented by the unitary

  $$
  \begin{align}
  U = \sum^{2^n-1}_{j=0}e^{i\theta_j}\ket{j}\bra{j}.
  \end{align}
  $$
remarks: |-
  `coefficients` will be padded with elements $\theta_j = 0.0$ if
  fewer than $2^n$ are specified.
syntax: 'operation ApproximatelyApplyDiagonalUnitary (tolerance : Double, coefficients : Double[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
references: |-
  - Synthesis of Quantum Logic Circuits
    Vivek V. Shende, Stephen S. Bullock, Igor L. Markov
    https://arxiv.org/abs/quant-ph/0406176
input:
  content: '(tolerance : Double, coefficients : Double[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: tolerance
    summary: A tolerance below which small coefficients are truncated.
    isPrimitive: true
    uid: Double
  - name: coefficients
    summary: |-
      Array of up to $2^n$ coefficients $\theta_j$. The $j$th coefficient
      indexes the number state $\ket{j}$ encoded in little-endian format.
    isArray: true
    isPrimitive: true
    uid: Double
  - name: qubits
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- applydiagonalunitary
...
