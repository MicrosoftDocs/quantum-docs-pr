### YamlMime:QSharpType
uid: microsoft.quantum.canon.iteratethroughcartesianpower
name: IterateThroughCartesianPower
type: operation
namespace: Microsoft.Quantum.Canon
summary: |-
  Applies an operation for each index in the Cartesian power of an
  integer range.

  Iteratively applies an operation for each element of a Cartesian power
  of the range `0..(bound - 1)`.
examples: |-
  Given an operation `op`, the following two snippets are equivalent:

  ```Q#
  IterateThroughCartesianPower(2, 3, op);
  ```

  ```Q#
  op([0, 0]);
  op([1, 0]);
  op([2, 0]);
  op([0, 1]);
  // ..
  op([2, 2]);
  ```
syntax: 'operation IterateThroughCartesianPower (power : Int, bound : Int, op : (Int[] => Unit)) : Unit'
input:
  content: '(power : Int, bound : Int, op : (Int[] => Unit))'
  types:
  - name: power
    summary: |-
      The Cartesian power to which the range `0..(bound - 1)` should be
      raised.
    isPrimitive: true
    uid: Int
  - name: bound
    summary: |-
      A specification of the range to be iterated over, given as the length
      of the range.
    isPrimitive: true
    uid: Int
  - name: op
    summary: An operation to be called for each element of the given Cartesian power.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Int
    output:
      types:
      - isPrimitive: true
        uid: Unit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
seeAlso:
- microsoft.quantum.canon.iteratethroughcartesianproduct
...
