### YamlMime:QSharpType
uid: microsoft.quantum.canon.iteratethroughcartesianproduct
name: IterateThroughCartesianProduct
type: operation
namespace: Microsoft.Quantum.Canon
summary: |-
  Applies an operation for each index in the Cartesian product of several
  ranges.

  Iteratively applies an operation for each element of the Cartesian product
  of `0..(bounds[0] - 1)`, `0..(bounds[1] - 1)`, ..., `0..(bounds[Length(bounds) - 1] - 1)`
examples: |-
  Given an operation `op`, the following two snippets are equivalent:

  ```Q#
  IterateThroughCartesianProduct([3, 4, 5], op);
  ```

  ```Q#
  op([0, 0, 0]);
  op([1, 0, 0]);
  op([2, 0, 0]);
  op([0, 1, 0]);
  // ...
  op([0, 3, 0]);
  op([0, 0, 1]);
  //
  op([2, 3, 4]);
  ```
syntax: 'operation IterateThroughCartesianProduct (bounds : Int[], op : (Int[] => Unit)) : Unit'
input:
  content: '(bounds : Int[], op : (Int[] => Unit))'
  types:
  - name: bounds
    summary: |-
      An array specifying the ranges to be iterated over, with each range
      being specified as an integer length.
    isArray: true
    isPrimitive: true
    uid: Int
  - name: op
    summary: An operation to be called for each element of the given Cartesian product.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Int
    output:
      types:
      - isPrimitive: true
        uid: Unit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
seeAlso:
- microsoft.quantum.canon.iteratethroughcartesianpower
...
