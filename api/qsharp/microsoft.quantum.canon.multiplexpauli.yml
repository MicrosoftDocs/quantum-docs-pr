### YamlMime:QSharpType
uid: microsoft.quantum.canon.multiplexpauli
name: MultiplexPauli
type: operation
namespace: Microsoft.Quantum.Canon
summary: |-
  Applies a Pauli rotation conditioned on an array of qubits.

  This applies a multiply controlled unitary operation that performs
  rotations by angle $\theta_j$ about single-qubit Pauli operator $P$
  when controlled by the $n$-qubit number state $\ket{j}$.
  In particular, the action of this operation is represented by the
  unitary

  $$
  \begin{align}
  U = \sum^{2^n - 1}_{j=0} \ket{j}\bra{j} \otimes e^{i P \theta_j}.
  \end{align}

  ##
remarks: |-
  `coefficients` will be padded with elements $\theta_j = 0.0$ if
  fewer than $2^n$ are specified.
syntax: 'operation MultiplexPauli (coefficients : Double[], pauli : Pauli, control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit) : Unit'
input:
  content: '(coefficients : Double[], pauli : Pauli, control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit)'
  types:
  - name: coefficients
    summary: |-
      Array of up to $2^n$ coefficients $\theta_j$. The $j$th coefficient
      indexes the number state $\ket{j}$ encoded in little-endian format.
    isArray: true
    isPrimitive: true
    uid: Double
  - name: pauli
    summary: Pauli operator $P$ that determines axis of rotation.
    isPrimitive: true
    uid: Pauli
  - name: control
    summary: |-
      $n$-qubit control register that encodes number states $\ket{j}$ in
      little-endian format.
    uid: microsoft.quantum.arithmetic.littleendian
  - name: target
    summary: Single qubit register that is rotated by $e^{i P \theta_j}$.
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- approximatelymultiplexpauli
...
