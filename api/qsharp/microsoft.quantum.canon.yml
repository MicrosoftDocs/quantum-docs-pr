### YamlMime:QSharpNamespace
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.
functions:
- {summary: 'Returns 1, if `index` has an odd number of 1s and -1, if `index` has
    an even number of 1s.', uid: Microsoft.Quantum.Canon.Angle}
- {summary: '', uid: Microsoft.Quantum.Canon.AnyOutsideToleranceCP}
- {summary: '', uid: Microsoft.Quantum.Canon.AnyOutsideToleranceD}
- {summary: 'Arrange control, target, and helper qubits according to an index', uid: Microsoft.Quantum.Canon.ArrangedQubits}
- {summary: "> [!WARNING]\n> BigEndianToLittleEndian has been deprecated. Please use\
    \ <xref:Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian> instead.\n>\n> Please\
    \ use @\"Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian\".\n\n", uid: Microsoft.Quantum.Canon.BigEndianToLittleEndian}
- {summary: 'Given an array of operations acting on a single input, produces a new
    operation that performs each given operation in sequence.', uid: Microsoft.Quantum.Canon.Bound}
- {summary: 'Given an array of operations acting on a single input, produces a new
    operation that performs each given operation in sequence. The modifier `A` indicates
    that all operations in the array are adjointable.', uid: Microsoft.Quantum.Canon.BoundA}
- {summary: 'Given an array of operations acting on a single input, produces a new
    operation that performs each given operation in sequence. The modifier `C` indicates
    that all operations in the array are controllable.', uid: Microsoft.Quantum.Canon.BoundC}
- {summary: 'Given an array of operations acting on a single input, produces a new
    operation that performs each given operation in sequence. The modifier `CA` indicates
    that all operations in the array are adjointable and controllable.', uid: Microsoft.Quantum.Canon.BoundCA}
- {summary: 'Given an operation op, returns a new operation which applies the op if
    a classical control bit is true. If `false`, nothing happens.', uid: Microsoft.Quantum.Canon.CControlled}
- {summary: 'Given an operation op, returns a new operation which applies the op if
    a classical control bit is true. If `false`, nothing happens. The modifier `A`
    indicates that the operation is adjointable.', uid: Microsoft.Quantum.Canon.CControlledA}
- {summary: 'Given an operation op, returns a new operation which applies the op if
    a classical control bit is true. If `false`, nothing happens. The modifier `C`
    indicates that the operation is controllable.', uid: Microsoft.Quantum.Canon.CControlledC}
- {summary: 'Given an operation op, returns a new operation which applies the op if
    a classical control bit is true. If `false`, nothing happens. The modifier `CA`
    indicates that the operation is controllable and adjointable.', uid: Microsoft.Quantum.Canon.CControlledCA}
- {summary: Returns the composition of two functions., uid: Microsoft.Quantum.Canon.Compose}
- {summary: Returns the output of the composition of `inner` and `outer` for a given
    input., uid: Microsoft.Quantum.Canon.ComposedOutput}
- {summary: 'Given outer and inner operations, returns a new operation that conjugates
    the inner operation by the outer operation.', uid: Microsoft.Quantum.Canon.ConjugatedBy}
- {summary: 'Given outer and inner operations, returns a new operation that conjugates
    the inner operation by the outer operation.', uid: Microsoft.Quantum.Canon.ConjugatedByA}
- {summary: 'Given outer and inner operations, returns a new operation that conjugates
    the inner operation by the outer operation.', uid: Microsoft.Quantum.Canon.ConjugatedByC}
- {summary: 'Given outer and inner operations, returns a new operation that conjugates
    the inner operation by the outer operation.', uid: Microsoft.Quantum.Canon.ConjugatedByCA}
- {summary: Returns a unitary operation that applies an oracle on the target register
    if the control register state corresponds to a specified bit mask., uid: Microsoft.Quantum.Canon.ControlledOnBitString}
- {summary: Returns a unitary operator that applies an oracle on the target register
    if the control register state corresponds to a specified positive integer., uid: Microsoft.Quantum.Canon.ControlledOnInt}
- {summary: "Returns a curried version of an operation on two inputs.\nThat is, given\
    \ an operation with two inputs, this function applies Curry's isomorphism $f(x,\
    \ y) \\equiv f(x)(y)$ to return an operation of one input which returns an operation\
    \ of one input.", uid: Microsoft.Quantum.Canon.CurriedOp}
- {summary: "> [!WARNING]\n> DecomposeIntoTimeStepsCA has been deprecated. Please\
    \ use <xref:Microsoft.Quantum.Canon.DecomposedIntoTimeStepsCA> instead.\n\n",
  uid: Microsoft.Quantum.Canon.DecomposeIntoTimeStepsCA}
- {summary: "Returns an operation implementing the Trotter\u2013Suzuki integrator\
    \ for a given operation.", uid: Microsoft.Quantum.Canon.DecomposedIntoTimeStepsCA}
- {summary: Returns an operation that applies given operation with given argument.,
  uid: Microsoft.Quantum.Canon.Delayed}
- {summary: Returns an operation that applies given operation with given argument.,
  uid: Microsoft.Quantum.Canon.DelayedA}
- {summary: Returns an operation that applies given operation with given argument.,
  uid: Microsoft.Quantum.Canon.DelayedC}
- {summary: Returns an operation that applies given operation with given argument.,
  uid: Microsoft.Quantum.Canon.DelayedCA}
- {summary: 'Given a single-qubit Pauli operator and the index of a qubit, returns
    a multi-qubit Pauli operator with the given single-qubit operator at that index
    and `PauliI` at every other index.', uid: Microsoft.Quantum.Canon.EmbedPauli}
- {summary: 'Given a pair, returns its first element.', uid: Microsoft.Quantum.Canon.Fst}
- {summary: Creates Gray code sequences, uid: Microsoft.Quantum.Canon.GrayCode}
- {summary: 'Computes the Hamming weight of an integer, i.e., the number of 1s in
    its binary expansion.', uid: Microsoft.Quantum.Canon.HammingWeightI}
- {summary: Ignores the output of an operation or function., uid: Microsoft.Quantum.Canon.Ignore}
- {summary: Tests if a given Result value is equal to `One`., uid: Microsoft.Quantum.Canon.IsResultOne}
- {summary: Tests if a given Result value is equal to `Zero`., uid: Microsoft.Quantum.Canon.IsResultZero}
- {summary: "> [!WARNING]\n> LittleEndianToBigEndian has been deprecated. Please use\
    \ <xref:Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian> instead.\n>\n> Please\
    \ use @\"Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian\".\n\n", uid: Microsoft.Quantum.Canon.LittleEndianToBigEndian}
- {summary: Implementation step of multiply-controlled Z rotations., uid: Microsoft.Quantum.Canon.MultiplexZCoefficients}
- {summary: "Returns a multiply-controlled unitary operation $U$ that applies a unitary\
    \ $V_j$ when controlled by n-qubit number state $\\ket{j}$.\n$U = \\sum^{2^n-1}_{j=0}\\\
    ket{j}\\bra{j}\\otimes V_j$.", uid: Microsoft.Quantum.Canon.MultiplexerBruteForceFromGenerator}
- {summary: "Returns a multiply-controlled unitary operation $U$ that applies a unitary\
    \ $V_j$ when controlled by n-qubit number state $\\ket{j}$.\n$U = \\sum^{2^n-1}_{j=0}\\\
    ket{j}\\bra{j}\\otimes V_j$.", uid: Microsoft.Quantum.Canon.MultiplexerFromGenerator}
- {summary: "Raises an operation to a power.\nThat is, given an operation representing\
    \ a gate $U$, returns a new operation $U^m$ for a power $m$.", uid: Microsoft.Quantum.Canon.OperationPow}
- {summary: "Raises an operation to a power. The modifier `A` indicates that the operation\
    \ is adjointable.\nThat is, given an operation representing a gate $U$, returns\
    \ a new operation $U^m$ for a power $m$.", uid: Microsoft.Quantum.Canon.OperationPowA}
- {summary: "Raises an operation to a power. The modifier `C` indicates that the operation\
    \ is controllable.\nThat is, given an operation representing a gate $U$, returns\
    \ a new operation $U^m$ for a power $m$.", uid: Microsoft.Quantum.Canon.OperationPowC}
- {summary: "Raises an operation to a power. The modifier `A` indicates that the operation\
    \ is controllable and adjointable.\nThat is, given an operation representing a\
    \ gate $U$, returns a new operation $U^m$ for a power $m$.", uid: Microsoft.Quantum.Canon.OperationPowCA}
- {summary: 'Restricts an operation to an array of indices of a register, i.e., a
    subregister.', uid: Microsoft.Quantum.Canon.RestrictedToSubregister}
- {summary: 'Restricts an operation to an array of indices of a register, i.e., a
    subregister. The modifier `A` indicates that the operation is adjointable.', uid: Microsoft.Quantum.Canon.RestrictedToSubregisterA}
- {summary: 'Restricts an operation to an array of indices of a register, i.e., a
    subregister. The modifier `C` indicates that the operation is controllable.',
  uid: Microsoft.Quantum.Canon.RestrictedToSubregisterC}
- {summary: 'Restricts an operation to an array of indices of a register, i.e., a
    subregister. The modifier `CA` indicates that the operation is controllable and
    adjointable.', uid: Microsoft.Quantum.Canon.RestrictedToSubregisterCA}
- {summary: 'Given a pair, returns its second element.', uid: Microsoft.Quantum.Canon.Snd}
- {summary: "> [!WARNING]\n> StackCapacity has been deprecated.\n\n", uid: Microsoft.Quantum.Canon.StackCapacity}
- {summary: "> [!WARNING]\n> StackLength has been deprecated.\n\n", uid: Microsoft.Quantum.Canon.StackLength}
- {summary: "> [!WARNING]\n> StackNew has been deprecated.\n\n", uid: Microsoft.Quantum.Canon.StackNew}
- {summary: "> [!WARNING]\n> StackPeek has been deprecated.\n\n", uid: Microsoft.Quantum.Canon.StackPeek}
- {summary: "> [!WARNING]\n> StackPop has been deprecated.\n\n", uid: Microsoft.Quantum.Canon.StackPop}
- {summary: "> [!WARNING]\n> StackPush has been deprecated.\n\n", uid: Microsoft.Quantum.Canon.StackPush}
- {summary: 'Given a function and an operation, returns a new operation whose input
    is transformed by the given function.', uid: Microsoft.Quantum.Canon.TransformedOperation}
- {summary: 'Given a function and an operation, returns a new operation whose input
    is transformed by the given function.', uid: Microsoft.Quantum.Canon.TransformedOperationA}
- {summary: 'Given a function and an operation, returns a new operation whose input
    is transformed by the given function.', uid: Microsoft.Quantum.Canon.TransformedOperationC}
- {summary: 'Given a function and an operation, returns a new operation whose input
    is transformed by the given function.', uid: Microsoft.Quantum.Canon.TransformedOperationCA}
- {summary: Computes Trotter step size in recursive implementation of Trotter simulation
    algorithm., uid: Microsoft.Quantum.Canon.TrotterStepSize}
- {summary: 'Given a function which returns operations, returns a new operation which
    takes both inputs as a tuple.', uid: Microsoft.Quantum.Canon.UncurriedOp}
- {summary: 'Given a function which returns operations, returns a new operation which
    takes both inputs as a tuple. The modifier `A` indicates that the operations are
    adjointable.', uid: Microsoft.Quantum.Canon.UncurriedOpA}
- {summary: 'Given a function which returns operations, returns a new operation which
    takes both inputs as a tuple. The modifier `C` indicates that the operations are
    controllable.', uid: Microsoft.Quantum.Canon.UncurriedOpC}
- {summary: 'Given a function which returns operations, returns a new operation which
    takes both inputs as a tuple. The modifier `CA` indicates that the operations
    are controllable and adjointable.', uid: Microsoft.Quantum.Canon.UncurriedOpCA}
- {summary: Returns an array of all weight-1 Pauli operators on a given number of
    qubits., uid: Microsoft.Quantum.Canon.WeightOnePaulis}
- {summary: '', uid: Microsoft.Quantum.Canon.WithFirstInputApplied}
- {summary: "> [!WARNING]\n> XOR has been deprecated. Please use <xref:Microsoft.Quantum.Logical.Xor>\
    \ instead.\n>\n> Please use @\"microsoft.quantum.logical.xor\".\n\n", uid: Microsoft.Quantum.Canon.XOR}
name: Microsoft.Quantum.Canon
newtypes:
- {summary: The signature type of CCNOT gate., uid: Microsoft.Quantum.Canon.CCNOTop}
- {summary: "> [!WARNING]\n> ResultStack has been deprecated.\n\n", uid: Microsoft.Quantum.Canon.ResultStack}
operations:
- {summary: Performs a controlled "AND ladder" on a register of target qubits., uid: Microsoft.Quantum.Canon.AndLadder}
- {summary: 'Inverts a given target qubit if and only if both control qubits are in
    the 1 state, using measurement to perform the adjoint operation.', uid: Microsoft.Quantum.Canon.ApplyAnd}
- {summary: '', uid: Microsoft.Quantum.Canon.ApplyBound}
- {summary: '', uid: Microsoft.Quantum.Canon.ApplyBoundA}
- {summary: '', uid: Microsoft.Quantum.Canon.ApplyBoundC}
- {summary: '', uid: Microsoft.Quantum.Canon.ApplyBoundCA}
- {summary: 'Implements a cascade of CCNOT gates controlled on corresponding bits
    of two qubit registers, acting on the next qubit of one of the registers. Starting
    from the qubits at position 0 in both registers as controls, CCNOT is applied
    to the qubit at position 1 of the target register, then controlled by the qubits
    at position 1 acting on the qubit at position 2 in the target register, etc.,
    ending with an action on the target qubit in position `Length(nQubits)-1`.', uid: Microsoft.Quantum.Canon.ApplyCCNOTChain}
- {summary: Computes the parity of a register of qubits in-place., uid: Microsoft.Quantum.Canon.ApplyCNOTChain}
- {summary: Computes the parity of an array of qubits into a target qubit., uid: Microsoft.Quantum.Canon.ApplyCNOTChainWithTarget}
- {summary: 'Applies a unitary operation on the target register, controlled on a a
    state specified by a given bit mask.', uid: Microsoft.Quantum.Canon.ApplyControlledOnBitString}
- {summary: Applies a unitary operation on the target register if the control register
    state corresponds to a specified positive integer., uid: Microsoft.Quantum.Canon.ApplyControlledOnInt}
- {summary: '', uid: Microsoft.Quantum.Canon.ApplyCurriedOp}
- {summary: '', uid: Microsoft.Quantum.Canon.ApplyCurriedOpA}
- {summary: '', uid: Microsoft.Quantum.Canon.ApplyCurriedOpC}
- {summary: '', uid: Microsoft.Quantum.Canon.ApplyCurriedOpCA}
- {summary: Applies an array of complex phases to numeric basis states of a register
    of qubits., uid: Microsoft.Quantum.Canon.ApplyDiagonalUnitary}
- {summary: Applies the Fermionic SWAP., uid: Microsoft.Quantum.Canon.ApplyFermionicSWAP}
- {summary: Applies an operation conditioned on a classical bit., uid: Microsoft.Quantum.Canon.ApplyIf}
- {summary: Applies a adjointable operation conditioned on a classical bit., uid: Microsoft.Quantum.Canon.ApplyIfA}
- {summary: Applies a controllable operation conditioned on a classical bit., uid: Microsoft.Quantum.Canon.ApplyIfC}
- {summary: Applies a unitary operation conditioned on a classical bit., uid: Microsoft.Quantum.Canon.ApplyIfCA}
- {summary: 'Applies one of two operations, depending on the value of a classical
    bit.', uid: Microsoft.Quantum.Canon.ApplyIfElseB}
- {summary: 'Applies one of two adjointable operations, depending on the value of
    a classical bit.', uid: Microsoft.Quantum.Canon.ApplyIfElseBA}
- {summary: 'Applies one of two controllable operations, depending on the value of
    a classical bit.', uid: Microsoft.Quantum.Canon.ApplyIfElseBC}
- {summary: 'Applies one of two unitary operations, depending on the value of a classical
    bit.', uid: Microsoft.Quantum.Canon.ApplyIfElseBCA}
- {summary: 'Applies one of two operations, depending on the value of a classical
    result.', uid: Microsoft.Quantum.Canon.ApplyIfElseR}
- {summary: 'Applies one of two adjointable operations, depending on the value of
    a classical result.', uid: Microsoft.Quantum.Canon.ApplyIfElseRA}
- {summary: 'Applies one of two controllable operations, depending on the value of
    a classical result.', uid: Microsoft.Quantum.Canon.ApplyIfElseRC}
- {summary: 'Applies one of two unitary operations, depending on the value of a classical
    result.', uid: Microsoft.Quantum.Canon.ApplyIfElseRCA}
- {summary: Applies an operation conditioned on a classical result value being one.,
  uid: Microsoft.Quantum.Canon.ApplyIfOne}
- {summary: Applies an adjointable operation conditioned on a classical result value
    being one., uid: Microsoft.Quantum.Canon.ApplyIfOneA}
- {summary: Applies a controllable operation conditioned on a classical result value
    being one., uid: Microsoft.Quantum.Canon.ApplyIfOneC}
- {summary: Applies a unitary operation conditioned on a classical result value being
    one., uid: Microsoft.Quantum.Canon.ApplyIfOneCA}
- {summary: Applies an operation conditioned on a classical result value being zero.,
  uid: Microsoft.Quantum.Canon.ApplyIfZero}
- {summary: Applies an adjointable operation conditioned on a classical result value
    being zero., uid: Microsoft.Quantum.Canon.ApplyIfZeroA}
- {summary: Applies a controllable operation conditioned on a classical result value
    being zero., uid: Microsoft.Quantum.Canon.ApplyIfZeroC}
- {summary: Applies a unitary operation conditioned on a classical result value being
    zero., uid: Microsoft.Quantum.Canon.ApplyIfZeroCA}
- {summary: 'Inverts a given target qubit if and only if both control qubits are in
    the 1 state, with T-depth 1, using measurement to perform the adjoint operation.',
  uid: Microsoft.Quantum.Canon.ApplyLowDepthAnd}
- {summary: Applies a multiply controlled version of a singly controlled operation.
    The modifier `C` indicates that the single-qubit operation is controllable., uid: Microsoft.Quantum.Canon.ApplyMultiControlledC}
- {summary: Applies a multiply controlled version of a singly controlled operation.
    The modifier `CA` indicates that the single-qubit operation is controllable and
    adjointable., uid: Microsoft.Quantum.Canon.ApplyMultiControlledCA}
- {summary: 'Implements a multiple-controlled Toffoli gate, assuming that target qubit
    is initialized 0.  The adjoint operation assumes that the target qubit will be
    reset to 0.', uid: Microsoft.Quantum.Canon.ApplyMultiplyControlledAnd}
- {summary: 'Implements a multiple-controlled Toffoli gate, assuming that target qubit
    is initialized 0.  The adjoint operation assumes that the target qubit will be
    reset to 0.  Requires a Rz depth of 1, while the number of helper qubits are exponential
    in the number of qubits.', uid: Microsoft.Quantum.Canon.ApplyMultiplyControlledLowDepthAnd}
- {summary: Applies the same op over a qubit register multiple times., uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOver}
- {summary: Applies the same op over a qubit register multiple times., uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOverA}
- {summary: Applies the same op over a qubit register multiple times., uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOverC}
- {summary: Applies the same op over a qubit register multiple times., uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOverCA}
- {summary: '', uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedly}
- {summary: '', uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedlyA}
- {summary: '', uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedlyC}
- {summary: '', uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedlyCA}
- {summary: 'Given a multi-qubit Pauli operator, applies the corresponding operation
    to a register.', uid: Microsoft.Quantum.Canon.ApplyPauli}
- {summary: Applies a Pauli operator on each qubit in an array if the corresponding
    bit of a Boolean array matches a given input., uid: Microsoft.Quantum.Canon.ApplyPauliFromBitString}
- {summary: Performs the Quantum Fourier Transform on a quantum register containing
    an integer in the little-endian representation., uid: Microsoft.Quantum.Canon.ApplyQuantumFourierTransform}
- {summary: Performs the Quantum Fourier Transform on a quantum register containing
    an integer in the big-endian representation., uid: Microsoft.Quantum.Canon.ApplyQuantumFourierTransformBE}
- {summary: "> [!WARNING]\n> ApplyReversedOpBigEndianA has been deprecated. Please\
    \ use <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpBEA> instead.\n>\n> Please\
    \ use @\"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEA\".\n\n", uid: Microsoft.Quantum.Canon.ApplyReversedOpBigEndianA}
- {summary: "> [!WARNING]\n> ApplyReversedOpBigEndianC has been deprecated. Please\
    \ use <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC> instead.\n>\n> Please\
    \ use @\"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC\".\n\n", uid: Microsoft.Quantum.Canon.ApplyReversedOpBigEndianC}
- {summary: "> [!WARNING]\n> ApplyReversedOpBigEndianCA has been deprecated. Please\
    \ use <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpBECA> instead.\n>\n> Please\
    \ use @\"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC\".\n\n", uid: Microsoft.Quantum.Canon.ApplyReversedOpBigEndianCA}
- {summary: "> [!WARNING]\n> ApplyReversedOpLittleEndianA has been deprecated. Please\
    \ use <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpLEA> instead.\n>\n> Please\
    \ use @\"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEA\".\n\n", uid: Microsoft.Quantum.Canon.ApplyReversedOpLittleEndianA}
- {summary: "> [!WARNING]\n> ApplyReversedOpLittleEndianC has been deprecated. Please\
    \ use <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC> instead.\n>\n> Please\
    \ use @\"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC\".\n\n", uid: Microsoft.Quantum.Canon.ApplyReversedOpLittleEndianC}
- {summary: "> [!WARNING]\n> ApplyReversedOpLittleEndianCA has been deprecated. Please\
    \ use <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpLECA> instead.\n>\n> Please\
    \ use @\"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC\".\n\n", uid: Microsoft.Quantum.Canon.ApplyReversedOpLittleEndianCA}
- {summary: "> [!WARNING]\n> ApplyRippleCarryComparatorLE has been deprecated. Please\
    \ use <xref:Microsoft.Quantum.Arithmetic.CompareUsingRippleCarry> instead.\n>\n\
    > Please use @\"Microsoft.Quantum.Arithmetic.CompareUsingRippleCarry\".\n\n",
  uid: Microsoft.Quantum.Canon.ApplyRippleCarryComparatorLE}
- {summary: Applies a list of ops and their targets sequentially on an array., uid: Microsoft.Quantum.Canon.ApplySeriesOfOps}
- {summary: Applies a list of ops and their targets sequentially on an array. (Adjoint),
  uid: Microsoft.Quantum.Canon.ApplySeriesOfOpsA}
- {summary: Applies a list of ops and their targets sequentially on an array. (Controlled),
  uid: Microsoft.Quantum.Canon.ApplySeriesOfOpsC}
- {summary: Applies a list of ops and their targets sequentially on an array. (Adjoint
    + Controlled), uid: Microsoft.Quantum.Canon.ApplySeriesOfOpsCA}
- {summary: Applies a single-qubit operation to each element in a register., uid: Microsoft.Quantum.Canon.ApplyToEach}
- {summary: Applies a single-qubit operation to each element in a register. The modifier
    `A` indicates that the single-qubit operation is adjointable., uid: Microsoft.Quantum.Canon.ApplyToEachA}
- {summary: Applies a single-qubit operation to each element in a register. The modifier
    `C` indicates that the single-qubit operation is controllable., uid: Microsoft.Quantum.Canon.ApplyToEachC}
- {summary: Applies a single-qubit operation to each element in a register. The modifier
    `CA` indicates that the single-qubit operation is controllable and adjointable.,
  uid: Microsoft.Quantum.Canon.ApplyToEachCA}
- {summary: Applies a single-qubit operation to each indexed element in a register.,
  uid: Microsoft.Quantum.Canon.ApplyToEachIndex}
- {summary: Applies a single-qubit operation to each indexed element in a register.
    The modifier `A` indicates that the single-qubit operation is adjointable., uid: Microsoft.Quantum.Canon.ApplyToEachIndexA}
- {summary: Applies a single-qubit operation to each indexed element in a register.
    The modifier `C` indicates that the single-qubit operation is controllable., uid: Microsoft.Quantum.Canon.ApplyToEachIndexC}
- {summary: Applies a single-qubit operation to each indexed element in a register.
    The modifier `CA` indicates that the single-qubit operation is adjointable and
    controllable., uid: Microsoft.Quantum.Canon.ApplyToEachIndexCA}
- {summary: Applies an operation to a given element of an array., uid: Microsoft.Quantum.Canon.ApplyToElement}
- {summary: Applies an operation to a given element of an array., uid: Microsoft.Quantum.Canon.ApplyToElementA}
- {summary: Applies an operation to a given element of an array., uid: Microsoft.Quantum.Canon.ApplyToElementC}
- {summary: Applies an operation to a given element of an array., uid: Microsoft.Quantum.Canon.ApplyToElementCA}
- {summary: Applies an operation to the first qubit in the register., uid: Microsoft.Quantum.Canon.ApplyToFirstQubit}
- {summary: Applies an operation to the first qubit in the register. The modifier
    `A` indicates that the operation is adjointable., uid: Microsoft.Quantum.Canon.ApplyToFirstQubitA}
- {summary: Applies operation op to the first qubit in the register. The modifier
    `C` indicates that the operation is controllable., uid: Microsoft.Quantum.Canon.ApplyToFirstQubitC}
- {summary: Applies operation op to the first qubit in the register. The modifier
    `CA` indicates that the operation is controllable and adjointable., uid: Microsoft.Quantum.Canon.ApplyToFirstQubitCA}
- {summary: Applies an operation to the first three qubits in the register., uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubits}
- {summary: Applies an operation to the first three qubits in the register. The modifier
    `A` indicates that the operation is adjointable., uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubitsA}
- {summary: Applies an operation to the first three qubits in the register. The modifier
    `C` indicates that the operation is controllable., uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubitsC}
- {summary: Applies an operation to the first three qubits in the register. The modifier
    `CA` indicates that the operation is controllable and adjointable., uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubitsCA}
- {summary: Applies an operation to the first two qubits in the register., uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubits}
- {summary: Applies an operation to the first two qubits in the register. The modifier
    `A` indicates that the operation is adjointable., uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubitsA}
- {summary: Applies an operation to the first two qubits in the register. The modifier
    `C` indicates that the operation is controllable., uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubitsC}
- {summary: Applies an operation to the first two qubits in the register. The modifier
    `CA` indicates that the operation is controllable and adjointable., uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubitsCA}
- {summary: Applies an operation to the first element of an array., uid: Microsoft.Quantum.Canon.ApplyToHead}
- {summary: Applies an operation to the first element of an array., uid: Microsoft.Quantum.Canon.ApplyToHeadA}
- {summary: Applies an operation to the first element of an array., uid: Microsoft.Quantum.Canon.ApplyToHeadC}
- {summary: Applies an operation to the first element of an array., uid: Microsoft.Quantum.Canon.ApplyToHeadCA}
- {summary: Applies an operation to all but the last element of an array., uid: Microsoft.Quantum.Canon.ApplyToMost}
- {summary: Applies an operation to all but the last element of an array., uid: Microsoft.Quantum.Canon.ApplyToMostA}
- {summary: Applies an operation to all but the last element of an array., uid: Microsoft.Quantum.Canon.ApplyToMostC}
- {summary: Applies an operation to all but the last element of an array., uid: Microsoft.Quantum.Canon.ApplyToMostCA}
- {summary: Applies a pair of operations to a given partition of a register into two
    parts., uid: Microsoft.Quantum.Canon.ApplyToPartition}
- {summary: Applies a pair of operations to a given partition of a register into two
    parts. The modifier `A` indicates that the operation is adjointable., uid: Microsoft.Quantum.Canon.ApplyToPartitionA}
- {summary: Applies a pair of operations to a given partition of a register into two
    parts. The modifier `C` indicates that the operation is controllable., uid: Microsoft.Quantum.Canon.ApplyToPartitionC}
- {summary: Applies a pair of operations to a given partition of a register into two
    parts. The modifier `CA` indicates that the operation is controllable and adjointable.,
  uid: Microsoft.Quantum.Canon.ApplyToPartitionCA}
- {summary: Applies an operation to all but the first element of an array., uid: Microsoft.Quantum.Canon.ApplyToRest}
- {summary: Applies an operation to all but the first element of an array., uid: Microsoft.Quantum.Canon.ApplyToRestA}
- {summary: Applies an operation to all but the first element of an array., uid: Microsoft.Quantum.Canon.ApplyToRestC}
- {summary: Applies an operation to all but the first element of an array., uid: Microsoft.Quantum.Canon.ApplyToRestCA}
- {summary: 'Applies an operation to a subregister of a register, with qubits specified
    by an array of their indices.', uid: Microsoft.Quantum.Canon.ApplyToSubregister}
- {summary: 'Applies an operation to a subregister of a register, with qubits specified
    by an array of their indices. The modifier `A` indicates that the operation is
    adjointable.', uid: Microsoft.Quantum.Canon.ApplyToSubregisterA}
- {summary: 'Applies an operation to a subregister of a register, with qubits specified
    by an array of their indices. The modifier `C` indicates that the operation is
    controllable.', uid: Microsoft.Quantum.Canon.ApplyToSubregisterC}
- {summary: 'Applies an operation to a subregister of a register, with qubits specified
    by an array of their indices. The modifier `CA` indicates that the operation is
    controllable and adjointable.', uid: Microsoft.Quantum.Canon.ApplyToSubregisterCA}
- {summary: Applies an operation to the last element of an array., uid: Microsoft.Quantum.Canon.ApplyToTail}
- {summary: Applies an operation to the last element of an array., uid: Microsoft.Quantum.Canon.ApplyToTailA}
- {summary: Applies an operation to the last element of an array., uid: Microsoft.Quantum.Canon.ApplyToTailC}
- {summary: Applies an operation to the last element of an array., uid: Microsoft.Quantum.Canon.ApplyToTailCA}
- {summary: 'Given two operations, applies one as conjugated with the other.', uid: Microsoft.Quantum.Canon.ApplyWith}
- {summary: 'Given two operations, applies one as conjugated with the other.', uid: Microsoft.Quantum.Canon.ApplyWithA}
- {summary: 'Given two operations, applies one as conjugated with the other.', uid: Microsoft.Quantum.Canon.ApplyWithC}
- {summary: 'Given two operations, applies one as conjugated with the other.', uid: Microsoft.Quantum.Canon.ApplyWithCA}
- {summary: 'Given an operation that accepts some input, a function that returns an
    output compatible with that operation, and an input to that function, applies
    the operation using the function to transform the input to a form expected by
    the operation.', uid: Microsoft.Quantum.Canon.ApplyWithInputTransformation}
- {summary: 'Given an operation that accepts some input, a function that returns an
    output compatible with that operation, and an input to that function, applies
    the operation using the function to transform the input to a form expected by
    the operation.', uid: Microsoft.Quantum.Canon.ApplyWithInputTransformationA}
- {summary: 'Given an operation that accepts some input, a function that returns an
    output compatible with that operation, and an input to that function, applies
    the operation using the function to transform the input to a form expected by
    the operation.', uid: Microsoft.Quantum.Canon.ApplyWithInputTransformationC}
- {summary: 'Given an operation that accepts some input, a function that returns an
    output compatible with that operation, and an input to that function, applies
    the operation using the function to transform the input to a form expected by
    the operation.', uid: Microsoft.Quantum.Canon.ApplyWithInputTransformationCA}
- {summary: Apply the Approximate Quantum Fourier Transform (AQFT) to a quantum register.,
  uid: Microsoft.Quantum.Canon.ApproximateQFT}
- {summary: 'Applies an array of complex phases to numeric basis states of a register
    of qubits, truncating small rotation angles according to a given tolerance.',
  uid: Microsoft.Quantum.Canon.ApproximatelyApplyDiagonalUnitary}
- {summary: 'Applies a Pauli rotation conditioned on an array of qubits, truncating
    small rotation angles according to a given tolerance.', uid: Microsoft.Quantum.Canon.ApproximatelyMultiplexPauli}
- {summary: 'Applies a Pauli Z rotation conditioned on an array of qubits, truncating
    small rotation angles according to a given tolerance.', uid: Microsoft.Quantum.Canon.ApproximatelyMultiplexZ}
- {summary: "> [!WARNING]\n> AssertHighestBit has been deprecated. Please use <xref:Microsoft.Quantum.Arithmetic.AssertMostSignificantBit>\
    \ instead.\n>\n> Please use @\"Microsoft.Quantum.Arithmetic.AssertMostSignificantBit\"\
    .\n\n", uid: Microsoft.Quantum.Canon.AssertHighestBit}
- {summary: "> [!WARNING]\n> AssertLessThanPhaseLE has been deprecated. Please use\
    \ <xref:Microsoft.Quantum.Arithmetic.AssertPhaseLessThan> instead.\n>\n> Please\
    \ use @\"Microsoft.Quantum.Arithmetic.AssertPhaseLessThan\".\n\n", uid: Microsoft.Quantum.Canon.AssertLessThanPhaseLE}
- {summary: "> [!WARNING]\n> AssertPhase has been deprecated. Please use <xref:Microsoft.Quantum.Diagnostics.AssertPhase>\
    \ instead.\n\n", uid: Microsoft.Quantum.Canon.AssertPhase}
- {summary: "> [!WARNING]\n> CNOTChain has been deprecated. Please use <xref:Microsoft.Quantum.Canon.ApplyCNOTChain>\
    \ instead.\n\n", uid: Microsoft.Quantum.Canon.CNOTChain}
- {summary: "> [!WARNING]\n> CNOTChainTarget has been deprecated. Please use <xref:Microsoft.Quantum.Canon.ApplyCNOTChainWithTarget>\
    \ instead.\n\n", uid: Microsoft.Quantum.Canon.CNOTChainTarget}
- {summary: "Applies the controlled-X (CX) gate to a pair of qubits.\n$$ \\begin{align}\
    \ \\left(\\begin{matrix} 1 & 0 & 0 & 0 \\\\\\\\ 0 & 1 & 0 & 0 \\\\\\\\ 0 & 0 &\
    \ 0 & 1 \\\\\\\\ 0 & 0 & 1 & 0 \\end{matrix}\\right) \\end{align}, $$ where rows\
    \ and columns are organized as in the quantum concepts guide.", uid: Microsoft.Quantum.Canon.CX}
- {summary: "Applies the controlled-Y (CY) gate to a pair of qubits.\n$$ \\begin{align}\
    \ 1 & 0 & 0 & 0 \\\\\\\\ 0 & 1 & 0 & 0 \\\\\\\\ 0 & 0 & 0 & -i \\\\\\\\ 0 & 0\
    \ & i & 0 \\end{align}, $$ where rows and columns are organized as in the quantum\
    \ concepts guide.", uid: Microsoft.Quantum.Canon.CY}
- {summary: "Applies the controlled-Z (CZ) gate to a pair of qubits.\n$$ \\begin{align}\
    \ 1 & 0 & 0 & 0 \\\\\\\\ 0 & 1 & 0 & 0 \\\\\\\\ 0 & 0 & 1 & 0 \\\\\\\\ 0 & 0 &\
    \ 0 & -1 \\end{align}, $$ where rows and columns are organized as in the quantum\
    \ concepts guide.", uid: Microsoft.Quantum.Canon.CZ}
- {summary: "> [!WARNING]\n> CascadeCCNOT has been deprecated. Please use <xref:Microsoft.Quantum.Canon.ApplyCCNOTChain>\
    \ instead.\n\n", uid: Microsoft.Quantum.Canon.CascadeCCNOT}
- {summary: "> [!WARNING]\n> CascadeCNOT has been deprecated. Please use <xref:Microsoft.Quantum.Canon.ApplyCNOTChain>\
    \ instead.\n>\n> Please use @\"microsoft.quantum.canon.applycnotchain\".\n\n",
  uid: Microsoft.Quantum.Canon.CascadeCNOT}
- {summary: Applies a given operation with a delay., uid: Microsoft.Quantum.Canon.Delay}
- {summary: Applies a given operation with a delay., uid: Microsoft.Quantum.Canon.DelayA}
- {summary: Applies a given operation with a delay., uid: Microsoft.Quantum.Canon.DelayC}
- {summary: Applies a given operation with a delay., uid: Microsoft.Quantum.Canon.DelayCA}
- {summary: "Applies the Y-basis analog to the Hadamard transformation that interchanges\
    \ the Z and Y axes.\nThe Y Hadamard transformation $H_Y = S H$ on a single qubit\
    \ is:\n\\begin{align} H_Y \\mathrel{:=} \\frac{1}{\\sqrt{2}} \\begin{bmatrix}\
    \ 1 & 1 \\\\\\\\ i & -i \\end{bmatrix}. \\end{align}", uid: Microsoft.Quantum.Canon.HY}
- {summary: "> [!WARNING]\n> InPlaceMajority has been deprecated. Please use <xref:Microsoft.Quantum.Arithmetic.ApplyMajorityInPlace>\
    \ instead.\n>\n> Please use @\"microsoft.quantum.arithmetic.applymajorityinplace\"\
    .\n\n", uid: Microsoft.Quantum.Canon.InPlaceMajority}
- {summary: "> [!WARNING]\n> InPlaceXorBE has been deprecated. Please use <xref:ApplyReversedOpLECA(ApplyXorInPlace(value,\
    \ _), target)> instead.\n>\n> This operation has been removed.\n\n", uid: Microsoft.Quantum.Canon.InPlaceXorBE}
- {summary: "> [!WARNING]\n> InPlaceXorLE has been deprecated. Please use <xref:Microsoft.Quantum.Measurement.ApplyXorInPlace>\
    \ instead.\n>\n> Please use @\"Microsoft.Quantum.Measurement.ApplyXorInPlace\"\
    .\n\n", uid: Microsoft.Quantum.Canon.InPlaceXorLE}
- {summary: "> [!WARNING]\n> IntegerIncrementLE has been deprecated. Please use <xref:Microsoft.Quantum.Arithmetic.IncrementByInteger>\
    \ instead.\n>\n> Please use @\"Microsoft.Quantum.Arithmetic.IncrementByInteger\"\
    .\n\n", uid: Microsoft.Quantum.Canon.IntegerIncrementLE}
- {summary: "> [!WARNING]\n> IntegerIncrementPhaseLE has been deprecated. Please use\
    \ <xref:Microsoft.Quantum.Arithmetic.IncrementPhaseByInteger> instead.\n>\n> Please\
    \ use @\"Microsoft.Quantum.Arithmetic.IncrementPhaseByInteger\".\n\n", uid: Microsoft.Quantum.Canon.IntegerIncrementPhaseLE}
- {summary: Applies an operation for each index in the Cartesian power of an integer
    range., uid: Microsoft.Quantum.Canon.IterateThroughCartesianPower}
- {summary: Applies an operation for each index in the Cartesian product of several
    ranges., uid: Microsoft.Quantum.Canon.IterateThroughCartesianProduct}
- {summary: Computes the logical AND of multiple qubits., uid: Microsoft.Quantum.Canon.LogicalANDMeasAndFix}
- {summary: "> [!WARNING]\n> ModularAddProductLE has been deprecated. Please use <xref:Microsoft.Quantum.Arithmetic.MultiplyAndAddByModularInteger>\
    \ instead.\n>\n> Please use @\"Microsoft.Quantum.Arithmetic.MultiplyAndAddByModularInteger\"\
    .\n\n", uid: Microsoft.Quantum.Canon.ModularAddProductLE}
- {summary: "> [!WARNING]\n> ModularAddProductPhaseLE has been deprecated. Please\
    \ use <xref:Microsoft.Quantum.Arithmetic.MultiplyAndAddPhaseByModularInteger>\
    \ instead.\n>\n> Please use @\"Microsoft.Quantum.Arithmetic.MultiplyAndAddPhaseByModularInteger\"\
    .\n\n", uid: Microsoft.Quantum.Canon.ModularAddProductPhaseLE}
- {summary: "> [!WARNING]\n> ModularIncrementLE has been deprecated. Please use <xref:Microsoft.Quantum.Arithmetic.ModularIncrementByInteger>\
    \ instead.\n>\n> Please use @\"Microsoft.Quantum.Arithmetic.ModularIncrementByInteger\"\
    .\n\n", uid: Microsoft.Quantum.Canon.ModularIncrementLE}
- {summary: "> [!WARNING]\n> ModularIncrementPhaseLE has been deprecated. Please use\
    \ <xref:Microsoft.Quantum.Arithmetic.IncrementPhaseByModularInteger> instead.\n\
    >\n> Please use @\"Microsoft.Quantum.Arithmetic.IncrementPhaseByModularInteger\"\
    .\n\n", uid: Microsoft.Quantum.Canon.ModularIncrementPhaseLE}
- {summary: "> [!WARNING]\n> ModularMultiplyByConstantLE has been deprecated. Please\
    \ use <xref:Microsoft.Quantum.Arithmetic.MultiplyByModularInteger> instead.\n\
    >\n> Please use @\"Microsoft.Quantum.Arithmetic.MultiplyByModularInteger\".\n\n",
  uid: Microsoft.Quantum.Canon.ModularMultiplyByConstantLE}
- {summary: "Applies an array of operations controlled by an array of number states.\n\
    That is, applies Multiply-controlled unitary operation $U$ that applies a unitary\
    \ $V_j$ when controlled by $n$-qubit number state $\\ket{j}$.\n$U = \\sum^{2^n-1}_{j=0}\\\
    ket{j}\\bra{j}\\otimes V_j$.", uid: Microsoft.Quantum.Canon.MultiplexOperations}
- {summary: "Applies multiply-controlled unitary operation $U$ that applies a unitary\
    \ $V_j$ when controlled by n-qubit number state $\\ket{j}$.\n$U = \\sum^{N-1}_{j=0}\\\
    ket{j}\\bra{j}\\otimes V_j$.", uid: Microsoft.Quantum.Canon.MultiplexOperationsBruteForceFromGenerator}
- {summary: "Applies a multiply-controlled unitary operation $U$ that applies a unitary\
    \ $V_j$ when controlled by n-qubit number state $\\ket{j}$.\n$U = \\sum^{N-1}_{j=0}\\\
    ket{j}\\bra{j}\\otimes V_j$.", uid: Microsoft.Quantum.Canon.MultiplexOperationsFromGenerator}
- {summary: Implementation step of MultiplexOperations., uid: Microsoft.Quantum.Canon.MultiplexOperationsWithAuxRegister}
- {summary: Applies a Pauli rotation conditioned on an array of qubits., uid: Microsoft.Quantum.Canon.MultiplexPauli}
- {summary: Applies a Pauli Z rotation conditioned on an array of qubits., uid: Microsoft.Quantum.Canon.MultiplexZ}
- {summary: Performs the identity operation (no-op) on an argument., uid: Microsoft.Quantum.Canon.NoOp}
- {summary: Permutes qubits by using the SWAP operation., uid: Microsoft.Quantum.Canon.PermuteQubits}
- {summary: Performs the Quantum Fourier Transform on a quantum register containing
    an integer in the big-endian representation., uid: Microsoft.Quantum.Canon.QFT}
- {summary: Performs the Quantum Fourier Transform on a quantum register containing
    an integer in the little-endian representation., uid: Microsoft.Quantum.Canon.QFTLE}
- {summary: "Performs a phase shift operation.\n$R=\\boldone-(1-e^{i \\phi})\\ket{0\\\
    cdots 0}\\bra{0\\cdots 0}$.", uid: Microsoft.Quantum.Canon.RAll0}
- {summary: "Performs a phase shift operation.\n$R=\\boldone-(1-e^{i \\phi})\\ket{1\\\
    cdots 1}\\bra{1\\cdots 1}$.", uid: Microsoft.Quantum.Canon.RAll1}
- {summary: Repeats an operation a given number of times., uid: Microsoft.Quantum.Canon.Repeat}
- {summary: Repeats an operation a given number of times., uid: Microsoft.Quantum.Canon.RepeatA}
- {summary: Repeats an operation a given number of times., uid: Microsoft.Quantum.Canon.RepeatC}
- {summary: Repeats an operation a given number of times., uid: Microsoft.Quantum.Canon.RepeatCA}
- {summary: Uses SWAP gates to Reversed the order of the qubits in a register., uid: Microsoft.Quantum.Canon.SwapReverseRegister}
- {summary: "Implementation of the first-order Trotter\u2013Suzuki integrator.", uid: Microsoft.Quantum.Canon.Trotter1ImplCA}
- {summary: "Implementation of the second-order Trotter\u2013Suzuki integrator.",
  uid: Microsoft.Quantum.Canon.Trotter2ImplCA}
- {summary: "Recursive implementation of even-order Trotter\u2013Suzuki integrator.",
  uid: Microsoft.Quantum.Canon.TrotterArbitraryImplCA}
- {summary: Implementation step of `MultiplexOperationsFromGenerator`., uid: Microsoft.Quantum.Canon._MultiplexOperationsFromGenerator}
summary: ''
uid: Microsoft.Quantum.Canon
