### YamlMime:QSharpNamespace
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.
functions:
- {summary: Converts a given big integer to an array of Booleans. The 0 element of
    the array is the least significant bit of the big integer., uid: Microsoft.Quantum.Convert.BigIntAsBoolArray}
- {summary: Converts a given array of Booleans to an equivalent big integer. The 0
    element of the array is the least significant bit of the big integer., uid: Microsoft.Quantum.Convert.BoolArrayAsBigInt}
- {summary: Produces a positive integer from a string of bits in little endian format.,
  uid: Microsoft.Quantum.Convert.BoolArrayAsInt}
- {summary: 'Given a bit string, returns a multi-qubit Pauli operator represented
    as an array of single-qubit Pauli operators.', uid: Microsoft.Quantum.Convert.BoolArrayAsPauli}
- {summary: 'Converts a `Bool[]` type to a `Result[]` type, where `true` is mapped
    to `One` and `false` is mapped to `Zero`.', uid: Microsoft.Quantum.Convert.BoolArrayAsResultArray}
- {summary: 'Converts a `Bool` type to a `Result` type, where `true` is mapped to
    `One` and `false` is mapped to `Zero`.', uid: Microsoft.Quantum.Convert.BoolAsResult}
- {summary: Converts a given boolean value to an equivalent string representation.,
  uid: Microsoft.Quantum.Convert.BoolAsString}
- {summary: Converts a given double-precision floating-point number to an equivalent
    string representation., uid: Microsoft.Quantum.Convert.DoubleAsString}
- {summary: 'Converts a given double-precision floating-point number to an equivalent
    string representation, using the given format.', uid: Microsoft.Quantum.Convert.DoubleAsStringWithFormat}
- {summary: Converts functions to operations., uid: Microsoft.Quantum.Convert.FunctionAsOperation}
- {summary: Converts a given integer to an equivalent big integer., uid: Microsoft.Quantum.Convert.IntAsBigInt}
- {summary: 'Produces a binary representation of a positive integer, using the little-endian
    representation for the returned array.', uid: Microsoft.Quantum.Convert.IntAsBoolArray}
- {summary: Converts a given integer to an equivalent double-precision floating-point
    number., uid: Microsoft.Quantum.Convert.IntAsDouble}
- {summary: Converts a given integer number to an equivalent string representation.,
  uid: Microsoft.Quantum.Convert.IntAsString}
- {summary: 'Converts a given integer number to an equivalent string representation,
    using the given format.', uid: Microsoft.Quantum.Convert.IntAsStringWithFormat}
- {summary: 'Converts a given big integer to an equivalent integer, if possible. The
    function returns a pair of the resulting integer and a Boolean flag which is true,
    if and only if the conversion was possible.', uid: Microsoft.Quantum.Convert.MaybeBigIntAsInt}
- {summary: Encodes a multi-qubit Pauli operator represented as an array of single-qubit
    Pauli operators into an integer., uid: Microsoft.Quantum.Convert.PauliArrayAsInt}
- {summary: Creates an array `arr` of integers enumerated by start..step..end., uid: Microsoft.Quantum.Convert.RangeAsIntArray}
- {summary: 'Converts a `Result[]` type to a `Bool[]` type, where `One` is mapped
    to `true` and `Zero` is mapped to `false`.', uid: Microsoft.Quantum.Convert.ResultArrayAsBoolArray}
- {summary: Produces a positive integer from a string of Results in little endian
    format., uid: Microsoft.Quantum.Convert.ResultArrayAsInt}
- {summary: 'Converts a `Result` type to a `Bool` type, where `One` is mapped to `true`
    and `Zero` is mapped to `false`.', uid: Microsoft.Quantum.Convert.ResultAsBool}
name: Microsoft.Quantum.Convert
newtypes: []
operations:
- {summary: Calls a function with a given input., uid: Microsoft.Quantum.Convert.Call}
summary: This namespace contains functions for converting between various Q# data
  types.
uid: Microsoft.Quantum.Convert
