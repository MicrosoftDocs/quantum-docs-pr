### YamlMime:QSharpType
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.

uid: microsoft.quantum.diagnostics.assertmeasurementprobability
name: AssertMeasurementProbability
type: operation
namespace: microsoft.quantum.diagnostics
summary: |-
  Asserts that measuring the given qubits in the given Pauli basis will have the given result
  with the given probability, within some tolerance.
remarks: |-
  Note that the Adjoint and Controlled versions of this operation will not
  check the condition.
examples: |-
  ```qsharp
  using (register = Qubit()) {
      H(register);
      AssertProb([PauliZ], [register], One, 0.5,
          "Measuring in conjugate basis did not give 50/50 results.", 1e-5);
  }
  ```
syntax: 'operation AssertMeasurementProbability (bases : Pauli[], qubits : Qubit[], result : Result, prob : Double, msg : String, tol : Double) : Unit'
input:
  content: '(bases : Pauli[], qubits : Qubit[], result : Result, prob : Double, msg : String, tol : Double)'
  types:
  - name: bases
    summary: |-
      A measurement effect to assert the probability of, expressed as a
      multi-qubit Pauli operator.
    isArray: true
    isPrimitive: true
    uid: Pauli
  - name: qubits
    summary: A register on which to make the assertion.
    isArray: true
    isPrimitive: true
    uid: Qubit
  - name: result
    summary: An expected result of `Measure(bases, qubits)`.
    isPrimitive: true
    uid: Result
  - name: prob
    summary: The probability with which the given result is expected.
    isPrimitive: true
    uid: Double
  - name: msg
    summary: A message to be reported if the assertion fails.
    isPrimitive: true
    uid: String
  - name: tol
    isPrimitive: true
    uid: Double
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.diagnostics.assertmeasurement
...
