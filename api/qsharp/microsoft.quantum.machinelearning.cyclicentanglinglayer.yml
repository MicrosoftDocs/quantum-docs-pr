### YamlMime:QSharpType
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.

uid: microsoft.quantum.machinelearning.cyclicentanglinglayer
name: CyclicEntanglingLayer
type: function
namespace: microsoft.quantum.machinelearning
summary: |-
  Returns an array of singly controlled rotations along a given axis,
  arranged cyclically across a register of qubits, and parameterized by
  distinct model parameters.
examples: |-
  The following are equivalent:

  ```Q#
  let layer = CyclicEntanglingLayer(3, PauliX, 2);
  let layer = [
      ControlledRotation((0, [2]), PauliX, 0),
      ControlledRotation((1, [0]), PauliX, 1),
      ControlledRotation((2, [1]), PauliX, 2)
  ];
  ```
syntax: 'function CyclicEntanglingLayer (nQubits : Int, axis : Pauli, stride : Int) : Microsoft.Quantum.MachineLearning.ControlledRotation[]'
input:
  content: '(nQubits : Int, axis : Pauli, stride : Int)'
  types:
  - name: nQubits
    summary: The number of qubits acted on by the given layer.
    isPrimitive: true
    uid: Int
  - name: axis
    summary: The rotation axis for each rotation in the given layer.
    isPrimitive: true
    uid: Pauli
  - name: stride
    summary: The separation between the target and control indices for each rotation.
    isPrimitive: true
    uid: Int
output:
  content: Microsoft.Quantum.MachineLearning.ControlledRotation[]
  types:
  - summary: |-
      An array of two-qubit controlled rotations laid out cyclically across
      a register of `nQubits` qubits.
    isArray: true
    uid: microsoft.quantum.machinelearning.controlledrotation
...
