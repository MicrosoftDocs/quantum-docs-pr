### YamlMime:QSharpNamespace
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.
functions:
- {summary: 'Given a set of coefficients and a tolerance, returns a state preparation
    operation that prepares each coefficient as the corresponding amplitude of a computational
    basis state, up to the given tolerance.', uid: Microsoft.Quantum.MachineLearning.ApproximateInputEncoder}
- {summary: 'Given one or more layers of controlled rotations, returns a single layer
    with model parameter index shifted such that distinct layers are parameterized
    by distinct model parameters.', uid: Microsoft.Quantum.MachineLearning.CombinedStructure}
- {summary: 'Returns an array of singly controlled rotations along a given axis, arranged
    cyclically across a register of qubits, and parameterized by distinct model parameters.',
  uid: Microsoft.Quantum.MachineLearning.CyclicEntanglingLayer}
- {summary: Returns a default set of options for training classifiers., uid: Microsoft.Quantum.MachineLearning.DefaultTrainingOptions}
- {summary: Returns the number of qubits required to encode a particular feature vector.,
  uid: Microsoft.Quantum.MachineLearning.FeatureRegisterSize}
- {summary: 'Given a of classification probability and a bias, returns the label inferred
    from that probability.', uid: Microsoft.Quantum.MachineLearning.InferredLabel}
- {summary: 'Given an array of classification probabilities and a bias, returns the
    label inferred from each probability.', uid: Microsoft.Quantum.MachineLearning.InferredLabels}
- {summary: 'Given a set of coefficients and a tolerance, returns a state preparation
    operation that prepares each coefficient as the corresponding amplitude of a computational
    basis state.', uid: Microsoft.Quantum.MachineLearning.InputEncoder}
- {summary: 'Returns an array of uncontrolled (single-qubit) rotations along a given
    axis, with one rotation for each qubit in a register, parameterized by distinct
    model parameters.', uid: Microsoft.Quantum.MachineLearning.LocalRotationsLayer}
- {summary: 'Given a set of inferred labels and a set of correct labels, returns indices
    for where each set of labels differs.', uid: Microsoft.Quantum.MachineLearning.Misclassifications}
- {summary: 'Given a set of inferred labels and a set of correct labels, returns the
    number of indices at which each set of labels differ.', uid: Microsoft.Quantum.MachineLearning.NMisclassifications}
- {summary: Returns the number of qubits required to apply a given sequential classifier.,
  uid: Microsoft.Quantum.MachineLearning.NQubitsRequired}
- {summary: 'Returns an array of single-qubit rotations along a given axis, parameterized
    by distinct model parameters.', uid: Microsoft.Quantum.MachineLearning.PartialRotationsLayer}
- {summary: 'Samples a given array, using the given schedule.', uid: Microsoft.Quantum.MachineLearning.Sampled}
- {summary: Returns the number of elements in a given sampling schedule., uid: Microsoft.Quantum.MachineLearning.ScheduleLength}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._AllNearlyEqualD}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._CallFlipped}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._CanApplyTwoQubitCase}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._EncodeSample}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._Features}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._Flipped}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._Label}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._MisclassificationRate}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._NegativeLocations}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._TailMeasurement}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._UncontrolledSpanSequence}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._Unnegate}
- {summary: Returns a bias value that leads to near-minimum misclassification score.,
  uid: Microsoft.Quantum.MachineLearning._UpdatedBias}
name: Microsoft.Quantum.MachineLearning
newtypes:
- {summary: 'Describes a controlled rotation in terms of its target and control indices,
    rotation axis, and index into a model parameter vector.', uid: Microsoft.Quantum.MachineLearning.ControlledRotation}
- {summary: 'A sample, labeled with a class to which that sample belongs.', uid: Microsoft.Quantum.MachineLearning.LabeledSample}
- {summary: A schedule for drawing batches from a set of samples., uid: Microsoft.Quantum.MachineLearning.SamplingSchedule}
- {summary: 'Describes a quantum classifier model composed of a sequence of parameterized
    and controlled rotations, an assignment of rotation angles, and a bias between
    the two classes recognized by the model.', uid: Microsoft.Quantum.MachineLearning.SequentialModel}
- {summary: Describes an operation that prepares a given input to a sequential classifier.,
  uid: Microsoft.Quantum.MachineLearning.StateGenerator}
- {summary: A collection of options to be used in training quantum classifiers., uid: Microsoft.Quantum.MachineLearning.TrainingOptions}
- {summary: The results from having validated a classifier against a set of samples.,
  uid: Microsoft.Quantum.MachineLearning.ValidationResults}
operations:
- {summary: 'Given the structure and parameterization of a sequential classifier,
    applies the classifier to a register of qubits.', uid: Microsoft.Quantum.MachineLearning.ApplySequentialClassifier}
- {summary: 'Given a set of samples and a sequential classifier, estimates the classification
    probability for those samples by repeatedly measuring the output of the classifier
    on each sample.', uid: Microsoft.Quantum.MachineLearning.EstimateClassificationProbabilities}
- {summary: 'Given a sample and a sequential classifier, estimates the classification
    probability for that sample by repeatedly measuring the output of the classifier
    on the given sample.', uid: Microsoft.Quantum.MachineLearning.EstimateClassificationProbability}
- {summary: Estimates the training gradient for a sequential classifier at a particular
    model and for a given encoded input., uid: Microsoft.Quantum.MachineLearning.EstimateGradient}
- {summary: 'Given the structure of a sequential classifier, trains the classifier
    on a given labeled training set.', uid: Microsoft.Quantum.MachineLearning.TrainSequentialClassifier}
- {summary: 'Given the structure of a sequential classifier, trains the classifier
    on a given labeled training set, starting from a particular model.', uid: Microsoft.Quantum.MachineLearning.TrainSequentialClassifierAtModel}
- {summary: Validates a given sequential classifier against a given set of pre-labeled
    samples., uid: Microsoft.Quantum.MachineLearning.ValidateSequentialClassifier}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._ApplyLEOperationToRawRegister}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._ApplyTwoQubitCase}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._EstimateDerivativeWithParameterShift}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._PrepareClassification}
- {summary: Randomly rescales an input to either grow or shrink by a given factor.,
  uid: Microsoft.Quantum.MachineLearning._RandomlyRescale}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._ReflectAboutNegativeCoefficients}
- {summary: Perform one epoch of sequential classifier training on a subset of data
    samples., uid: Microsoft.Quantum.MachineLearning._RunSingleTrainingEpoch}
- {summary: attempts a single parameter update in the direction of mini batch gradient,
  uid: Microsoft.Quantum.MachineLearning._RunSingleTrainingStep}
- {summary: '', uid: Microsoft.Quantum.MachineLearning._TrainSequentialClassifierAtModel}
summary: This namespace provides functions and operations used in quantum machine
  learning applications.
uid: Microsoft.Quantum.MachineLearning
