### YamlMime:QSharpNamespace
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.
functions:
- {summary: Returns the absolute value of a complex number of type `Complex`., uid: Microsoft.Quantum.Math.AbsComplex}
- {summary: Returns the absolute value of a complex number of type `ComplexPolar`.,
  uid: Microsoft.Quantum.Math.AbsComplexPolar}
- {summary: Returns the absolute value of a double-precision floating-point number.,
  uid: Microsoft.Quantum.Math.AbsD}
- {summary: Returns the absolute value of an integer., uid: Microsoft.Quantum.Math.AbsI}
- {summary: Returns the absolute value of a big integer., uid: Microsoft.Quantum.Math.AbsL}
- {summary: Returns the squared absolute value of a complex number of type `Complex`.,
  uid: Microsoft.Quantum.Math.AbsSquaredComplex}
- {summary: Returns the squared absolute value of a complex number of type `ComplexPolar`.,
  uid: Microsoft.Quantum.Math.AbsSquaredComplexPolar}
- {summary: Helper function used to recursively calculate the bitsize of a value.,
  uid: Microsoft.Quantum.Math.AccumulatedBitsizeI}
- {summary: Helper function used to recursively calculate the bitsize of a value.,
  uid: Microsoft.Quantum.Math.AccumulatedBitsizeL}
- {summary: Returns the angle whose cosine is the specified number., uid: Microsoft.Quantum.Math.ArcCos}
- {summary: Computes the inverse hyperbolic cosine of a number., uid: Microsoft.Quantum.Math.ArcCosh}
- {summary: Returns the angle whose sine is the specified number., uid: Microsoft.Quantum.Math.ArcSin}
- {summary: Computes the inverse hyperbolic sine of a number., uid: Microsoft.Quantum.Math.ArcSinh}
- {summary: Returns the angle whose tangent is the specified number., uid: Microsoft.Quantum.Math.ArcTan}
- {summary: Returns the angle whose tangent is the quotient of two specified numbers.,
  uid: Microsoft.Quantum.Math.ArcTan2}
- {summary: Computes the inverse hyperbolic tangent of a number., uid: Microsoft.Quantum.Math.ArcTanh}
- {summary: Returns the phase of a complex number of type `Complex`., uid: Microsoft.Quantum.Math.ArgComplex}
- {summary: Returns the phase of a complex number of type `ComplexPolar`., uid: Microsoft.Quantum.Math.ArgComplexPolar}
- {summary: "For a non-negative integer `a`, returns the number of bits required to\
    \ represent `a`.\nThat is, returns the smallest $n$ such that $a < 2^n$.", uid: Microsoft.Quantum.Math.BitSizeI}
- {summary: "For a non-negative integer `a`, returns the number of bits required to\
    \ represent `a`.\nThat is, returns the smallest $n$ such that $a < 2^n$.", uid: Microsoft.Quantum.Math.BitSizeL}
- {summary: Returns the smallest integer greater than or equal to the specified number.,
  uid: Microsoft.Quantum.Math.Ceiling}
- {summary: Converts a complex number of type `Complex` to a complex number of type
    `ComplexPolar`., uid: Microsoft.Quantum.Math.ComplexAsComplexPolar}
- {summary: Converts a complex number of type `ComplexPolar` to a complex number of
    type `Complex`., uid: Microsoft.Quantum.Math.ComplexPolarAsComplex}
- {summary: Finds the continued fraction convergent closest to `fraction` with the
    denominator less or equal to `denominatorBound`, uid: Microsoft.Quantum.Math.ContinuedFractionConvergentI}
- {summary: Finds the continued fraction convergent closest to `fraction` with the
    denominator less or equal to `denominatorBound`, uid: Microsoft.Quantum.Math.ContinuedFractionConvergentL}
- {summary: Returns the cosine of the specified angle., uid: Microsoft.Quantum.Math.Cos}
- {summary: Returns the hyperbolic cosine of the specified angle., uid: Microsoft.Quantum.Math.Cosh}
- {summary: 'Divides one BigInteger value by another, returns the result and the remainder
    as a tuple.', uid: Microsoft.Quantum.Math.DivRemL}
- {summary: Returns the quotient of two inputs., uid: Microsoft.Quantum.Math.DividedByC}
- {summary: Returns the quotient of two inputs., uid: Microsoft.Quantum.Math.DividedByCP}
- {summary: Returns the quotient of two inputs., uid: Microsoft.Quantum.Math.DividedByD}
- {summary: Returns the quotient of two inputs., uid: Microsoft.Quantum.Math.DividedByI}
- {summary: Returns the quotient of two inputs., uid: Microsoft.Quantum.Math.DividedByL}
- {summary: Returns the natural logarithmic base $e$., uid: Microsoft.Quantum.Math.E}
- {summary: Returns $e$ raised to the specified power., uid: Microsoft.Quantum.Math.ExpD}
- {summary: 'Returns an integer raised to a given power, with respect to a given modulus.',
  uid: Microsoft.Quantum.Math.ExpModI}
- {summary: 'Returns an integer raised to a given power, with respect to a given modulus.',
  uid: Microsoft.Quantum.Math.ExpModL}
- {summary: 'Computes a tuple $(u,v)$ such that $u \cdot a + v \cdot b = \operatorname{GCD}(a,
    b)$, where $\operatorname{GCD}$ is $a$ greatest common divisor of $a$ and $b$.
    The GCD is always positive.', uid: Microsoft.Quantum.Math.ExtendedGreatestCommonDivisorI}
- {summary: 'Computes a tuple $(u,v)$ such that $u \cdot a + v \cdot b = \operatorname{GCD}(a,
    b)$, where $\operatorname{GCD}$ is $a$ greatest common divisor of $a$ and $b$.
    The GCD is always positive.', uid: Microsoft.Quantum.Math.ExtendedGreatestCommonDivisorL}
- {summary: Returns the largest integer less than or equal to the specified number.,
  uid: Microsoft.Quantum.Math.Floor}
- {summary: Computes the greatest common divisor of $a$ and $b$. The GCD is always
    positive., uid: Microsoft.Quantum.Math.GreatestCommonDivisorI}
- {summary: Computes the greatest common divisor of $a$ and $b$. The GCD is always
    positive., uid: Microsoft.Quantum.Math.GreatestCommonDivisorL}
- {summary: Returns the remainder resulting from the division of a specified number
    by another specified number., uid: Microsoft.Quantum.Math.IEEERemainder}
- {summary: 'Returns $b$ such that $a \cdot b = 1 (\operatorname{mod} \texttt{modulus})$.',
  uid: Microsoft.Quantum.Math.InverseModI}
- {summary: 'Returns $b$ such that $a \cdot b = 1 (\operatorname{mod} \texttt{modulus})$.',
  uid: Microsoft.Quantum.Math.InverseModL}
- {summary: Returns true if $a$ and $b$ are co-prime and false otherwise., uid: Microsoft.Quantum.Math.IsCoprimeI}
- {summary: Returns true if $a$ and $b$ are co-prime and false otherwise., uid: Microsoft.Quantum.Math.IsCoprimeL}
- {summary: Computes the base-2 logarithm of a number., uid: Microsoft.Quantum.Math.Lg}
- {summary: Returns the natural (base $e$) logarithm of a specified number., uid: Microsoft.Quantum.Math.Log}
- {summary: Returns the base 10 logarithm of a specified number., uid: Microsoft.Quantum.Math.Log10}
- {summary: Returns the natural logarithm of 2., uid: Microsoft.Quantum.Math.LogOf2}
- {summary: 'Given an array of integers, returns the largest element.', uid: Microsoft.Quantum.Math.Max}
- {summary: Returns the larger of two specified numbers., uid: Microsoft.Quantum.Math.MaxD}
- {summary: Returns the larger of two specified numbers., uid: Microsoft.Quantum.Math.MaxI}
- {summary: Returns the larger of two specified numbers., uid: Microsoft.Quantum.Math.MaxL}
- {summary: 'Given an array of integers, returns the smallest element.', uid: Microsoft.Quantum.Math.Min}
- {summary: Returns the smaller of two specified numbers., uid: Microsoft.Quantum.Math.MinD}
- {summary: Returns the smaller of two specified numbers., uid: Microsoft.Quantum.Math.MinI}
- {summary: Returns the smaller of two specified numbers., uid: Microsoft.Quantum.Math.MinL}
- {summary: Returns the difference between two inputs., uid: Microsoft.Quantum.Math.MinusC}
- {summary: Returns the difference between two inputs., uid: Microsoft.Quantum.Math.MinusCP}
- {summary: Returns the difference between two inputs., uid: Microsoft.Quantum.Math.MinusD}
- {summary: Returns the difference between two inputs., uid: Microsoft.Quantum.Math.MinusI}
- {summary: Returns the difference between two inputs., uid: Microsoft.Quantum.Math.MinusL}
- {summary: Returns the modulus of a number with respect to another number., uid: Microsoft.Quantum.Math.ModI}
- {summary: Returns the modulus of a number with respect to another number., uid: Microsoft.Quantum.Math.ModL}
- {summary: Performs modular division on a number raised to the power of another number.,
  uid: Microsoft.Quantum.Math.ModPowL}
- {summary: Computes the canonical residue of `value` modulo `modulus`., uid: Microsoft.Quantum.Math.ModulusI}
- {summary: Computes the canonical residue of `value` modulo `modulus`., uid: Microsoft.Quantum.Math.ModulusL}
- {summary: Returns the unary negation of an input., uid: Microsoft.Quantum.Math.NegationC}
- {summary: Returns the unary negation of an input., uid: Microsoft.Quantum.Math.NegationCP}
- {summary: Returns the unary negation of an input., uid: Microsoft.Quantum.Math.NegationD}
- {summary: Returns the unary negation of an input., uid: Microsoft.Quantum.Math.NegationI}
- {summary: Returns the unary negation of an input., uid: Microsoft.Quantum.Math.NegationL}
- {summary: "Represents the ratio of the circumference of a circle to its diameter,\
    \ specified by the constant, \u03C0.", uid: Microsoft.Quantum.Math.PI}
- {summary: "Returns the `L(p)` norm of a vector of `Double`s.\nThat is, given an\
    \ array $x$ of type `Double[]`, this returns the $p$-norm $\\|x\\|\\_p= (\\sum_{j}|x_j|^{p})^{1/p}$.",
  uid: Microsoft.Quantum.Math.PNorm}
- {summary: "Normalizes a vector of `Double`s in the `L(p)` norm.\nThat is, given\
    \ an array $x$ of type `Double[]`, this returns an array where all elements are\
    \ divided by the $p$-norm $\\|x\\|_p$.", uid: Microsoft.Quantum.Math.PNormalized}
- {summary: Returns the sum (concatenation) of two inputs., uid: Microsoft.Quantum.Math.PlusA}
- {summary: Returns the sum of two inputs., uid: Microsoft.Quantum.Math.PlusC}
- {summary: Returns the sum of two inputs., uid: Microsoft.Quantum.Math.PlusCP}
- {summary: Returns the sum of two inputs., uid: Microsoft.Quantum.Math.PlusD}
- {summary: Returns the sum of two inputs., uid: Microsoft.Quantum.Math.PlusI}
- {summary: Returns the sum of two inputs., uid: Microsoft.Quantum.Math.PlusL}
- {summary: Returns a number raised to a given power., uid: Microsoft.Quantum.Math.PowC}
- {summary: 'Internal. Since it is easiest to define the power of two complex numbers
    in cartesian form as returning in polar form, we define that here, then convert
    as needed.', uid: Microsoft.Quantum.Math.PowCAsCP}
- {summary: Returns a number raised to a given power., uid: Microsoft.Quantum.Math.PowCP}
- {summary: Returns the number x raised to the power y., uid: Microsoft.Quantum.Math.PowD}
- {summary: Returns a number raised to a given power., uid: Microsoft.Quantum.Math.PowI}
- {summary: Returns a number raised to a given power., uid: Microsoft.Quantum.Math.PowL}
- {summary: Computes the modulus between two real numbers., uid: Microsoft.Quantum.Math.RealMod}
- {summary: Rounds a value to the nearest integer., uid: Microsoft.Quantum.Math.Round}
- {summary: Returns an integer that indicates the sign of a number., uid: Microsoft.Quantum.Math.SignD}
- {summary: Returns an integer that indicates the sign of a number., uid: Microsoft.Quantum.Math.SignI}
- {summary: Returns an integer that indicates the sign of a number., uid: Microsoft.Quantum.Math.SignL}
- {summary: Returns the sine of the specified angle., uid: Microsoft.Quantum.Math.Sin}
- {summary: Returns the hyperbolic sine of the specified angle., uid: Microsoft.Quantum.Math.Sinh}
- {summary: Returns the square root of a specified number., uid: Microsoft.Quantum.Math.Sqrt}
- {summary: Returns the squared 2-norm of a vector., uid: Microsoft.Quantum.Math.SquaredNorm}
- {summary: Returns the tangent of the specified angle., uid: Microsoft.Quantum.Math.Tan}
- {summary: Returns the hyperbolic tangent of the specified angle., uid: Microsoft.Quantum.Math.Tanh}
- {summary: Returns the product of two inputs., uid: Microsoft.Quantum.Math.TimesC}
- {summary: Returns the product of two inputs., uid: Microsoft.Quantum.Math.TimesCP}
- {summary: Returns the product of two inputs., uid: Microsoft.Quantum.Math.TimesD}
- {summary: Returns the product of two inputs., uid: Microsoft.Quantum.Math.TimesI}
- {summary: Returns the product of two inputs., uid: Microsoft.Quantum.Math.TimesL}
- {summary: Calculates the integral part of a number., uid: Microsoft.Quantum.Math.Truncate}
- {summary: Internal recursive call to calculate the GCD with a bound, uid: Microsoft.Quantum.Math._ContinuedFractionConvergentI}
- {summary: Internal recursive call to calculate the GCD with a bound, uid: Microsoft.Quantum.Math._ContinuedFractionConvergentL}
- {summary: Internal recursive call to calculate the GCD., uid: Microsoft.Quantum.Math._ExtendedGreatestCommonDivisorI}
- {summary: Internal recursive call to calculate the GCD., uid: Microsoft.Quantum.Math._ExtendedGreatestCommonDivisorL}
name: Microsoft.Quantum.Math
newtypes:
- {summary: Represents a rational number of the form `p/q`. Integer `p` is the first
    element of the tuple and `q` is the second element of the tuple., uid: Microsoft.Quantum.Math.BigFraction}
- {summary: 'Represents a complex number by its real and imaginary components. The
    first element of the tuple is the real component, the second one - the imaginary
    component.', uid: Microsoft.Quantum.Math.Complex}
- {summary: "Represents a complex number in polar form.\nThe polar representation\
    \ of a complex number is $c=r e^{i t}$.", uid: Microsoft.Quantum.Math.ComplexPolar}
- {summary: Represents a rational number of the form `p/q`. Integer `p` is the first
    element of the tuple and `q` is the second element of the tuple., uid: Microsoft.Quantum.Math.Fraction}
operations:
- {summary: "> [!WARNING]\n> RandomInt has been deprecated. Please use <xref:Microsoft.Quantum.Random.DrawRandomInt>\
    \ instead.\n\n", uid: Microsoft.Quantum.Math.RandomInt}
- {summary: "> [!WARNING]\n> RandomIntPow2 has been deprecated. Please use <xref:Microsoft.Quantum.Random.DrawRandomInt>\
    \ instead.\n\n", uid: Microsoft.Quantum.Math.RandomIntPow2}
- {summary: "> [!WARNING]\n> RandomReal has been deprecated. Please use <xref:Microsoft.Quantum.Random.DrawRandomDouble>\
    \ instead.\n\n", uid: Microsoft.Quantum.Math.RandomReal}
- {summary: "> [!WARNING]\n> RandomSingleQubitPauli has been deprecated. Please use\
    \ <xref:Microsoft.Quantum.Random.DrawRandomPauli> instead.\n\n", uid: Microsoft.Quantum.Math.RandomSingleQubitPauli}
summary: ''
uid: Microsoft.Quantum.Math
