### YamlMime:QSharpType
uid: microsoft.quantum.preparation.preparechoistate
name: PrepareChoiState
type: operation
namespace: Microsoft.Quantum.Preparation
summary: |-
  Prepares the Choi–Jamiłkowski state for a given operation onto given reference
  and target registers.
remarks: |-
  The Choi–Jamiłkowski state $J(\Lambda)$ of a quantum process is
  defined as
  $$
  \begin{align}
  J(\Lambda) \mathrel{:=} (\boldone \otimes \Lambda)
  (|\boldone\rangle\!\rangle\langle\!\langle\boldone|),
  \end{align}
  $$
  where $|X\rangle\!\rangle$ is the *vectorization* of a matrix $X$
  in the column-stacking convention. Learning a classical description
  of this state provides full information about the effect of $\Lambda$
  acting on arbitrary input states, and forms the foundation of
  *quantum process tomography*.
syntax: 'operation PrepareChoiState (op : (Qubit[] => Unit), reference : Qubit[], target : Qubit[]) : Unit'
input:
  content: '(op : (Qubit[] => Unit), reference : Qubit[], target : Qubit[])'
  types:
  - name: op
    summary: |-
      Operation $\Lambda$ whose Choi–Jamiłkowski state $J(\Lambda) / 2^N$
      is to be prepared, where $N$ is the number of qubits on which
      `op` acts.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
  - name: reference
    summary: |-
      A register of qubits starting in the $\ket{00\cdots 0}$ state
      to be used as a reference for the action of `op`.
    isArray: true
    isPrimitive: true
    uid: Qubit
  - name: target
    summary: |-
      A register of qubits initially in the $\ket{00\cdots 0}$ state
      on which `op` is to be applied.
    isArray: true
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
seeAlso:
- preparechoistatea
- preparechoistatec
- preparechoistateca
...
