### YamlMime:QSharpType
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.

uid: microsoft.quantum.preparation.prepareuniformsuperposition
name: PrepareUniformSuperposition
type: operation
namespace: microsoft.quantum.preparation
summary: |-
  Creates a uniform superposition over states that encode 0 through `nIndices - 1`.

  That is, this unitary $U$ creates a uniform superposition over all number states
  $0$ to $M-1$, given an input state $\ket{0\cdots 0}$. In other words,
  $$
  \begin{align}
  U\ket{0}=\frac{1}{\sqrt{M}}\sum_{j=0}^{M-1}\ket{j}.
  \end{align}
  $$.
remarks: |-
  The operation is adjointable, but requires that `indexRegister` is in a uniform
  superposition over the first `nIndices` basis states in that case.
examples: |-
  The following example prepares the state $\frac{1}{\sqrt{6}}\sum_{j=0}^{5}\ket{j}$
  on $3$ qubits.

  ```Q#
  let nIndices = 6;
  using(indexRegister = Qubit[3]) {
      PrepareUniformSuperposition(nIndices, LittleEndian(indexRegister));
      // ...
  }
  ```
syntax: 'operation PrepareUniformSuperposition (nIndices : Int, indexRegister : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(nIndices : Int, indexRegister : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: nIndices
    summary: The desired number of states $M$ in the uniform superposition.
    isPrimitive: true
    uid: Int
  - name: indexRegister
    summary: |-
      The qubit register that stores the number states in `LittleEndian` format.
      This register must be able to store the number $M-1$, and is assumed to be
      initialized in the state $\ket{0\cdots 0}$.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
...
