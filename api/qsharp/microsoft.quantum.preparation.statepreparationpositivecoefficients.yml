### YamlMime:QSharpType
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.

uid: microsoft.quantum.preparation.statepreparationpositivecoefficients
name: StatePreparationPositiveCoefficients
type: function
namespace: microsoft.quantum.preparation
summary: |-
  Returns an operation that prepares the given quantum state.

  The returned operation $U$ prepares an arbitrary quantum
  state $\ket{\psi}$ with positive coefficients $\alpha_j\ge 0$ from
  the $n$-qubit computational basis state $\ket{0...0}$.

  The action of U on a newly-allocated register is given by
  $$
  \begin{align}
  U \ket{0\cdots 0} = \ket{\psi} = \frac{\sum_{j=0}^{2^n-1}\alpha_j \ket{j}}{\sqrt{\sum_{j=0}^{2^n-1}|\alpha_j|^2}}.
  \end{align}
  $$
remarks: |-
  Negative input coefficients $\alpha_j < 0$ will be treated as though
  positive with value $|\alpha_j|$. `coefficients` will be padded with
  elements $\alpha_j = 0.0$ if fewer than $2^n$ are specified.
examples: |-
  The following snippet prepares the quantum state $\ket{\psi}=\sqrt{1/8}\ket{0}+\sqrt{7/8}\ket{2}$
  in the qubit register `qubitsLE`.

  ```qsharp
  let amplitudes = [Sqrt(0.125), 0.0, Sqrt(0.875), 0.0];
  let op = StatePreparationPositiveCoefficients(amplitudes);
  using (qubits = Qubit[2]) {
      let qubitsLE = LittleEndian(qubits);
      op(qubitsLE);
  }
  ```
syntax: 'function StatePreparationPositiveCoefficients (coefficients : Double[]) : (Microsoft.Quantum.Arithmetic.LittleEndian => Unit is Adj + Ctl)'
input:
  content: '(coefficients : Double[])'
  types:
  - name: coefficients
    summary: |-
      Array of up to $2^n$ coefficients $\alpha_j$. The $j$th coefficient
      indexes the number state $\ket{j}$ encoded in little-endian format.
    isArray: true
    isPrimitive: true
    uid: Double
output:
  content: (Microsoft.Quantum.Arithmetic.LittleEndian => Unit is Adj + Ctl)
  types:
  - summary: A state-preparation unitary operation $U$.
    isOperation: true
    input:
      types:
      - uid: microsoft.quantum.arithmetic.littleendian
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
...
