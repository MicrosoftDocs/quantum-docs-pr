### YamlMime:QSharpNamespace
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.
functions:
- {summary: Adds two `GeneratorSystem`s to create a new `GeneratorSystem`., uid: Microsoft.Quantum.Simulation.AddGeneratorSystems}
- {summary: "Encodes an operator of interest into a `BlockEncoding`.\nThis constructs\
    \ a `BlockEncoding` unitary $U=P\\cdot V\\cdot P^\\dagger$ that encodes some operator\
    \ $H=\\sum_{j}|\\alpha_j|U_j$ of interest that is a linear combination of unitaries.\
    \ Typically, $P$ is a state preparation unitary such that $P\\ket{0}\\_a=\\sum_j\\\
    sqrt{\\alpha_j/\\|\\vec\\alpha\\|\\_2}\\ket{j}\\_a$, and $V=\\sum_{j}\\ket{j}\\\
    bra{j}\\_a\\otimes U_j$.", uid: Microsoft.Quantum.Simulation.BlockEncodingByLCU}
- {summary: "Encodes an operator of interest into a `BlockEncodingReflection`.\nThis\
    \ constructs a `BlockEncodingReflection` unitary $U=P\\cdot V\\cdot P^\\dagger$\
    \ that encodes some operator $H=\\sum_{j}|\\alpha_j|U_j$ of interest that is a\
    \ linear combination of unitaries. Typically, $P$ is a state preparation unitary\
    \ such that $P\\ket{0}\\_a\\sum_j\\sqrt{\\alpha_j/\\|\\vec\\alpha\\|\\_2}\\ket{j}\\\
    _a$, and $V=\\sum_{j}\\ket{j}\\bra{j}\\_a\\otimes U_j$.", uid: Microsoft.Quantum.Simulation.BlockEncodingReflectionByLCU}
- {summary: "Converts a `BlockEncoding` into an equivalent `BLockEncodingReflection`.\n\
    That is, given a `BlockEncoding` unitary $U$ that encodes some operator $H$ of\
    \ interest, converts it into a `BlockEncodingReflection` $U'$ that encodes the\
    \ same operator, but also satisfies $U'^\\dagger = U'$. This increases the size\
    \ of the auxiliary register of $U$ by one qubit.", uid: Microsoft.Quantum.Simulation.BlockEncodingToReflection}
- {summary: Retrieves the `GeneratorIndex` function in a `GeneratorSystem`., uid: Microsoft.Quantum.Simulation.GetGeneratorSystemFunction}
- {summary: Retrieves the number of terms in a `GeneratorSystem`., uid: Microsoft.Quantum.Simulation.GetGeneratorSystemNTerms}
- {summary: 'Returns a generator index consistent with the zero Hamiltonian, `H =
    0`, which corresponds to the identity evolution operation.', uid: Microsoft.Quantum.Simulation.IdentityGeneratorIndex}
- {summary: 'Returns a generator system consistent with the zero Hamiltonian `H =
    0`, which corresponds to the identity evolution operation.', uid: Microsoft.Quantum.Simulation.IdentityGeneratorSystem}
- {summary: Returns a time-dependent generator system consistent with the Hamiltonian
    `H(s) = 0`., uid: Microsoft.Quantum.Simulation.IdentityTimeDependentGeneratorSystem}
- {summary: Used in implementation of `PauliBlockEncoding`, uid: Microsoft.Quantum.Simulation.IdxToCoeff}
- {summary: Used in implementation of `PauliBlockEncoding`, uid: Microsoft.Quantum.Simulation.IdxToUnitary}
- {summary: Converts a integer to a single-qubit Pauli operator., uid: Microsoft.Quantum.Simulation.IntToPauli}
- {summary: Returns a `TimeDependentGeneratorSystem` representing the linear interpolation
    between two `GeneratorSystem`s., uid: Microsoft.Quantum.Simulation.InterpolateGeneratorSystems}
- {summary: Linearly interpolates between two `GeneratorSystems` according to a schedule
    parameter `s` between 0 and 1 (inclusive)., uid: Microsoft.Quantum.Simulation.InterpolateGeneratorSystemsImpl}
- {summary: 'Interpolates between two generators with a uniform schedule, returning
    an operation that applies simulated evolution under the resulting time-dependent
    generator to a qubit register.', uid: Microsoft.Quantum.Simulation.InterpolatedEvolution}
- {summary: Converts an array of integers to an array of single-qubit Pauli operators.,
  uid: Microsoft.Quantum.Simulation.IntsToPaulis}
- {summary: Multiplies the coefficient in a `GeneratorIndex`., uid: Microsoft.Quantum.Simulation.MultiplyGeneratorIndex}
- {summary: Multiplies the coefficient of all terms in a `GeneratorSystem`., uid: Microsoft.Quantum.Simulation.MultiplyGeneratorSystem}
- {summary: "Creates a block-encoding unitary for a Hamiltonian.\nThe Hamiltonian\
    \ $H=\\sum_{j}\\alpha_j P_j$ is described by a sum of Pauli terms $P_j$, each\
    \ with real coefficient $\\alpha_j$.", uid: Microsoft.Quantum.Simulation.PauliBlockEncoding}
- {summary: Extracts the coefficient of a Pauli term described by a `GeneratorIndex`.,
  uid: Microsoft.Quantum.Simulation.PauliCoefficientFromGenIdx}
- {summary: Represents a dynamical generator as a set of simulatable gates and an
    expansion in the Pauli basis., uid: Microsoft.Quantum.Simulation.PauliEvolutionFunction}
- {summary: Represents a dynamical generator as a set of simulatable gates and an
    expansion in the Pauli basis., uid: Microsoft.Quantum.Simulation.PauliEvolutionSet}
- {summary: Used in implementation of `PauliBlockEncoding`, uid: Microsoft.Quantum.Simulation.PauliLCUUnitary}
- {summary: Extracts the Pauli string and its qubit indices of a Pauli term described
    by a `GeneratorIndex`., uid: Microsoft.Quantum.Simulation.PauliStringFromGenIdx}
- {summary: Converts a block-encoding reflection into a quantum walk., uid: Microsoft.Quantum.Simulation.QuantumWalkByQubitization}
- {summary: Adds multiple `GeneratorSystem`s to create a new GeneratorSystem., uid: Microsoft.Quantum.Simulation.SumGeneratorSystems}
- {summary: "`TimeDependentSimulationAlgorithm` function that uses a Trotter\u2013\
    Suzuki decomposition to approximate a unitary operator that solves the time-dependent\
    \ Schrodinger equation.", uid: Microsoft.Quantum.Simulation.TimeDependentTrotterSimulationAlgorithm}
- {summary: "`SimulationAlgorithm` function that uses a Trotter\u2013Suzuki decomposition\
    \ to approximate the time-evolution operator _exp(-iHt)_.", uid: Microsoft.Quantum.Simulation.TrotterSimulationAlgorithm}
- {summary: "Implements a single time-step of time-evolution by the system described\
    \ in an `EvolutionGenerator` using a Trotter\u2013Suzuki decomposition.", uid: Microsoft.Quantum.Simulation.TrotterStep}
- {summary: Adds two `GeneratorSystem`s to create a new `GeneratorSystem`., uid: Microsoft.Quantum.Simulation._AddGeneratorSystems}
- {summary: 'Returns a generator system consistent with the Hamiltonian `H(s) = 0`,
    where `s` is a schedule parameter.', uid: Microsoft.Quantum.Simulation._IdentityTimeDependentGeneratorSystem}
- {summary: Multiplies the coefficient of all terms in a `GeneratorSystem`., uid: Microsoft.Quantum.Simulation._MultiplyGeneratorSystem}
- {summary: "Creates a block-encoding unitary for a Hamiltonian.\nThe Hamiltonian\
    \ $H=\\sum_{j}\\alpha_j P_j$ is described by a sum of Pauli terms $P_j$, each\
    \ with real coefficient $\\alpha_j$.", uid: Microsoft.Quantum.Simulation._PauliBlockEncoding}
name: Microsoft.Quantum.Simulation
newtypes:
- {summary: "Represents a unitary where an arbitrary operator of interest is encoded\
    \ in the top-left block.\nThat is, a `BlockEncoding` is a unitary $U$ where an\
    \ arbitrary operator $H$ of interest that acts on the system register `s` is encoded\
    \ in the top- left block corresponding to auxiliary state $\\ket{0}_a$. That is,\n\
    $$ \\begin{align} (\\bra{0}_a\\otimes I_s)U(\\ket{0}_a\\otimes I_s) = H \\end{align}\
    \ $$.", uid: Microsoft.Quantum.Simulation.BlockEncoding}
- {summary: Represents a `BlockEncoding` that is also a reflection., uid: Microsoft.Quantum.Simulation.BlockEncodingReflection}
- {summary: "Represents a dynamical generator as a set of simulatable gates and an\
    \ expansion in terms of that basis.\nLast parameter for number of terms.", uid: Microsoft.Quantum.Simulation.EvolutionGenerator}
- {summary: "Represents a time-dependent dynamical generator.\nThe `Double` parameter\
    \ is a schedule in $[0, 1]$.", uid: Microsoft.Quantum.Simulation.EvolutionSchedule}
- {summary: "Represents a set of gates that can be readily implemented and used to\
    \ implement simulation algorithms.\nElements in the set are indexed by a  <xref:microsoft.quantum.simulation.generatorindex>,\
    \ and each set is described by a function from `GeneratorIndex` to  <xref:microsoft.quantum.simulation.evolutionunitary>,\
    \ which are operations parameterized by a real number representing time", uid: Microsoft.Quantum.Simulation.EvolutionSet}
- {summary: "Represents a unitary time-evolution operator.\nThe first parameter is\
    \ is duration of time-evolution, and the second parameter is the qubit register\
    \ acted upon by the unitary.", uid: Microsoft.Quantum.Simulation.EvolutionUnitary}
- {summary: "Represents a single primitive term in the set of all dynamical generators,\
    \ e.g. Hermitian operators, for which there exists a map from that generator to\
    \ time-evolution by that generator, through `EvolutionSet`.\nThe first element\
    \ (Int[], Double[]) is indexes that single term -- For instance, the Pauli string\
    \ XXY with coefficient 0.5 would be indexed by ([1,1,2], [0.5]). Alternatively,\
    \ Hamiltonians parameterized by a continuous variable, such as X cos \u03C6 +\
    \ Y sin \u03C6, might for instance be represented by ([], [\u03C6]). The second\
    \ element indexes the subsystem on which the generator acts on.", uid: Microsoft.Quantum.Simulation.GeneratorIndex}
- {summary: "Represents a collection of `GeneratorIndex`es.\nWe iterate over this\
    \ collection using a single-index integer, and the size of the collection is assumed\
    \ to be known.", uid: Microsoft.Quantum.Simulation.GeneratorSystem}
- {summary: "Represents a time-independent simulation algorithm.\nA time-independent\
    \ simulation technique converts an <xref:microsoft.quantum.simulation.evolutiongenerator>\
    \ to unitary time evolution for some time-interval.", uid: Microsoft.Quantum.Simulation.SimulationAlgorithm}
- {summary: "Represents a `BlockEncoding` that is controlled by a clock register.\n\
    That is, a `TimeDependentBlockEncoding` is a unitary $U$ controlled by a state\
    \ $\\ket{k}_d$ in clock register `d` such that an arbitrary operator $H_k$ of\
    \ interest that acts on the system register `s` is encoded in the top- left block\
    \ corresponding to auxiliary state $\\ket{0}_a$. That is,\n$$ \\begin{align} (\\\
    bra{0}\\_a\\otimes I_{ds})U(\\ket{0}\\_a\\otimes I_{ds}) = \\sum_{k}\\ket{k}\\\
    bra{k}\\_d\\otimes H_k. \\end{align} $$.", uid: Microsoft.Quantum.Simulation.TimeDependentBlockEncoding}
- {summary: Represents a time-dependent dynamical generator as a function from time
    to the value of the dynamical generator at that time., uid: Microsoft.Quantum.Simulation.TimeDependentGeneratorSystem}
- {summary: "Represents a time-dependent simulation algorithm.\nA time-dependent simulation\
    \ technique converts an <xref:microsoft.quantum.simulation.evolutionschedule>\
    \ to unitary time-evolution for some time-interval.", uid: Microsoft.Quantum.Simulation.TimeDependentSimulationAlgorithm}
- {summary: Represents evolution under a unitary operator., uid: Microsoft.Quantum.Simulation.Unitary}
operations:
- {summary: 'Performs state preparation by applying a `statePrepUnitary` on the input
    state, followed by adiabatic state preparation using a `adiabaticUnitary`, and
    finally phase estimation with respect to `qpeUnitary`on the resulting state using
    a `phaseEstAlgorithm`.', uid: Microsoft.Quantum.Simulation.AdiabaticStateEnergyUnitary}
- {summary: Implementation of `BlockEncodingToReflection`., uid: Microsoft.Quantum.Simulation.ApplyBlockEncodingAsReflection}
- {summary: Implementation of `BlockEncodingByLCU`., uid: Microsoft.Quantum.Simulation.ApplyBlockEncodingByLCU}
- {summary: 'Conversion of ((LittleEndian, Qubit[]) => () is Adj + Ctl) to BlockEncoding',
  uid: Microsoft.Quantum.Simulation.ApplyBlockEncodingFromBEandQubit}
- {summary: Used in implementation of `PauliBlockEncoding`, uid: Microsoft.Quantum.Simulation.ApplyPauliLCUUnitary}
- {summary: Implementation of `Qubitization`., uid: Microsoft.Quantum.Simulation.ApplyQuantumWalkByQubitization}
- {summary: Performs state preparation by applying a `statePrepUnitary` on an automatically
    allocated input state phase estimation with respect to `qpeUnitary`on the resulting
    state using a `phaseEstAlgorithm`., uid: Microsoft.Quantum.Simulation.EstimateEnergy}
- {summary: 'Performs state preparation by applying a `statePrepUnitary` on an automatically
    allocated input state, followed by adiabatic state preparation using a `adiabaticUnitary`,
    and finally phase estimation with respect to `qpeUnitary`on the resulting state
    using a `phaseEstAlgorithm`.', uid: Microsoft.Quantum.Simulation.EstimateEnergyWithAdiabaticEvolution}
- {summary: "Represents a dynamical generator as a set of simulatable gates and an\
    \ expansion in the Pauli basis.\nSee [Dynamical Generator Modeling](/quantum/libraries/data-structures#dynamical-generator-modeling)\
    \ for more details.", uid: Microsoft.Quantum.Simulation.PauliEvolutionImpl}
- {summary: "Implementation of multiple Trotter steps to approximate a unitary operator\
    \ that solves the time-dependent Schr\xF6dinger equation.", uid: Microsoft.Quantum.Simulation.TimeDependentTrotterSimulationAlgorithmImpl}
- {summary: Makes repeated calls to `TrotterStep` to approximate the time-evolution
    operator exp(_-iHt_)., uid: Microsoft.Quantum.Simulation.TrotterSimulationAlgorithmImpl}
- {summary: Implements time-evolution by a term contained in a `GeneratorSystem`.,
  uid: Microsoft.Quantum.Simulation.TrotterStepImpl}
summary: This namespace contains functions and operations for coherently simulating
  the dynamics of quantum systems.
uid: Microsoft.Quantum.Simulation
