### YamlMime:QSharpType
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.

uid: microsoft.quantum.synthesis.applypermutationusingdecompositionwithvariableorder
name: ApplyPermutationUsingDecompositionWithVariableOrder
type: operation
namespace: microsoft.quantum.synthesis
summary: |-
  Permutes the amplitudes in a quantum state given a permutation
  using decomposition-based synthesis.

  This operation is a more general version of @"microsoft.quantum.synthesis.applypermutationusingdecomposition"
  in which the variable order can be specified. A different variable order
  changes the decomposition sequence and the truth tables used for the
  controlled @"microsoft.quantum.intrinsic.x" gates.  Therefore, changing the
  variable order changes the number of overall gates used to realize the
  permutation.
examples: |-
  To synthesize a `SWAP` operation:

  ```Q#
  using (qubits = Qubit[2]) {
    ApplyPermutationUsingDecompositionWithVariableOrder([0, 2, 1, 3], [1, 0], LittleEndian(qubits));
  }
  ```
syntax: 'operation ApplyPermutationUsingDecompositionWithVariableOrder (perm : Int[], variableOrder : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(perm : Int[], variableOrder : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: perm
    summary: A permutation of $2^n$ elements starting from 0.
    isArray: true
    isPrimitive: true
    uid: Int
  - name: variableOrder
    summary: A permutation of $n$ elements starting from 0.
    isArray: true
    isPrimitive: true
    uid: Int
  - name: qubits
    summary: A list of $n$ qubits to which the permutation is applied to.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.synthesis.applypermutationusingdecomposition
- microsoft.quantum.synthesis.applypermutationusingtransformation
...
