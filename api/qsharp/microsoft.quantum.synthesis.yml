### YamlMime:QSharpNamespace
# This file is automatically generated.
# Please do not modify this file manually, or your changes may be lost when
# documentation is rebuilt.
functions:
- {summary: Decomposes a permutation on a variable, uid: Microsoft.Quantum.Synthesis.DecomposedOn}
- {summary: 'Encode truth table in {1,-1} coding', uid: Microsoft.Quantum.Synthesis.Encoded}
- {summary: Extends a spectrum by inverted coefficients, uid: Microsoft.Quantum.Synthesis.Extended}
- {summary: "Computes Hadamard transform of a Boolean function in {-1,1} encoding\
    \ using Yates's method", uid: Microsoft.Quantum.Synthesis.FastHadamardTransformed}
- {summary: 'For every 2-level unitary calculates "flip mask", which denotes qubits
    which should be inverted before and after applying corresponding 1-qubit gate.
    For convenience prepends result with 0.', uid: Microsoft.Quantum.Synthesis.FlipMasks}
- {summary: 'Constructs a MCMTMask type as a singleton array if targets is not 0,
    otherwise returns an empty array.', uid: Microsoft.Quantum.Synthesis.GateMask}
- {summary: Computes up to two MCMT masks to transform y to x., uid: Microsoft.Quantum.Synthesis.GateMasksForAssignment}
- {summary: Returns all positions in which bits of an integer are set., uid: Microsoft.Quantum.Synthesis.IntegerBits}
- {summary: Transform mask of control and target bits to a pair of control qubits
    and target qubits, uid: Microsoft.Quantum.Synthesis.MaskToQubitsPair}
- {summary: '{-1,1} coding of a Boolean truth value', uid: Microsoft.Quantum.Synthesis.RMEncoding}
- {summary: "Adjusts truth table from array of Booleans according to number of variables\n\
    A new array is returned of length `2^numVars`, possibly requiring to extend `table`'s\
    \ size with `false` entries or truncating it to `2^numVars` elements.", uid: Microsoft.Quantum.Synthesis.SizeAdjustedTruthTable}
- {summary: Checks that given array represents a square matrix., uid: Microsoft.Quantum.Synthesis.SquareMatrixFact}
- {summary: Compute gate masks to synthesize permutation., uid: Microsoft.Quantum.Synthesis.TBSMain}
- {summary: 'Computes gate masks to transform perm[x] to x and updates the current
    permutation.', uid: Microsoft.Quantum.Synthesis.TBSStep}
- {summary: Collect all functions for controlled gates by folding through all variable
    indexes, uid: Microsoft.Quantum.Synthesis.TruthTablesFromPermutation}
- {summary: Decomposition logic for a single variable index, uid: Microsoft.Quantum.Synthesis.TruthTablesFromPermutationFolder}
- {summary: Update an output pattern according to gate mask., uid: Microsoft.Quantum.Synthesis.UpdatedOutputPattern}
- {summary: Update permutation based according to gate mask., uid: Microsoft.Quantum.Synthesis.UpdatedPermutation}
- {summary: Insert a 0-bit into an integer, uid: Microsoft.Quantum.Synthesis.WithZeroInsertedAt}
- {summary: '', uid: Microsoft.Quantum.Synthesis._TwoLevelDecomposition}
name: Microsoft.Quantum.Synthesis
newtypes:
- {summary: State during decomposition based on variable indexes, uid: Microsoft.Quantum.Synthesis.DecompositionState}
- {summary: "A type to represent a multiple-controlled multiple-target Toffoli gate.\n\
    The first integer is a bit mask for control lines.  Bit indexes which are set\
    \ correspond to control line indexes.\nThe second integer is a bit mask for target\
    \ lines.  Bit indexes which are set correspond to target line indexes.\nThe bit\
    \ indexes of both integers must be disjoint.", uid: Microsoft.Quantum.Synthesis.MCMTMask}
operations:
- {summary: Permutes the amplitudes in a quantum state given a permutation using decomposition-based
    synthesis., uid: Microsoft.Quantum.Synthesis.ApplyPermutationUsingDecomposition}
- {summary: Permutes the amplitudes in a quantum state given a permutation using decomposition-based
    synthesis., uid: Microsoft.Quantum.Synthesis.ApplyPermutationUsingDecompositionWithVariableOrder}
- {summary: Permutes the amplitudes in a quantum state given a permutation using transformation-based
    synthesis., uid: Microsoft.Quantum.Synthesis.ApplyPermutationUsingTransformation}
- {summary: Applies single-qubit gate defined by 2x2 unitary matrix., uid: Microsoft.Quantum.Synthesis.ApplySingleQubitUnitary}
- {summary: '', uid: Microsoft.Quantum.Synthesis.ApplyTransposition}
- {summary: "Applies gate defined by 2^n x 2^n unitary matrix.\nFails if matrix is\
    \ not unitary, or has wrong size.", uid: Microsoft.Quantum.Synthesis.ApplyUnitary}
- {summary: 'Applies the @"microsoft.quantum.intrinsic.x" operation on `target`, if
    the Boolean function `func` evaluates to true for the classical assignment in
    `controlRegister`.', uid: Microsoft.Quantum.Synthesis.ApplyXControlledOnTruthTable}
- {summary: 'Applies the @"microsoft.quantum.intrinsic.x" operation on `target`, if
    the Boolean function `func` evaluates to true for the classical assignment in
    `controlRegister`.', uid: Microsoft.Quantum.Synthesis.ApplyXControlledOnTruthTableWithCleanTarget}
summary: This namespace contains functions and operations for synthesizing quantum
  operations based on permutations and Boolean functions.
uid: Microsoft.Quantum.Synthesis
